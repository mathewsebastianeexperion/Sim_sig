
SIM_Strength.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008650  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001190  080087e0  080087e0  000187e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009970  08009970  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08009970  08009970  00019970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009978  08009978  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009978  08009978  00019978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800997c  0800997c  0001997c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08009980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00004e58  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004ec4  20004ec4  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014277  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003c4c  00000000  00000000  00034356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001448  00000000  00000000  00037fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000fc1  00000000  00000000  000393f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027182  00000000  00000000  0003a3b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017f3c  00000000  00000000  00061533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e0731  00000000  00000000  0007946f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000062cc  00000000  00000000  00159ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0015fe6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080087c8 	.word	0x080087c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080087c8 	.word	0x080087c8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	4a06      	ldr	r2, [pc, #24]	; (80005cc <vApplicationGetIdleTaskMemory+0x30>)
 80005b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2280      	movs	r2, #128	; 0x80
 80005b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000088 	.word	0x20000088
 80005cc:	200000dc 	.word	0x200000dc

080005d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <__NVIC_GetPriorityGrouping+0x18>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	0a1b      	lsrs	r3, r3, #8
 80005da:	f003 0307 	and.w	r3, r3, #7
}
 80005de:	4618      	mov	r0, r3
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	e000ed00 	.word	0xe000ed00

080005ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	db0b      	blt.n	8000616 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	f003 021f 	and.w	r2, r3, #31
 8000604:	4907      	ldr	r1, [pc, #28]	; (8000624 <__NVIC_EnableIRQ+0x38>)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	095b      	lsrs	r3, r3, #5
 800060c:	2001      	movs	r0, #1
 800060e:	fa00 f202 	lsl.w	r2, r0, r2
 8000612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	e000e100 	.word	0xe000e100

08000628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	6039      	str	r1, [r7, #0]
 8000632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000638:	2b00      	cmp	r3, #0
 800063a:	db0a      	blt.n	8000652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	b2da      	uxtb	r2, r3
 8000640:	490c      	ldr	r1, [pc, #48]	; (8000674 <__NVIC_SetPriority+0x4c>)
 8000642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000646:	0112      	lsls	r2, r2, #4
 8000648:	b2d2      	uxtb	r2, r2
 800064a:	440b      	add	r3, r1
 800064c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000650:	e00a      	b.n	8000668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	b2da      	uxtb	r2, r3
 8000656:	4908      	ldr	r1, [pc, #32]	; (8000678 <__NVIC_SetPriority+0x50>)
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	f003 030f 	and.w	r3, r3, #15
 800065e:	3b04      	subs	r3, #4
 8000660:	0112      	lsls	r2, r2, #4
 8000662:	b2d2      	uxtb	r2, r2
 8000664:	440b      	add	r3, r1
 8000666:	761a      	strb	r2, [r3, #24]
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	e000e100 	.word	0xe000e100
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800067c:	b480      	push	{r7}
 800067e:	b089      	sub	sp, #36	; 0x24
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f003 0307 	and.w	r3, r3, #7
 800068e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000690:	69fb      	ldr	r3, [r7, #28]
 8000692:	f1c3 0307 	rsb	r3, r3, #7
 8000696:	2b04      	cmp	r3, #4
 8000698:	bf28      	it	cs
 800069a:	2304      	movcs	r3, #4
 800069c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	3304      	adds	r3, #4
 80006a2:	2b06      	cmp	r3, #6
 80006a4:	d902      	bls.n	80006ac <NVIC_EncodePriority+0x30>
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	3b03      	subs	r3, #3
 80006aa:	e000      	b.n	80006ae <NVIC_EncodePriority+0x32>
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b0:	f04f 32ff 	mov.w	r2, #4294967295
 80006b4:	69bb      	ldr	r3, [r7, #24]
 80006b6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ba:	43da      	mvns	r2, r3
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	401a      	ands	r2, r3
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c4:	f04f 31ff 	mov.w	r1, #4294967295
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	fa01 f303 	lsl.w	r3, r1, r3
 80006ce:	43d9      	mvns	r1, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	4313      	orrs	r3, r2
         );
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3724      	adds	r7, #36	; 0x24
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80006e2:	b480      	push	{r7}
 80006e4:	b083      	sub	sp, #12
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	68db      	ldr	r3, [r3, #12]
 80006ee:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	60da      	str	r2, [r3, #12]
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	691b      	ldr	r3, [r3, #16]
 800070e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	615a      	str	r2, [r3, #20]
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
	...

08000730 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800073a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800073c:	4907      	ldr	r1, [pc, #28]	; (800075c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4313      	orrs	r3, r2
 8000742:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4013      	ands	r3, r2
 800074c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800074e:	68fb      	ldr	r3, [r7, #12]
}
 8000750:	bf00      	nop
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	40023800 	.word	0x40023800

08000760 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <LL_APB1_GRP1_EnableClock+0x2c>)
 800076a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800076c:	4907      	ldr	r1, [pc, #28]	; (800078c <LL_APB1_GRP1_EnableClock+0x2c>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4313      	orrs	r3, r2
 8000772:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000776:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4013      	ands	r3, r2
 800077c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800077e:	68fb      	ldr	r3, [r7, #12]
}
 8000780:	bf00      	nop
 8000782:	3714      	adds	r7, #20
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	40023800 	.word	0x40023800

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b5b0      	push	{r4, r5, r7, lr}
 8000792:	b08e      	sub	sp, #56	; 0x38
 8000794:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000796:	f000 fc95 	bl	80010c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079a:	f000 f85d 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079e:	f000 f925 	bl	80009ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007a2:	f000 f8c3 	bl	800092c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  gsm_init();
 80007a6:	f003 f9b9 	bl	8003b1c <gsm_init>

  status = xTaskCreate(gsm_msg_handler,
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	9301      	str	r3, [sp, #4]
 80007b0:	2302      	movs	r3, #2
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2300      	movs	r3, #0
 80007b6:	22c8      	movs	r2, #200	; 0xc8
 80007b8:	4921      	ldr	r1, [pc, #132]	; (8000840 <main+0xb0>)
 80007ba:	4822      	ldr	r0, [pc, #136]	; (8000844 <main+0xb4>)
 80007bc:	f004 fff6 	bl	80057ac <xTaskCreate>
 80007c0:	62f8      	str	r0, [r7, #44]	; 0x2c
              NULL,
              2,
              &task_handle
                            );

  configASSERT(status == pdPASS);
 80007c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d00a      	beq.n	80007de <main+0x4e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80007c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007cc:	f383 8811 	msr	BASEPRI, r3
 80007d0:	f3bf 8f6f 	isb	sy
 80007d4:	f3bf 8f4f 	dsb	sy
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80007da:	bf00      	nop
 80007dc:	e7fe      	b.n	80007dc <main+0x4c>

  status = xTaskCreate(gsm_handler,
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	9301      	str	r3, [sp, #4]
 80007e4:	2302      	movs	r3, #2
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	2300      	movs	r3, #0
 80007ea:	22c8      	movs	r2, #200	; 0xc8
 80007ec:	4916      	ldr	r1, [pc, #88]	; (8000848 <main+0xb8>)
 80007ee:	4817      	ldr	r0, [pc, #92]	; (800084c <main+0xbc>)
 80007f0:	f004 ffdc 	bl	80057ac <xTaskCreate>
 80007f4:	62f8      	str	r0, [r7, #44]	; 0x2c
              NULL,
              2,
              &task1_handle
                            );

  configASSERT(status == pdPASS);
 80007f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d00a      	beq.n	8000812 <main+0x82>
	__asm volatile
 80007fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000800:	f383 8811 	msr	BASEPRI, r3
 8000804:	f3bf 8f6f 	isb	sy
 8000808:	f3bf 8f4f 	dsb	sy
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800080e:	bf00      	nop
 8000810:	e7fe      	b.n	8000810 <main+0x80>



  vTaskStartScheduler();
 8000812:	f005 f935 	bl	8005a80 <vTaskStartScheduler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <main+0xc0>)
 8000818:	463c      	mov	r4, r7
 800081a:	461d      	mov	r5, r3
 800081c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800081e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000820:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000824:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000828:	463b      	mov	r3, r7
 800082a:	2100      	movs	r1, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f004 fe4c 	bl	80054ca <osThreadCreate>
 8000832:	4603      	mov	r3, r0
 8000834:	4a07      	ldr	r2, [pc, #28]	; (8000854 <main+0xc4>)
 8000836:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000838:	f004 fe40 	bl	80054bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800083c:	e7fe      	b.n	800083c <main+0xac>
 800083e:	bf00      	nop
 8000840:	080087e0 	.word	0x080087e0
 8000844:	08000cb9 	.word	0x08000cb9
 8000848:	080087f0 	.word	0x080087f0
 800084c:	08000ca9 	.word	0x08000ca9
 8000850:	08008808 	.word	0x08008808
 8000854:	200002dc 	.word	0x200002dc

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	; 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	2230      	movs	r2, #48	; 0x30
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f006 fbfc 	bl	8007064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	4b28      	ldr	r3, [pc, #160]	; (8000924 <SystemClock_Config+0xcc>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	4a27      	ldr	r2, [pc, #156]	; (8000924 <SystemClock_Config+0xcc>)
 8000886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088a:	6413      	str	r3, [r2, #64]	; 0x40
 800088c:	4b25      	ldr	r3, [pc, #148]	; (8000924 <SystemClock_Config+0xcc>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	4b22      	ldr	r3, [pc, #136]	; (8000928 <SystemClock_Config+0xd0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a21      	ldr	r2, [pc, #132]	; (8000928 <SystemClock_Config+0xd0>)
 80008a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <SystemClock_Config+0xd0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b4:	2302      	movs	r3, #2
 80008b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b8:	2301      	movs	r3, #1
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008bc:	2310      	movs	r3, #16
 80008be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c0:	2302      	movs	r3, #2
 80008c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c4:	2300      	movs	r3, #0
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008c8:	2308      	movs	r3, #8
 80008ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80008cc:	2332      	movs	r3, #50	; 0x32
 80008ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008d0:	2304      	movs	r3, #4
 80008d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008d4:	2307      	movs	r3, #7
 80008d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d8:	f107 0320 	add.w	r3, r7, #32
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 fecb 	bl	8001678 <HAL_RCC_OscConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008e8:	f000 fa12 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ec:	230f      	movs	r3, #15
 80008ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f0:	2302      	movs	r3, #2
 80008f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000902:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f001 f92c 	bl	8001b68 <HAL_RCC_ClockConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000916:	f000 f9fb 	bl	8000d10 <Error_Handler>
  }
}
 800091a:	bf00      	nop
 800091c:	3750      	adds	r7, #80	; 0x50
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40007000 	.word	0x40007000

0800092c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	; 0x38
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]
 8000942:	615a      	str	r2, [r3, #20]
 8000944:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
 8000954:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000956:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800095a:	f7ff ff01 	bl	8000760 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800095e:	2001      	movs	r0, #1
 8000960:	f7ff fee6 	bl	8000730 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000964:	230c      	movs	r3, #12
 8000966:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000968:	2302      	movs	r3, #2
 800096a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000978:	2307      	movs	r3, #7
 800097a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	4619      	mov	r1, r3
 8000980:	4818      	ldr	r0, [pc, #96]	; (80009e4 <MX_USART2_UART_Init+0xb8>)
 8000982:	f001 ff1c 	bl	80027be <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 8000986:	f7ff fe23 	bl	80005d0 <__NVIC_GetPriorityGrouping>
 800098a:	4603      	mov	r3, r0
 800098c:	2200      	movs	r2, #0
 800098e:	2106      	movs	r1, #6
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fe73 	bl	800067c <NVIC_EncodePriority>
 8000996:	4603      	mov	r3, r0
 8000998:	4619      	mov	r1, r3
 800099a:	2026      	movs	r0, #38	; 0x26
 800099c:	f7ff fe44 	bl	8000628 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80009a0:	2026      	movs	r0, #38	; 0x26
 80009a2:	f7ff fe23 	bl	80005ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80009a6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80009aa:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80009b8:	230c      	movs	r3, #12
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80009bc:	2300      	movs	r3, #0
 80009be:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80009c0:	2300      	movs	r3, #0
 80009c2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4807      	ldr	r0, [pc, #28]	; (80009e8 <MX_USART2_UART_Init+0xbc>)
 80009cc:	f002 fb1a 	bl	8003004 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80009d0:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_USART2_UART_Init+0xbc>)
 80009d2:	f7ff fe96 	bl	8000702 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80009d6:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_USART2_UART_Init+0xbc>)
 80009d8:	f7ff fe83 	bl	80006e2 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	3738      	adds	r7, #56	; 0x38
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40020000 	.word	0x40020000
 80009e8:	40004400 	.word	0x40004400

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08c      	sub	sp, #48	; 0x30
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
 8000a06:	4ba2      	ldr	r3, [pc, #648]	; (8000c90 <MX_GPIO_Init+0x2a4>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4aa1      	ldr	r2, [pc, #644]	; (8000c90 <MX_GPIO_Init+0x2a4>)
 8000a0c:	f043 0310 	orr.w	r3, r3, #16
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b9f      	ldr	r3, [pc, #636]	; (8000c90 <MX_GPIO_Init+0x2a4>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0310 	and.w	r3, r3, #16
 8000a1a:	61bb      	str	r3, [r7, #24]
 8000a1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	4b9b      	ldr	r3, [pc, #620]	; (8000c90 <MX_GPIO_Init+0x2a4>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a9a      	ldr	r2, [pc, #616]	; (8000c90 <MX_GPIO_Init+0x2a4>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b98      	ldr	r3, [pc, #608]	; (8000c90 <MX_GPIO_Init+0x2a4>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b94      	ldr	r3, [pc, #592]	; (8000c90 <MX_GPIO_Init+0x2a4>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a93      	ldr	r2, [pc, #588]	; (8000c90 <MX_GPIO_Init+0x2a4>)
 8000a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b91      	ldr	r3, [pc, #580]	; (8000c90 <MX_GPIO_Init+0x2a4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b8d      	ldr	r3, [pc, #564]	; (8000c90 <MX_GPIO_Init+0x2a4>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a8c      	ldr	r2, [pc, #560]	; (8000c90 <MX_GPIO_Init+0x2a4>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b8a      	ldr	r3, [pc, #552]	; (8000c90 <MX_GPIO_Init+0x2a4>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	4b86      	ldr	r3, [pc, #536]	; (8000c90 <MX_GPIO_Init+0x2a4>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a85      	ldr	r2, [pc, #532]	; (8000c90 <MX_GPIO_Init+0x2a4>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b83      	ldr	r3, [pc, #524]	; (8000c90 <MX_GPIO_Init+0x2a4>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b7f      	ldr	r3, [pc, #508]	; (8000c90 <MX_GPIO_Init+0x2a4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a7e      	ldr	r2, [pc, #504]	; (8000c90 <MX_GPIO_Init+0x2a4>)
 8000a98:	f043 0308 	orr.w	r3, r3, #8
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b7c      	ldr	r3, [pc, #496]	; (8000c90 <MX_GPIO_Init+0x2a4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0308 	and.w	r3, r3, #8
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2108      	movs	r1, #8
 8000aae:	4879      	ldr	r0, [pc, #484]	; (8000c94 <MX_GPIO_Init+0x2a8>)
 8000ab0:	f000 fdc8 	bl	8001644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	4877      	ldr	r0, [pc, #476]	; (8000c98 <MX_GPIO_Init+0x2ac>)
 8000aba:	f000 fdc3 	bl	8001644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000ac4:	4875      	ldr	r0, [pc, #468]	; (8000c9c <MX_GPIO_Init+0x2b0>)
 8000ac6:	f000 fdbd 	bl	8001644 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000aca:	2308      	movs	r3, #8
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	486c      	ldr	r0, [pc, #432]	; (8000c94 <MX_GPIO_Init+0x2a8>)
 8000ae2:	f000 fc13 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	4866      	ldr	r0, [pc, #408]	; (8000c98 <MX_GPIO_Init+0x2ac>)
 8000afe:	f000 fc05 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b02:	2308      	movs	r3, #8
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b12:	2305      	movs	r3, #5
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	485e      	ldr	r0, [pc, #376]	; (8000c98 <MX_GPIO_Init+0x2ac>)
 8000b1e:	f000 fbf5 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b22:	2301      	movs	r3, #1
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b26:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	485a      	ldr	r0, [pc, #360]	; (8000ca0 <MX_GPIO_Init+0x2b4>)
 8000b38:	f000 fbe8 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b3c:	2310      	movs	r3, #16
 8000b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b4c:	2306      	movs	r3, #6
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	4852      	ldr	r0, [pc, #328]	; (8000ca0 <MX_GPIO_Init+0x2b4>)
 8000b58:	f000 fbd8 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b5c:	23e0      	movs	r3, #224	; 0xe0
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b6c:	2305      	movs	r3, #5
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4619      	mov	r1, r3
 8000b76:	484a      	ldr	r0, [pc, #296]	; (8000ca0 <MX_GPIO_Init+0x2b4>)
 8000b78:	f000 fbc8 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4845      	ldr	r0, [pc, #276]	; (8000ca4 <MX_GPIO_Init+0x2b8>)
 8000b90:	f000 fbbc 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ba6:	2305      	movs	r3, #5
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	483c      	ldr	r0, [pc, #240]	; (8000ca4 <MX_GPIO_Init+0x2b8>)
 8000bb2:	f000 fbab 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000bb6:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000bba:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4833      	ldr	r0, [pc, #204]	; (8000c9c <MX_GPIO_Init+0x2b0>)
 8000bd0:	f000 fb9c 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bd4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000be6:	2306      	movs	r3, #6
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4829      	ldr	r0, [pc, #164]	; (8000c98 <MX_GPIO_Init+0x2ac>)
 8000bf2:	f000 fb8b 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000bf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4825      	ldr	r0, [pc, #148]	; (8000ca0 <MX_GPIO_Init+0x2b4>)
 8000c0c:	f000 fb7e 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000c10:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c22:	230a      	movs	r3, #10
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	481c      	ldr	r0, [pc, #112]	; (8000ca0 <MX_GPIO_Init+0x2b4>)
 8000c2e:	f000 fb6d 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c32:	2320      	movs	r3, #32
 8000c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	4815      	ldr	r0, [pc, #84]	; (8000c9c <MX_GPIO_Init+0x2b0>)
 8000c46:	f000 fb61 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c4a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c50:	2312      	movs	r3, #18
 8000c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	480f      	ldr	r0, [pc, #60]	; (8000ca4 <MX_GPIO_Init+0x2b8>)
 8000c68:	f000 fb50 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c70:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4804      	ldr	r0, [pc, #16]	; (8000c94 <MX_GPIO_Init+0x2a8>)
 8000c82:	f000 fb43 	bl	800130c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c86:	bf00      	nop
 8000c88:	3730      	adds	r7, #48	; 0x30
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40020800 	.word	0x40020800
 8000c9c:	40020c00 	.word	0x40020c00
 8000ca0:	40020000 	.word	0x40020000
 8000ca4:	40020400 	.word	0x40020400

08000ca8 <gsm_handler>:

/* USER CODE BEGIN 4 */

static void gsm_handler(void* parameters)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]

	while(1)
	{
		gsm_getSignalQuality_0_to_100();
 8000cb0:	f003 f8ec 	bl	8003e8c <gsm_getSignalQuality_0_to_100>
 8000cb4:	e7fc      	b.n	8000cb0 <gsm_handler+0x8>
	...

08000cb8 <gsm_msg_handler>:
	}
}

static void gsm_msg_handler(void* parameters)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	gsm_init();
 8000cc0:	f002 ff2c 	bl	8003b1c <gsm_init>
	gsm_power(true);
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f002 ffcd 	bl	8003c64 <gsm_power>
	while(1)
	{
		gsm_msg_send("+919074418771", "Hi");
 8000cca:	4902      	ldr	r1, [pc, #8]	; (8000cd4 <gsm_msg_handler+0x1c>)
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <gsm_msg_handler+0x20>)
 8000cce:	f003 fa99 	bl	8004204 <gsm_msg_send>
 8000cd2:	e7fa      	b.n	8000cca <gsm_msg_handler+0x12>
 8000cd4:	08008824 	.word	0x08008824
 8000cd8:	08008828 	.word	0x08008828

08000cdc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f004 fc3c 	bl	8005562 <osDelay>
 8000cea:	e7fb      	b.n	8000ce4 <StartDefaultTask+0x8>

08000cec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d101      	bne.n	8000d02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cfe:	f000 fa03 	bl	8001108 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40001000 	.word	0x40001000

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <Error_Handler+0x8>
	...

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_MspInit+0x54>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a11      	ldr	r2, [pc, #68]	; (8000d70 <HAL_MspInit+0x54>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_MspInit+0x54>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <HAL_MspInit+0x54>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <HAL_MspInit+0x54>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_MspInit+0x54>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	210f      	movs	r1, #15
 8000d5e:	f06f 0001 	mvn.w	r0, #1
 8000d62:	f000 faa9 	bl	80012b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800

08000d74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08e      	sub	sp, #56	; 0x38
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	4b33      	ldr	r3, [pc, #204]	; (8000e58 <HAL_InitTick+0xe4>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	4a32      	ldr	r2, [pc, #200]	; (8000e58 <HAL_InitTick+0xe4>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	6413      	str	r3, [r2, #64]	; 0x40
 8000d94:	4b30      	ldr	r3, [pc, #192]	; (8000e58 <HAL_InitTick+0xe4>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	f003 0310 	and.w	r3, r3, #16
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000da0:	f107 0210 	add.w	r2, r7, #16
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4611      	mov	r1, r2
 8000daa:	4618      	mov	r0, r3
 8000dac:	f001 f8e8 	bl	8001f80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000db0:	6a3b      	ldr	r3, [r7, #32]
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d103      	bne.n	8000dc2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dba:	f001 f8cd 	bl	8001f58 <HAL_RCC_GetPCLK1Freq>
 8000dbe:	6378      	str	r0, [r7, #52]	; 0x34
 8000dc0:	e004      	b.n	8000dcc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dc2:	f001 f8c9 	bl	8001f58 <HAL_RCC_GetPCLK1Freq>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dce:	4a23      	ldr	r2, [pc, #140]	; (8000e5c <HAL_InitTick+0xe8>)
 8000dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd4:	0c9b      	lsrs	r3, r3, #18
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dda:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <HAL_InitTick+0xec>)
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <HAL_InitTick+0xf0>)
 8000dde:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <HAL_InitTick+0xec>)
 8000de2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000de6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000de8:	4a1d      	ldr	r2, [pc, #116]	; (8000e60 <HAL_InitTick+0xec>)
 8000dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dee:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <HAL_InitTick+0xec>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <HAL_InitTick+0xec>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfa:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <HAL_InitTick+0xec>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e00:	4817      	ldr	r0, [pc, #92]	; (8000e60 <HAL_InitTick+0xec>)
 8000e02:	f001 f8ef 	bl	8001fe4 <HAL_TIM_Base_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d11b      	bne.n	8000e4c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e14:	4812      	ldr	r0, [pc, #72]	; (8000e60 <HAL_InitTick+0xec>)
 8000e16:	f001 f93f 	bl	8002098 <HAL_TIM_Base_Start_IT>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d111      	bne.n	8000e4c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e28:	2036      	movs	r0, #54	; 0x36
 8000e2a:	f000 fa61 	bl	80012f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b0f      	cmp	r3, #15
 8000e32:	d808      	bhi.n	8000e46 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e34:	2200      	movs	r2, #0
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	2036      	movs	r0, #54	; 0x36
 8000e3a:	f000 fa3d 	bl	80012b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <HAL_InitTick+0xf4>)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	e002      	b.n	8000e4c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3738      	adds	r7, #56	; 0x38
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	431bde83 	.word	0x431bde83
 8000e60:	200002e0 	.word	0x200002e0
 8000e64:	40001000 	.word	0x40001000
 8000e68:	20000004 	.word	0x20000004

08000e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e70:	e7fe      	b.n	8000e70 <NMI_Handler+0x4>

08000e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <HardFault_Handler+0x4>

08000e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <MemManage_Handler+0x4>

08000e7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <BusFault_Handler+0x4>

08000e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <UsageFault_Handler+0x4>

08000e8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	gsm_rxCallback();
 8000e9c:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <USART2_IRQHandler+0x10>)
 8000e9e:	f002 fa6b 	bl	8003378 <atc_rxCallback>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000338 	.word	0x20000338

08000eac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <TIM6_DAC_IRQHandler+0x10>)
 8000eb2:	f001 f961 	bl	8002178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200002e0 	.word	0x200002e0

08000ec0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return 1;
 8000ec4:	2301      	movs	r3, #1
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <_kill>:

int _kill(int pid, int sig)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000eda:	f006 f9b3 	bl	8007244 <__errno>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2216      	movs	r2, #22
 8000ee2:	601a      	str	r2, [r3, #0]
  return -1;
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <_exit>:

void _exit (int status)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ffe7 	bl	8000ed0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f02:	e7fe      	b.n	8000f02 <_exit+0x12>

08000f04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	e00a      	b.n	8000f2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f16:	f3af 8000 	nop.w
 8000f1a:	4601      	mov	r1, r0
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	1c5a      	adds	r2, r3, #1
 8000f20:	60ba      	str	r2, [r7, #8]
 8000f22:	b2ca      	uxtb	r2, r1
 8000f24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	dbf0      	blt.n	8000f16 <_read+0x12>
  }

  return len;
 8000f34:	687b      	ldr	r3, [r7, #4]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
 8000f4e:	e009      	b.n	8000f64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	60ba      	str	r2, [r7, #8]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	3301      	adds	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	dbf1      	blt.n	8000f50 <_write+0x12>
  }
  return len;
 8000f6c:	687b      	ldr	r3, [r7, #4]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <_close>:

int _close(int file)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
 8000f96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f9e:	605a      	str	r2, [r3, #4]
  return 0;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <_isatty>:

int _isatty(int file)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe8:	4a14      	ldr	r2, [pc, #80]	; (800103c <_sbrk+0x5c>)
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <_sbrk+0x60>)
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <_sbrk+0x64>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <_sbrk+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	429a      	cmp	r2, r3
 800100e:	d207      	bcs.n	8001020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001010:	f006 f918 	bl	8007244 <__errno>
 8001014:	4603      	mov	r3, r0
 8001016:	220c      	movs	r2, #12
 8001018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e009      	b.n	8001034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <_sbrk+0x64>)
 8001030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20020000 	.word	0x20020000
 8001040:	00000400 	.word	0x00000400
 8001044:	20000328 	.word	0x20000328
 8001048:	20004ec8 	.word	0x20004ec8

0800104c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <SystemInit+0x20>)
 8001052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001056:	4a05      	ldr	r2, [pc, #20]	; (800106c <SystemInit+0x20>)
 8001058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800105c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001074:	f7ff ffea 	bl	800104c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001078:	480c      	ldr	r0, [pc, #48]	; (80010ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800107a:	490d      	ldr	r1, [pc, #52]	; (80010b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800107c:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001080:	e002      	b.n	8001088 <LoopCopyDataInit>

08001082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001086:	3304      	adds	r3, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800108c:	d3f9      	bcc.n	8001082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001090:	4c0a      	ldr	r4, [pc, #40]	; (80010bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001094:	e001      	b.n	800109a <LoopFillZerobss>

08001096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001098:	3204      	adds	r2, #4

0800109a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800109c:	d3fb      	bcc.n	8001096 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800109e:	f006 f8d7 	bl	8007250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a2:	f7ff fb75 	bl	8000790 <main>
  bx  lr    
 80010a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80010b4:	08009980 	.word	0x08009980
  ldr r2, =_sbss
 80010b8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80010bc:	20004ec4 	.word	0x20004ec4

080010c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC_IRQHandler>
	...

080010c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c8:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <HAL_Init+0x40>)
 80010ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <HAL_Init+0x40>)
 80010da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_Init+0x40>)
 80010e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ec:	2003      	movs	r0, #3
 80010ee:	f000 f8d8 	bl	80012a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f2:	200f      	movs	r0, #15
 80010f4:	f7ff fe3e 	bl	8000d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f8:	f7ff fe10 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023c00 	.word	0x40023c00

08001108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_IncTick+0x20>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <HAL_IncTick+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008
 800112c:	2000032c 	.word	0x2000032c

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	2000032c 	.word	0x2000032c

08001148 <__NVIC_SetPriorityGrouping>:
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001170:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	; (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_GetPriorityGrouping>:
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	f003 0307 	and.w	r3, r3, #7
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_EnableIRQ>:
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db0b      	blt.n	80011d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f003 021f 	and.w	r2, r3, #31
 80011c4:	4907      	ldr	r1, [pc, #28]	; (80011e4 <__NVIC_EnableIRQ+0x38>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	2001      	movs	r0, #1
 80011ce:	fa00 f202 	lsl.w	r2, r0, r2
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000e100 	.word	0xe000e100

080011e8 <__NVIC_SetPriority>:
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	db0a      	blt.n	8001212 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	490c      	ldr	r1, [pc, #48]	; (8001234 <__NVIC_SetPriority+0x4c>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	0112      	lsls	r2, r2, #4
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	440b      	add	r3, r1
 800120c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001210:	e00a      	b.n	8001228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4908      	ldr	r1, [pc, #32]	; (8001238 <__NVIC_SetPriority+0x50>)
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	3b04      	subs	r3, #4
 8001220:	0112      	lsls	r2, r2, #4
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	440b      	add	r3, r1
 8001226:	761a      	strb	r2, [r3, #24]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000e100 	.word	0xe000e100
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <NVIC_EncodePriority>:
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	; 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f1c3 0307 	rsb	r3, r3, #7
 8001256:	2b04      	cmp	r3, #4
 8001258:	bf28      	it	cs
 800125a:	2304      	movcs	r3, #4
 800125c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3304      	adds	r3, #4
 8001262:	2b06      	cmp	r3, #6
 8001264:	d902      	bls.n	800126c <NVIC_EncodePriority+0x30>
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3b03      	subs	r3, #3
 800126a:	e000      	b.n	800126e <NVIC_EncodePriority+0x32>
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	f04f 32ff 	mov.w	r2, #4294967295
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43da      	mvns	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	401a      	ands	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001284:	f04f 31ff 	mov.w	r1, #4294967295
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa01 f303 	lsl.w	r3, r1, r3
 800128e:	43d9      	mvns	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	4313      	orrs	r3, r2
}
 8001296:	4618      	mov	r0, r3
 8001298:	3724      	adds	r7, #36	; 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ff4c 	bl	8001148 <__NVIC_SetPriorityGrouping>
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
 80012c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ca:	f7ff ff61 	bl	8001190 <__NVIC_GetPriorityGrouping>
 80012ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	68b9      	ldr	r1, [r7, #8]
 80012d4:	6978      	ldr	r0, [r7, #20]
 80012d6:	f7ff ffb1 	bl	800123c <NVIC_EncodePriority>
 80012da:	4602      	mov	r2, r0
 80012dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff80 	bl	80011e8 <__NVIC_SetPriority>
}
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff54 	bl	80011ac <__NVIC_EnableIRQ>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
 8001326:	e16b      	b.n	8001600 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001328:	2201      	movs	r2, #1
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	429a      	cmp	r2, r3
 8001342:	f040 815a 	bne.w	80015fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	2b01      	cmp	r3, #1
 8001350:	d005      	beq.n	800135e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800135a:	2b02      	cmp	r3, #2
 800135c:	d130      	bne.n	80013c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	2203      	movs	r2, #3
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	68da      	ldr	r2, [r3, #12]
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001394:	2201      	movs	r2, #1
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	091b      	lsrs	r3, r3, #4
 80013aa:	f003 0201 	and.w	r2, r3, #1
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d017      	beq.n	80013fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	2203      	movs	r2, #3
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d123      	bne.n	8001450 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	08da      	lsrs	r2, r3, #3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3208      	adds	r2, #8
 8001410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	220f      	movs	r2, #15
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	691a      	ldr	r2, [r3, #16]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	08da      	lsrs	r2, r3, #3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3208      	adds	r2, #8
 800144a:	69b9      	ldr	r1, [r7, #24]
 800144c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0203 	and.w	r2, r3, #3
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80b4 	beq.w	80015fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b60      	ldr	r3, [pc, #384]	; (8001618 <HAL_GPIO_Init+0x30c>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	4a5f      	ldr	r2, [pc, #380]	; (8001618 <HAL_GPIO_Init+0x30c>)
 800149c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a0:	6453      	str	r3, [r2, #68]	; 0x44
 80014a2:	4b5d      	ldr	r3, [pc, #372]	; (8001618 <HAL_GPIO_Init+0x30c>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ae:	4a5b      	ldr	r2, [pc, #364]	; (800161c <HAL_GPIO_Init+0x310>)
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	089b      	lsrs	r3, r3, #2
 80014b4:	3302      	adds	r3, #2
 80014b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f003 0303 	and.w	r3, r3, #3
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	220f      	movs	r2, #15
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a52      	ldr	r2, [pc, #328]	; (8001620 <HAL_GPIO_Init+0x314>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d02b      	beq.n	8001532 <HAL_GPIO_Init+0x226>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a51      	ldr	r2, [pc, #324]	; (8001624 <HAL_GPIO_Init+0x318>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d025      	beq.n	800152e <HAL_GPIO_Init+0x222>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a50      	ldr	r2, [pc, #320]	; (8001628 <HAL_GPIO_Init+0x31c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d01f      	beq.n	800152a <HAL_GPIO_Init+0x21e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4f      	ldr	r2, [pc, #316]	; (800162c <HAL_GPIO_Init+0x320>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d019      	beq.n	8001526 <HAL_GPIO_Init+0x21a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4e      	ldr	r2, [pc, #312]	; (8001630 <HAL_GPIO_Init+0x324>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <HAL_GPIO_Init+0x216>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4d      	ldr	r2, [pc, #308]	; (8001634 <HAL_GPIO_Init+0x328>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00d      	beq.n	800151e <HAL_GPIO_Init+0x212>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4c      	ldr	r2, [pc, #304]	; (8001638 <HAL_GPIO_Init+0x32c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d007      	beq.n	800151a <HAL_GPIO_Init+0x20e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4b      	ldr	r2, [pc, #300]	; (800163c <HAL_GPIO_Init+0x330>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <HAL_GPIO_Init+0x20a>
 8001512:	2307      	movs	r3, #7
 8001514:	e00e      	b.n	8001534 <HAL_GPIO_Init+0x228>
 8001516:	2308      	movs	r3, #8
 8001518:	e00c      	b.n	8001534 <HAL_GPIO_Init+0x228>
 800151a:	2306      	movs	r3, #6
 800151c:	e00a      	b.n	8001534 <HAL_GPIO_Init+0x228>
 800151e:	2305      	movs	r3, #5
 8001520:	e008      	b.n	8001534 <HAL_GPIO_Init+0x228>
 8001522:	2304      	movs	r3, #4
 8001524:	e006      	b.n	8001534 <HAL_GPIO_Init+0x228>
 8001526:	2303      	movs	r3, #3
 8001528:	e004      	b.n	8001534 <HAL_GPIO_Init+0x228>
 800152a:	2302      	movs	r3, #2
 800152c:	e002      	b.n	8001534 <HAL_GPIO_Init+0x228>
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <HAL_GPIO_Init+0x228>
 8001532:	2300      	movs	r3, #0
 8001534:	69fa      	ldr	r2, [r7, #28]
 8001536:	f002 0203 	and.w	r2, r2, #3
 800153a:	0092      	lsls	r2, r2, #2
 800153c:	4093      	lsls	r3, r2
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001544:	4935      	ldr	r1, [pc, #212]	; (800161c <HAL_GPIO_Init+0x310>)
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	3302      	adds	r3, #2
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001552:	4b3b      	ldr	r3, [pc, #236]	; (8001640 <HAL_GPIO_Init+0x334>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001576:	4a32      	ldr	r2, [pc, #200]	; (8001640 <HAL_GPIO_Init+0x334>)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800157c:	4b30      	ldr	r3, [pc, #192]	; (8001640 <HAL_GPIO_Init+0x334>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015a0:	4a27      	ldr	r2, [pc, #156]	; (8001640 <HAL_GPIO_Init+0x334>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015a6:	4b26      	ldr	r3, [pc, #152]	; (8001640 <HAL_GPIO_Init+0x334>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015ca:	4a1d      	ldr	r2, [pc, #116]	; (8001640 <HAL_GPIO_Init+0x334>)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <HAL_GPIO_Init+0x334>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015f4:	4a12      	ldr	r2, [pc, #72]	; (8001640 <HAL_GPIO_Init+0x334>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3301      	adds	r3, #1
 80015fe:	61fb      	str	r3, [r7, #28]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	2b0f      	cmp	r3, #15
 8001604:	f67f ae90 	bls.w	8001328 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3724      	adds	r7, #36	; 0x24
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40013800 	.word	0x40013800
 8001620:	40020000 	.word	0x40020000
 8001624:	40020400 	.word	0x40020400
 8001628:	40020800 	.word	0x40020800
 800162c:	40020c00 	.word	0x40020c00
 8001630:	40021000 	.word	0x40021000
 8001634:	40021400 	.word	0x40021400
 8001638:	40021800 	.word	0x40021800
 800163c:	40021c00 	.word	0x40021c00
 8001640:	40013c00 	.word	0x40013c00

08001644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	807b      	strh	r3, [r7, #2]
 8001650:	4613      	mov	r3, r2
 8001652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001654:	787b      	ldrb	r3, [r7, #1]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800165a:	887a      	ldrh	r2, [r7, #2]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001660:	e003      	b.n	800166a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001662:	887b      	ldrh	r3, [r7, #2]
 8001664:	041a      	lsls	r2, r3, #16
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	619a      	str	r2, [r3, #24]
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e267      	b.n	8001b5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d075      	beq.n	8001782 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001696:	4b88      	ldr	r3, [pc, #544]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d00c      	beq.n	80016bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016a2:	4b85      	ldr	r3, [pc, #532]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016aa:	2b08      	cmp	r3, #8
 80016ac:	d112      	bne.n	80016d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ae:	4b82      	ldr	r3, [pc, #520]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016ba:	d10b      	bne.n	80016d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016bc:	4b7e      	ldr	r3, [pc, #504]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d05b      	beq.n	8001780 <HAL_RCC_OscConfig+0x108>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d157      	bne.n	8001780 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e242      	b.n	8001b5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016dc:	d106      	bne.n	80016ec <HAL_RCC_OscConfig+0x74>
 80016de:	4b76      	ldr	r3, [pc, #472]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a75      	ldr	r2, [pc, #468]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 80016e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e01d      	b.n	8001728 <HAL_RCC_OscConfig+0xb0>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016f4:	d10c      	bne.n	8001710 <HAL_RCC_OscConfig+0x98>
 80016f6:	4b70      	ldr	r3, [pc, #448]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a6f      	ldr	r2, [pc, #444]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 80016fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	4b6d      	ldr	r3, [pc, #436]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a6c      	ldr	r2, [pc, #432]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 8001708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	e00b      	b.n	8001728 <HAL_RCC_OscConfig+0xb0>
 8001710:	4b69      	ldr	r3, [pc, #420]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a68      	ldr	r2, [pc, #416]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 8001716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b66      	ldr	r3, [pc, #408]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a65      	ldr	r2, [pc, #404]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 8001722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d013      	beq.n	8001758 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7ff fcfe 	bl	8001130 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001738:	f7ff fcfa 	bl	8001130 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b64      	cmp	r3, #100	; 0x64
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e207      	b.n	8001b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174a:	4b5b      	ldr	r3, [pc, #364]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f0      	beq.n	8001738 <HAL_RCC_OscConfig+0xc0>
 8001756:	e014      	b.n	8001782 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7ff fcea 	bl	8001130 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001760:	f7ff fce6 	bl	8001130 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b64      	cmp	r3, #100	; 0x64
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e1f3      	b.n	8001b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001772:	4b51      	ldr	r3, [pc, #324]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0xe8>
 800177e:	e000      	b.n	8001782 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d063      	beq.n	8001856 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800178e:	4b4a      	ldr	r3, [pc, #296]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00b      	beq.n	80017b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800179a:	4b47      	ldr	r3, [pc, #284]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d11c      	bne.n	80017e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a6:	4b44      	ldr	r3, [pc, #272]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d116      	bne.n	80017e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b2:	4b41      	ldr	r3, [pc, #260]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d005      	beq.n	80017ca <HAL_RCC_OscConfig+0x152>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d001      	beq.n	80017ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e1c7      	b.n	8001b5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ca:	4b3b      	ldr	r3, [pc, #236]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	4937      	ldr	r1, [pc, #220]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017de:	e03a      	b.n	8001856 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d020      	beq.n	800182a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017e8:	4b34      	ldr	r3, [pc, #208]	; (80018bc <HAL_RCC_OscConfig+0x244>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ee:	f7ff fc9f 	bl	8001130 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f6:	f7ff fc9b 	bl	8001130 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e1a8      	b.n	8001b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001808:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001814:	4b28      	ldr	r3, [pc, #160]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	4925      	ldr	r1, [pc, #148]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 8001824:	4313      	orrs	r3, r2
 8001826:	600b      	str	r3, [r1, #0]
 8001828:	e015      	b.n	8001856 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800182a:	4b24      	ldr	r3, [pc, #144]	; (80018bc <HAL_RCC_OscConfig+0x244>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff fc7e 	bl	8001130 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001838:	f7ff fc7a 	bl	8001130 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e187      	b.n	8001b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184a:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d036      	beq.n	80018d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d016      	beq.n	8001898 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <HAL_RCC_OscConfig+0x248>)
 800186c:	2201      	movs	r2, #1
 800186e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001870:	f7ff fc5e 	bl	8001130 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001878:	f7ff fc5a 	bl	8001130 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e167      	b.n	8001b5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_RCC_OscConfig+0x240>)
 800188c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0x200>
 8001896:	e01b      	b.n	80018d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_RCC_OscConfig+0x248>)
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189e:	f7ff fc47 	bl	8001130 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a4:	e00e      	b.n	80018c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a6:	f7ff fc43 	bl	8001130 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d907      	bls.n	80018c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e150      	b.n	8001b5a <HAL_RCC_OscConfig+0x4e2>
 80018b8:	40023800 	.word	0x40023800
 80018bc:	42470000 	.word	0x42470000
 80018c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c4:	4b88      	ldr	r3, [pc, #544]	; (8001ae8 <HAL_RCC_OscConfig+0x470>)
 80018c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1ea      	bne.n	80018a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 8097 	beq.w	8001a0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e2:	4b81      	ldr	r3, [pc, #516]	; (8001ae8 <HAL_RCC_OscConfig+0x470>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10f      	bne.n	800190e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	4b7d      	ldr	r3, [pc, #500]	; (8001ae8 <HAL_RCC_OscConfig+0x470>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	4a7c      	ldr	r2, [pc, #496]	; (8001ae8 <HAL_RCC_OscConfig+0x470>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fc:	6413      	str	r3, [r2, #64]	; 0x40
 80018fe:	4b7a      	ldr	r3, [pc, #488]	; (8001ae8 <HAL_RCC_OscConfig+0x470>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800190a:	2301      	movs	r3, #1
 800190c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190e:	4b77      	ldr	r3, [pc, #476]	; (8001aec <HAL_RCC_OscConfig+0x474>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001916:	2b00      	cmp	r3, #0
 8001918:	d118      	bne.n	800194c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800191a:	4b74      	ldr	r3, [pc, #464]	; (8001aec <HAL_RCC_OscConfig+0x474>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a73      	ldr	r2, [pc, #460]	; (8001aec <HAL_RCC_OscConfig+0x474>)
 8001920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001926:	f7ff fc03 	bl	8001130 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800192e:	f7ff fbff 	bl	8001130 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e10c      	b.n	8001b5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001940:	4b6a      	ldr	r3, [pc, #424]	; (8001aec <HAL_RCC_OscConfig+0x474>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d106      	bne.n	8001962 <HAL_RCC_OscConfig+0x2ea>
 8001954:	4b64      	ldr	r3, [pc, #400]	; (8001ae8 <HAL_RCC_OscConfig+0x470>)
 8001956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001958:	4a63      	ldr	r2, [pc, #396]	; (8001ae8 <HAL_RCC_OscConfig+0x470>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6713      	str	r3, [r2, #112]	; 0x70
 8001960:	e01c      	b.n	800199c <HAL_RCC_OscConfig+0x324>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b05      	cmp	r3, #5
 8001968:	d10c      	bne.n	8001984 <HAL_RCC_OscConfig+0x30c>
 800196a:	4b5f      	ldr	r3, [pc, #380]	; (8001ae8 <HAL_RCC_OscConfig+0x470>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196e:	4a5e      	ldr	r2, [pc, #376]	; (8001ae8 <HAL_RCC_OscConfig+0x470>)
 8001970:	f043 0304 	orr.w	r3, r3, #4
 8001974:	6713      	str	r3, [r2, #112]	; 0x70
 8001976:	4b5c      	ldr	r3, [pc, #368]	; (8001ae8 <HAL_RCC_OscConfig+0x470>)
 8001978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197a:	4a5b      	ldr	r2, [pc, #364]	; (8001ae8 <HAL_RCC_OscConfig+0x470>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6713      	str	r3, [r2, #112]	; 0x70
 8001982:	e00b      	b.n	800199c <HAL_RCC_OscConfig+0x324>
 8001984:	4b58      	ldr	r3, [pc, #352]	; (8001ae8 <HAL_RCC_OscConfig+0x470>)
 8001986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001988:	4a57      	ldr	r2, [pc, #348]	; (8001ae8 <HAL_RCC_OscConfig+0x470>)
 800198a:	f023 0301 	bic.w	r3, r3, #1
 800198e:	6713      	str	r3, [r2, #112]	; 0x70
 8001990:	4b55      	ldr	r3, [pc, #340]	; (8001ae8 <HAL_RCC_OscConfig+0x470>)
 8001992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001994:	4a54      	ldr	r2, [pc, #336]	; (8001ae8 <HAL_RCC_OscConfig+0x470>)
 8001996:	f023 0304 	bic.w	r3, r3, #4
 800199a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d015      	beq.n	80019d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a4:	f7ff fbc4 	bl	8001130 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ac:	f7ff fbc0 	bl	8001130 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e0cb      	b.n	8001b5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c2:	4b49      	ldr	r3, [pc, #292]	; (8001ae8 <HAL_RCC_OscConfig+0x470>)
 80019c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0ee      	beq.n	80019ac <HAL_RCC_OscConfig+0x334>
 80019ce:	e014      	b.n	80019fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d0:	f7ff fbae 	bl	8001130 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d6:	e00a      	b.n	80019ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d8:	f7ff fbaa 	bl	8001130 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e0b5      	b.n	8001b5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ee:	4b3e      	ldr	r3, [pc, #248]	; (8001ae8 <HAL_RCC_OscConfig+0x470>)
 80019f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1ee      	bne.n	80019d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019fa:	7dfb      	ldrb	r3, [r7, #23]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d105      	bne.n	8001a0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a00:	4b39      	ldr	r3, [pc, #228]	; (8001ae8 <HAL_RCC_OscConfig+0x470>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	4a38      	ldr	r2, [pc, #224]	; (8001ae8 <HAL_RCC_OscConfig+0x470>)
 8001a06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 80a1 	beq.w	8001b58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a16:	4b34      	ldr	r3, [pc, #208]	; (8001ae8 <HAL_RCC_OscConfig+0x470>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d05c      	beq.n	8001adc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d141      	bne.n	8001aae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2a:	4b31      	ldr	r3, [pc, #196]	; (8001af0 <HAL_RCC_OscConfig+0x478>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff fb7e 	bl	8001130 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a38:	f7ff fb7a 	bl	8001130 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e087      	b.n	8001b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4a:	4b27      	ldr	r3, [pc, #156]	; (8001ae8 <HAL_RCC_OscConfig+0x470>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69da      	ldr	r2, [r3, #28]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	019b      	lsls	r3, r3, #6
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6c:	085b      	lsrs	r3, r3, #1
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	041b      	lsls	r3, r3, #16
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a78:	061b      	lsls	r3, r3, #24
 8001a7a:	491b      	ldr	r1, [pc, #108]	; (8001ae8 <HAL_RCC_OscConfig+0x470>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a80:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <HAL_RCC_OscConfig+0x478>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7ff fb53 	bl	8001130 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7ff fb4f 	bl	8001130 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e05c      	b.n	8001b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <HAL_RCC_OscConfig+0x470>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x416>
 8001aac:	e054      	b.n	8001b58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <HAL_RCC_OscConfig+0x478>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fb3c 	bl	8001130 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001abc:	f7ff fb38 	bl	8001130 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e045      	b.n	8001b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_RCC_OscConfig+0x470>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x444>
 8001ada:	e03d      	b.n	8001b58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d107      	bne.n	8001af4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e038      	b.n	8001b5a <HAL_RCC_OscConfig+0x4e2>
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40007000 	.word	0x40007000
 8001af0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001af4:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <HAL_RCC_OscConfig+0x4ec>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d028      	beq.n	8001b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d121      	bne.n	8001b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d11a      	bne.n	8001b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b24:	4013      	ands	r3, r2
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d111      	bne.n	8001b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3a:	085b      	lsrs	r3, r3, #1
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d107      	bne.n	8001b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800

08001b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0cc      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b7c:	4b68      	ldr	r3, [pc, #416]	; (8001d20 <HAL_RCC_ClockConfig+0x1b8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d90c      	bls.n	8001ba4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8a:	4b65      	ldr	r3, [pc, #404]	; (8001d20 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b92:	4b63      	ldr	r3, [pc, #396]	; (8001d20 <HAL_RCC_ClockConfig+0x1b8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0b8      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d020      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bbc:	4b59      	ldr	r3, [pc, #356]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	4a58      	ldr	r2, [pc, #352]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0308 	and.w	r3, r3, #8
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bd4:	4b53      	ldr	r3, [pc, #332]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	4a52      	ldr	r2, [pc, #328]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be0:	4b50      	ldr	r3, [pc, #320]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	494d      	ldr	r1, [pc, #308]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d044      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d107      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c06:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d119      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e07f      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d003      	beq.n	8001c26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d107      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c26:	4b3f      	ldr	r3, [pc, #252]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d109      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e06f      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c36:	4b3b      	ldr	r3, [pc, #236]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e067      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c46:	4b37      	ldr	r3, [pc, #220]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f023 0203 	bic.w	r2, r3, #3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	4934      	ldr	r1, [pc, #208]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c58:	f7ff fa6a 	bl	8001130 <HAL_GetTick>
 8001c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5e:	e00a      	b.n	8001c76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c60:	f7ff fa66 	bl	8001130 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e04f      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c76:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 020c 	and.w	r2, r3, #12
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d1eb      	bne.n	8001c60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c88:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <HAL_RCC_ClockConfig+0x1b8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d20c      	bcs.n	8001cb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c96:	4b22      	ldr	r3, [pc, #136]	; (8001d20 <HAL_RCC_ClockConfig+0x1b8>)
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9e:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d001      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e032      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d008      	beq.n	8001cce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cbc:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	4916      	ldr	r1, [pc, #88]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d009      	beq.n	8001cee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	490e      	ldr	r1, [pc, #56]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cee:	f000 f821 	bl	8001d34 <HAL_RCC_GetSysClockFreq>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	490a      	ldr	r1, [pc, #40]	; (8001d28 <HAL_RCC_ClockConfig+0x1c0>)
 8001d00:	5ccb      	ldrb	r3, [r1, r3]
 8001d02:	fa22 f303 	lsr.w	r3, r2, r3
 8001d06:	4a09      	ldr	r2, [pc, #36]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f830 	bl	8000d74 <HAL_InitTick>

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023c00 	.word	0x40023c00
 8001d24:	40023800 	.word	0x40023800
 8001d28:	080094b8 	.word	0x080094b8
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	20000004 	.word	0x20000004

08001d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d38:	b094      	sub	sp, #80	; 0x50
 8001d3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8001d40:	2300      	movs	r3, #0
 8001d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d44:	2300      	movs	r3, #0
 8001d46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d4c:	4b79      	ldr	r3, [pc, #484]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 030c 	and.w	r3, r3, #12
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d00d      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0x40>
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	f200 80e1 	bhi.w	8001f20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d002      	beq.n	8001d68 <HAL_RCC_GetSysClockFreq+0x34>
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d003      	beq.n	8001d6e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d66:	e0db      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d68:	4b73      	ldr	r3, [pc, #460]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d6a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001d6c:	e0db      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d6e:	4b73      	ldr	r3, [pc, #460]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x208>)
 8001d70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d72:	e0d8      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d74:	4b6f      	ldr	r3, [pc, #444]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d7c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d7e:	4b6d      	ldr	r3, [pc, #436]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d063      	beq.n	8001e52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d8a:	4b6a      	ldr	r3, [pc, #424]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	099b      	lsrs	r3, r3, #6
 8001d90:	2200      	movs	r2, #0
 8001d92:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d9e:	2300      	movs	r3, #0
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
 8001da2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001da6:	4622      	mov	r2, r4
 8001da8:	462b      	mov	r3, r5
 8001daa:	f04f 0000 	mov.w	r0, #0
 8001dae:	f04f 0100 	mov.w	r1, #0
 8001db2:	0159      	lsls	r1, r3, #5
 8001db4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001db8:	0150      	lsls	r0, r2, #5
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4621      	mov	r1, r4
 8001dc0:	1a51      	subs	r1, r2, r1
 8001dc2:	6139      	str	r1, [r7, #16]
 8001dc4:	4629      	mov	r1, r5
 8001dc6:	eb63 0301 	sbc.w	r3, r3, r1
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001dd8:	4659      	mov	r1, fp
 8001dda:	018b      	lsls	r3, r1, #6
 8001ddc:	4651      	mov	r1, sl
 8001dde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001de2:	4651      	mov	r1, sl
 8001de4:	018a      	lsls	r2, r1, #6
 8001de6:	4651      	mov	r1, sl
 8001de8:	ebb2 0801 	subs.w	r8, r2, r1
 8001dec:	4659      	mov	r1, fp
 8001dee:	eb63 0901 	sbc.w	r9, r3, r1
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e06:	4690      	mov	r8, r2
 8001e08:	4699      	mov	r9, r3
 8001e0a:	4623      	mov	r3, r4
 8001e0c:	eb18 0303 	adds.w	r3, r8, r3
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	462b      	mov	r3, r5
 8001e14:	eb49 0303 	adc.w	r3, r9, r3
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e26:	4629      	mov	r1, r5
 8001e28:	024b      	lsls	r3, r1, #9
 8001e2a:	4621      	mov	r1, r4
 8001e2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e30:	4621      	mov	r1, r4
 8001e32:	024a      	lsls	r2, r1, #9
 8001e34:	4610      	mov	r0, r2
 8001e36:	4619      	mov	r1, r3
 8001e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e44:	f7fe fa2c 	bl	80002a0 <__aeabi_uldivmod>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e50:	e058      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e52:	4b38      	ldr	r3, [pc, #224]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	099b      	lsrs	r3, r3, #6
 8001e58:	2200      	movs	r2, #0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e62:	623b      	str	r3, [r7, #32]
 8001e64:	2300      	movs	r3, #0
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
 8001e68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e6c:	4642      	mov	r2, r8
 8001e6e:	464b      	mov	r3, r9
 8001e70:	f04f 0000 	mov.w	r0, #0
 8001e74:	f04f 0100 	mov.w	r1, #0
 8001e78:	0159      	lsls	r1, r3, #5
 8001e7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e7e:	0150      	lsls	r0, r2, #5
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4641      	mov	r1, r8
 8001e86:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e8a:	4649      	mov	r1, r9
 8001e8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	f04f 0300 	mov.w	r3, #0
 8001e98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ea0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ea4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ea8:	eb63 050b 	sbc.w	r5, r3, fp
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	00eb      	lsls	r3, r5, #3
 8001eb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eba:	00e2      	lsls	r2, r4, #3
 8001ebc:	4614      	mov	r4, r2
 8001ebe:	461d      	mov	r5, r3
 8001ec0:	4643      	mov	r3, r8
 8001ec2:	18e3      	adds	r3, r4, r3
 8001ec4:	603b      	str	r3, [r7, #0]
 8001ec6:	464b      	mov	r3, r9
 8001ec8:	eb45 0303 	adc.w	r3, r5, r3
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eda:	4629      	mov	r1, r5
 8001edc:	028b      	lsls	r3, r1, #10
 8001ede:	4621      	mov	r1, r4
 8001ee0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ee4:	4621      	mov	r1, r4
 8001ee6:	028a      	lsls	r2, r1, #10
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eee:	2200      	movs	r2, #0
 8001ef0:	61bb      	str	r3, [r7, #24]
 8001ef2:	61fa      	str	r2, [r7, #28]
 8001ef4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ef8:	f7fe f9d2 	bl	80002a0 <__aeabi_uldivmod>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4613      	mov	r3, r2
 8001f02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	0c1b      	lsrs	r3, r3, #16
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	3301      	adds	r3, #1
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001f14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f1e:	e002      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3750      	adds	r7, #80	; 0x50
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800
 8001f38:	00f42400 	.word	0x00f42400
 8001f3c:	007a1200 	.word	0x007a1200

08001f40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000000 	.word	0x20000000

08001f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f5c:	f7ff fff0 	bl	8001f40 <HAL_RCC_GetHCLKFreq>
 8001f60:	4602      	mov	r2, r0
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	0a9b      	lsrs	r3, r3, #10
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	4903      	ldr	r1, [pc, #12]	; (8001f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f6e:	5ccb      	ldrb	r3, [r1, r3]
 8001f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	080094c8 	.word	0x080094c8

08001f80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	220f      	movs	r2, #15
 8001f8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_RCC_GetClockConfig+0x5c>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 0203 	and.w	r2, r3, #3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <HAL_RCC_GetClockConfig+0x5c>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <HAL_RCC_GetClockConfig+0x5c>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <HAL_RCC_GetClockConfig+0x5c>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	08db      	lsrs	r3, r3, #3
 8001fba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <HAL_RCC_GetClockConfig+0x60>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0207 	and.w	r2, r3, #7
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	601a      	str	r2, [r3, #0]
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40023c00 	.word	0x40023c00

08001fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e041      	b.n	800207a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d106      	bne.n	8002010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f839 	bl	8002082 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2202      	movs	r2, #2
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3304      	adds	r3, #4
 8002020:	4619      	mov	r1, r3
 8002022:	4610      	mov	r0, r2
 8002024:	f000 f9c0 	bl	80023a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d001      	beq.n	80020b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e04e      	b.n	800214e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0201 	orr.w	r2, r2, #1
 80020c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a23      	ldr	r2, [pc, #140]	; (800215c <HAL_TIM_Base_Start_IT+0xc4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d022      	beq.n	8002118 <HAL_TIM_Base_Start_IT+0x80>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020da:	d01d      	beq.n	8002118 <HAL_TIM_Base_Start_IT+0x80>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a1f      	ldr	r2, [pc, #124]	; (8002160 <HAL_TIM_Base_Start_IT+0xc8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d018      	beq.n	8002118 <HAL_TIM_Base_Start_IT+0x80>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a1e      	ldr	r2, [pc, #120]	; (8002164 <HAL_TIM_Base_Start_IT+0xcc>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d013      	beq.n	8002118 <HAL_TIM_Base_Start_IT+0x80>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a1c      	ldr	r2, [pc, #112]	; (8002168 <HAL_TIM_Base_Start_IT+0xd0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d00e      	beq.n	8002118 <HAL_TIM_Base_Start_IT+0x80>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a1b      	ldr	r2, [pc, #108]	; (800216c <HAL_TIM_Base_Start_IT+0xd4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d009      	beq.n	8002118 <HAL_TIM_Base_Start_IT+0x80>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a19      	ldr	r2, [pc, #100]	; (8002170 <HAL_TIM_Base_Start_IT+0xd8>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d004      	beq.n	8002118 <HAL_TIM_Base_Start_IT+0x80>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a18      	ldr	r2, [pc, #96]	; (8002174 <HAL_TIM_Base_Start_IT+0xdc>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d111      	bne.n	800213c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b06      	cmp	r3, #6
 8002128:	d010      	beq.n	800214c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 0201 	orr.w	r2, r2, #1
 8002138:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800213a:	e007      	b.n	800214c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40010000 	.word	0x40010000
 8002160:	40000400 	.word	0x40000400
 8002164:	40000800 	.word	0x40000800
 8002168:	40000c00 	.word	0x40000c00
 800216c:	40010400 	.word	0x40010400
 8002170:	40014000 	.word	0x40014000
 8002174:	40001800 	.word	0x40001800

08002178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d020      	beq.n	80021dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d01b      	beq.n	80021dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f06f 0202 	mvn.w	r2, #2
 80021ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f8d2 	bl	800236c <HAL_TIM_IC_CaptureCallback>
 80021c8:	e005      	b.n	80021d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f8c4 	bl	8002358 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f8d5 	bl	8002380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d020      	beq.n	8002228 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d01b      	beq.n	8002228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0204 	mvn.w	r2, #4
 80021f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2202      	movs	r2, #2
 80021fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f8ac 	bl	800236c <HAL_TIM_IC_CaptureCallback>
 8002214:	e005      	b.n	8002222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f89e 	bl	8002358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f8af 	bl	8002380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d020      	beq.n	8002274 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b00      	cmp	r3, #0
 800223a:	d01b      	beq.n	8002274 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f06f 0208 	mvn.w	r2, #8
 8002244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2204      	movs	r2, #4
 800224a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f886 	bl	800236c <HAL_TIM_IC_CaptureCallback>
 8002260:	e005      	b.n	800226e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f878 	bl	8002358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f889 	bl	8002380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	2b00      	cmp	r3, #0
 800227c:	d020      	beq.n	80022c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2b00      	cmp	r3, #0
 8002286:	d01b      	beq.n	80022c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f06f 0210 	mvn.w	r2, #16
 8002290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2208      	movs	r2, #8
 8002296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f860 	bl	800236c <HAL_TIM_IC_CaptureCallback>
 80022ac:	e005      	b.n	80022ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f852 	bl	8002358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f863 	bl	8002380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00c      	beq.n	80022e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d007      	beq.n	80022e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0201 	mvn.w	r2, #1
 80022dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7fe fd04 	bl	8000cec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00c      	beq.n	8002308 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d007      	beq.n	8002308 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f906 	bl	8002514 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00c      	beq.n	800232c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002318:	2b00      	cmp	r3, #0
 800231a:	d007      	beq.n	800232c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f834 	bl	8002394 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	f003 0320 	and.w	r3, r3, #32
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00c      	beq.n	8002350 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f003 0320 	and.w	r3, r3, #32
 800233c:	2b00      	cmp	r3, #0
 800233e:	d007      	beq.n	8002350 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0220 	mvn.w	r2, #32
 8002348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f8d8 	bl	8002500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002350:	bf00      	nop
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a46      	ldr	r2, [pc, #280]	; (80024d4 <TIM_Base_SetConfig+0x12c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d013      	beq.n	80023e8 <TIM_Base_SetConfig+0x40>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c6:	d00f      	beq.n	80023e8 <TIM_Base_SetConfig+0x40>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a43      	ldr	r2, [pc, #268]	; (80024d8 <TIM_Base_SetConfig+0x130>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d00b      	beq.n	80023e8 <TIM_Base_SetConfig+0x40>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a42      	ldr	r2, [pc, #264]	; (80024dc <TIM_Base_SetConfig+0x134>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d007      	beq.n	80023e8 <TIM_Base_SetConfig+0x40>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a41      	ldr	r2, [pc, #260]	; (80024e0 <TIM_Base_SetConfig+0x138>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d003      	beq.n	80023e8 <TIM_Base_SetConfig+0x40>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a40      	ldr	r2, [pc, #256]	; (80024e4 <TIM_Base_SetConfig+0x13c>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d108      	bne.n	80023fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a35      	ldr	r2, [pc, #212]	; (80024d4 <TIM_Base_SetConfig+0x12c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d02b      	beq.n	800245a <TIM_Base_SetConfig+0xb2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002408:	d027      	beq.n	800245a <TIM_Base_SetConfig+0xb2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a32      	ldr	r2, [pc, #200]	; (80024d8 <TIM_Base_SetConfig+0x130>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d023      	beq.n	800245a <TIM_Base_SetConfig+0xb2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a31      	ldr	r2, [pc, #196]	; (80024dc <TIM_Base_SetConfig+0x134>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d01f      	beq.n	800245a <TIM_Base_SetConfig+0xb2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a30      	ldr	r2, [pc, #192]	; (80024e0 <TIM_Base_SetConfig+0x138>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d01b      	beq.n	800245a <TIM_Base_SetConfig+0xb2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a2f      	ldr	r2, [pc, #188]	; (80024e4 <TIM_Base_SetConfig+0x13c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d017      	beq.n	800245a <TIM_Base_SetConfig+0xb2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a2e      	ldr	r2, [pc, #184]	; (80024e8 <TIM_Base_SetConfig+0x140>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d013      	beq.n	800245a <TIM_Base_SetConfig+0xb2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a2d      	ldr	r2, [pc, #180]	; (80024ec <TIM_Base_SetConfig+0x144>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d00f      	beq.n	800245a <TIM_Base_SetConfig+0xb2>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a2c      	ldr	r2, [pc, #176]	; (80024f0 <TIM_Base_SetConfig+0x148>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d00b      	beq.n	800245a <TIM_Base_SetConfig+0xb2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a2b      	ldr	r2, [pc, #172]	; (80024f4 <TIM_Base_SetConfig+0x14c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d007      	beq.n	800245a <TIM_Base_SetConfig+0xb2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a2a      	ldr	r2, [pc, #168]	; (80024f8 <TIM_Base_SetConfig+0x150>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d003      	beq.n	800245a <TIM_Base_SetConfig+0xb2>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a29      	ldr	r2, [pc, #164]	; (80024fc <TIM_Base_SetConfig+0x154>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d108      	bne.n	800246c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4313      	orrs	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	4313      	orrs	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a10      	ldr	r2, [pc, #64]	; (80024d4 <TIM_Base_SetConfig+0x12c>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d003      	beq.n	80024a0 <TIM_Base_SetConfig+0xf8>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a12      	ldr	r2, [pc, #72]	; (80024e4 <TIM_Base_SetConfig+0x13c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d103      	bne.n	80024a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	691a      	ldr	r2, [r3, #16]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d105      	bne.n	80024c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f023 0201 	bic.w	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	611a      	str	r2, [r3, #16]
  }
}
 80024c6:	bf00      	nop
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40010000 	.word	0x40010000
 80024d8:	40000400 	.word	0x40000400
 80024dc:	40000800 	.word	0x40000800
 80024e0:	40000c00 	.word	0x40000c00
 80024e4:	40010400 	.word	0x40010400
 80024e8:	40014000 	.word	0x40014000
 80024ec:	40014400 	.word	0x40014400
 80024f0:	40014800 	.word	0x40014800
 80024f4:	40001800 	.word	0x40001800
 80024f8:	40001c00 	.word	0x40001c00
 80024fc:	40002000 	.word	0x40002000

08002500 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002528:	b480      	push	{r7}
 800252a:	b08b      	sub	sp, #44	; 0x2c
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa93 f3a3 	rbit	r3, r3
 8002542:	613b      	str	r3, [r7, #16]
  return result;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800254e:	2320      	movs	r3, #32
 8002550:	e003      	b.n	800255a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	2103      	movs	r1, #3
 800255e:	fa01 f303 	lsl.w	r3, r1, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	401a      	ands	r2, r3
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	fa93 f3a3 	rbit	r3, r3
 8002570:	61fb      	str	r3, [r7, #28]
  return result;
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800257c:	2320      	movs	r3, #32
 800257e:	e003      	b.n	8002588 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	fa01 f303 	lsl.w	r3, r1, r3
 8002590:	431a      	orrs	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	601a      	str	r2, [r3, #0]
}
 8002596:	bf00      	nop
 8002598:	372c      	adds	r7, #44	; 0x2c
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b085      	sub	sp, #20
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	43db      	mvns	r3, r3
 80025b6:	401a      	ands	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	fb01 f303 	mul.w	r3, r1, r3
 80025c0:	431a      	orrs	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	605a      	str	r2, [r3, #4]
}
 80025c6:	bf00      	nop
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b08b      	sub	sp, #44	; 0x2c
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	fa93 f3a3 	rbit	r3, r3
 80025ec:	613b      	str	r3, [r7, #16]
  return result;
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80025f8:	2320      	movs	r3, #32
 80025fa:	e003      	b.n	8002604 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	2103      	movs	r1, #3
 8002608:	fa01 f303 	lsl.w	r3, r1, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	401a      	ands	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	61fb      	str	r3, [r7, #28]
  return result;
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002626:	2320      	movs	r3, #32
 8002628:	e003      	b.n	8002632 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	fab3 f383 	clz	r3, r3
 8002630:	b2db      	uxtb	r3, r3
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	431a      	orrs	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002640:	bf00      	nop
 8002642:	372c      	adds	r7, #44	; 0x2c
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800264c:	b480      	push	{r7}
 800264e:	b08b      	sub	sp, #44	; 0x2c
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	68da      	ldr	r2, [r3, #12]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	613b      	str	r3, [r7, #16]
  return result;
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002672:	2320      	movs	r3, #32
 8002674:	e003      	b.n	800267e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	fab3 f383 	clz	r3, r3
 800267c:	b2db      	uxtb	r3, r3
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	2103      	movs	r1, #3
 8002682:	fa01 f303 	lsl.w	r3, r1, r3
 8002686:	43db      	mvns	r3, r3
 8002688:	401a      	ands	r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	61fb      	str	r3, [r7, #28]
  return result;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80026a0:	2320      	movs	r3, #32
 80026a2:	e003      	b.n	80026ac <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	fa01 f303 	lsl.w	r3, r1, r3
 80026b4:	431a      	orrs	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	60da      	str	r2, [r3, #12]
}
 80026ba:	bf00      	nop
 80026bc:	372c      	adds	r7, #44	; 0x2c
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b08b      	sub	sp, #44	; 0x2c
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a1a      	ldr	r2, [r3, #32]
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	613b      	str	r3, [r7, #16]
  return result;
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80026ec:	2320      	movs	r3, #32
 80026ee:	e003      	b.n	80026f8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	210f      	movs	r1, #15
 80026fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	401a      	ands	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	61fb      	str	r3, [r7, #28]
  return result;
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800271a:	2320      	movs	r3, #32
 800271c:	e003      	b.n	8002726 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	fab3 f383 	clz	r3, r3
 8002724:	b2db      	uxtb	r3, r3
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	fa01 f303 	lsl.w	r3, r1, r3
 800272e:	431a      	orrs	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002734:	bf00      	nop
 8002736:	372c      	adds	r7, #44	; 0x2c
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002740:	b480      	push	{r7}
 8002742:	b08b      	sub	sp, #44	; 0x2c
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	0a1b      	lsrs	r3, r3, #8
 8002754:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	613b      	str	r3, [r7, #16]
  return result;
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002768:	2320      	movs	r3, #32
 800276a:	e003      	b.n	8002774 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	210f      	movs	r1, #15
 8002778:	fa01 f303 	lsl.w	r3, r1, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	401a      	ands	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	0a1b      	lsrs	r3, r3, #8
 8002784:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	fa93 f3a3 	rbit	r3, r3
 800278c:	61fb      	str	r3, [r7, #28]
  return result;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002798:	2320      	movs	r3, #32
 800279a:	e003      	b.n	80027a4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	fab3 f383 	clz	r3, r3
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ac:	431a      	orrs	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80027b2:	bf00      	nop
 80027b4:	372c      	adds	r7, #44	; 0x2c
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b08a      	sub	sp, #40	; 0x28
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	fa93 f3a3 	rbit	r3, r3
 80027dc:	617b      	str	r3, [r7, #20]
  return result;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <LL_GPIO_Init+0x2e>
    return 32U;
 80027e8:	2320      	movs	r3, #32
 80027ea:	e003      	b.n	80027f4 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	fab3 f383 	clz	r3, r3
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80027f6:	e057      	b.n	80028a8 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	2101      	movs	r1, #1
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	fa01 f303 	lsl.w	r3, r1, r3
 8002804:	4013      	ands	r3, r2
 8002806:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d049      	beq.n	80028a2 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d003      	beq.n	800281e <LL_GPIO_Init+0x60>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d10d      	bne.n	800283a <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	461a      	mov	r2, r3
 8002824:	6a39      	ldr	r1, [r7, #32]
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff fed3 	bl	80025d2 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	461a      	mov	r2, r3
 8002832:	6a39      	ldr	r1, [r7, #32]
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff feb4 	bl	80025a2 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	461a      	mov	r2, r3
 8002840:	6a39      	ldr	r1, [r7, #32]
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff ff02 	bl	800264c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d121      	bne.n	8002894 <LL_GPIO_Init+0xd6>
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	60bb      	str	r3, [r7, #8]
  return result;
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <LL_GPIO_Init+0xac>
    return 32U;
 8002866:	2320      	movs	r3, #32
 8002868:	e003      	b.n	8002872 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	fab3 f383 	clz	r3, r3
 8002870:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002872:	2b07      	cmp	r3, #7
 8002874:	d807      	bhi.n	8002886 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	461a      	mov	r2, r3
 800287c:	6a39      	ldr	r1, [r7, #32]
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff ff21 	bl	80026c6 <LL_GPIO_SetAFPin_0_7>
 8002884:	e006      	b.n	8002894 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	461a      	mov	r2, r3
 800288c:	6a39      	ldr	r1, [r7, #32]
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff ff56 	bl	8002740 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	461a      	mov	r2, r3
 800289a:	6a39      	ldr	r1, [r7, #32]
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff fe43 	bl	8002528 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	3301      	adds	r3, #1
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	fa22 f303 	lsr.w	r3, r2, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1a0      	bne.n	80027f8 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3728      	adds	r7, #40	; 0x28
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80028c4:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <LL_RCC_GetSysClkSource+0x18>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 030c 	and.w	r3, r3, #12
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40023800 	.word	0x40023800

080028dc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80028e0:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <LL_RCC_GetAHBPrescaler+0x18>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40023800 	.word	0x40023800

080028f8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <LL_RCC_GetAPB1Prescaler+0x18>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40023800 	.word	0x40023800

08002914 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <LL_RCC_GetAPB2Prescaler+0x18>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002920:	4618      	mov	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800

08002930 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002934:	4b04      	ldr	r3, [pc, #16]	; (8002948 <LL_RCC_PLL_GetMainSource+0x18>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40023800 	.word	0x40023800

0800294c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002950:	4b04      	ldr	r3, [pc, #16]	; (8002964 <LL_RCC_PLL_GetN+0x18>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	099b      	lsrs	r3, r3, #6
 8002956:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800295a:	4618      	mov	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	40023800 	.word	0x40023800

08002968 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800296c:	4b04      	ldr	r3, [pc, #16]	; (8002980 <LL_RCC_PLL_GetP+0x18>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800

08002984 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <LL_RCC_PLL_GetDivider+0x18>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800

080029a0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80029a8:	f000 f820 	bl	80029ec <RCC_GetSystemClockFreq>
 80029ac:	4602      	mov	r2, r0
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 f840 	bl	8002a3c <RCC_GetHCLKClockFreq>
 80029bc:	4602      	mov	r2, r0
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 f84e 	bl	8002a68 <RCC_GetPCLK1ClockFreq>
 80029cc:	4602      	mov	r2, r0
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f85a 	bl	8002a90 <RCC_GetPCLK2ClockFreq>
 80029dc:	4602      	mov	r2, r0
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	60da      	str	r2, [r3, #12]
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80029f6:	f7ff ff63 	bl	80028c0 <LL_RCC_GetSysClkSource>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d00c      	beq.n	8002a1a <RCC_GetSystemClockFreq+0x2e>
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d80f      	bhi.n	8002a24 <RCC_GetSystemClockFreq+0x38>
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d002      	beq.n	8002a0e <RCC_GetSystemClockFreq+0x22>
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d003      	beq.n	8002a14 <RCC_GetSystemClockFreq+0x28>
 8002a0c:	e00a      	b.n	8002a24 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002a0e:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <RCC_GetSystemClockFreq+0x48>)
 8002a10:	607b      	str	r3, [r7, #4]
      break;
 8002a12:	e00a      	b.n	8002a2a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002a14:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <RCC_GetSystemClockFreq+0x4c>)
 8002a16:	607b      	str	r3, [r7, #4]
      break;
 8002a18:	e007      	b.n	8002a2a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002a1a:	2008      	movs	r0, #8
 8002a1c:	f000 f84c 	bl	8002ab8 <RCC_PLL_GetFreqDomain_SYS>
 8002a20:	6078      	str	r0, [r7, #4]
      break;
 8002a22:	e002      	b.n	8002a2a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002a24:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <RCC_GetSystemClockFreq+0x48>)
 8002a26:	607b      	str	r3, [r7, #4]
      break;
 8002a28:	bf00      	nop
  }

  return frequency;
 8002a2a:	687b      	ldr	r3, [r7, #4]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	00f42400 	.word	0x00f42400
 8002a38:	007a1200 	.word	0x007a1200

08002a3c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002a44:	f7ff ff4a 	bl	80028dc <LL_RCC_GetAHBPrescaler>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	091b      	lsrs	r3, r3, #4
 8002a4c:	f003 030f 	and.w	r3, r3, #15
 8002a50:	4a04      	ldr	r2, [pc, #16]	; (8002a64 <RCC_GetHCLKClockFreq+0x28>)
 8002a52:	5cd3      	ldrb	r3, [r2, r3]
 8002a54:	461a      	mov	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	40d3      	lsrs	r3, r2
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	080094b8 	.word	0x080094b8

08002a68 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002a70:	f7ff ff42 	bl	80028f8 <LL_RCC_GetAPB1Prescaler>
 8002a74:	4603      	mov	r3, r0
 8002a76:	0a9b      	lsrs	r3, r3, #10
 8002a78:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <RCC_GetPCLK1ClockFreq+0x24>)
 8002a7a:	5cd3      	ldrb	r3, [r2, r3]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	40d3      	lsrs	r3, r2
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	080094c8 	.word	0x080094c8

08002a90 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002a98:	f7ff ff3c 	bl	8002914 <LL_RCC_GetAPB2Prescaler>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	0b5b      	lsrs	r3, r3, #13
 8002aa0:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <RCC_GetPCLK2ClockFreq+0x24>)
 8002aa2:	5cd3      	ldrb	r3, [r2, r3]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	40d3      	lsrs	r3, r2
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	080094c8 	.word	0x080094c8

08002ab8 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	2300      	movs	r3, #0
 8002aca:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002acc:	f7ff ff30 	bl	8002930 <LL_RCC_PLL_GetMainSource>
 8002ad0:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d004      	beq.n	8002ae2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ade:	d003      	beq.n	8002ae8 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002ae0:	e005      	b.n	8002aee <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002ae2:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002ae4:	617b      	str	r3, [r7, #20]
      break;
 8002ae6:	e005      	b.n	8002af4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002ae8:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002aea:	617b      	str	r3, [r7, #20]
      break;
 8002aec:	e002      	b.n	8002af4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002aee:	4b0f      	ldr	r3, [pc, #60]	; (8002b2c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002af0:	617b      	str	r3, [r7, #20]
      break;
 8002af2:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d113      	bne.n	8002b22 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002afa:	f7ff ff43 	bl	8002984 <LL_RCC_PLL_GetDivider>
 8002afe:	4602      	mov	r2, r0
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	fbb3 f4f2 	udiv	r4, r3, r2
 8002b06:	f7ff ff21 	bl	800294c <LL_RCC_PLL_GetN>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	fb03 f404 	mul.w	r4, r3, r4
 8002b10:	f7ff ff2a 	bl	8002968 <LL_RCC_PLL_GetP>
 8002b14:	4603      	mov	r3, r0
 8002b16:	0c1b      	lsrs	r3, r3, #16
 8002b18:	3301      	adds	r3, #1
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002b20:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002b22:	693b      	ldr	r3, [r7, #16]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd90      	pop	{r4, r7, pc}
 8002b2c:	00f42400 	.word	0x00f42400
 8002b30:	007a1200 	.word	0x007a1200

08002b34 <LL_USART_IsEnabled>:
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b48:	bf0c      	ite	eq
 8002b4a:	2301      	moveq	r3, #1
 8002b4c:	2300      	movne	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <LL_USART_SetStopBitsLength>:
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	611a      	str	r2, [r3, #16]
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <LL_USART_SetHWFlowCtrl>:
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	615a      	str	r2, [r3, #20]
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_USART_SetBaudRate>:
{
 8002ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bac:	b0c0      	sub	sp, #256	; 0x100
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002bb4:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8002bb8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002bbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc8:	f040 810c 	bne.w	8002de4 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002bcc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002bd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002bda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002bde:	4622      	mov	r2, r4
 8002be0:	462b      	mov	r3, r5
 8002be2:	1891      	adds	r1, r2, r2
 8002be4:	6639      	str	r1, [r7, #96]	; 0x60
 8002be6:	415b      	adcs	r3, r3
 8002be8:	667b      	str	r3, [r7, #100]	; 0x64
 8002bea:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002bee:	4621      	mov	r1, r4
 8002bf0:	eb12 0801 	adds.w	r8, r2, r1
 8002bf4:	4629      	mov	r1, r5
 8002bf6:	eb43 0901 	adc.w	r9, r3, r1
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c0e:	4690      	mov	r8, r2
 8002c10:	4699      	mov	r9, r3
 8002c12:	4623      	mov	r3, r4
 8002c14:	eb18 0303 	adds.w	r3, r8, r3
 8002c18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c1c:	462b      	mov	r3, r5
 8002c1e:	eb49 0303 	adc.w	r3, r9, r3
 8002c22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	469a      	mov	sl, r3
 8002c2e:	4693      	mov	fp, r2
 8002c30:	eb1a 030a 	adds.w	r3, sl, sl
 8002c34:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c36:	eb4b 030b 	adc.w	r3, fp, fp
 8002c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c3c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c44:	f7fd fb2c 	bl	80002a0 <__aeabi_uldivmod>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4b64      	ldr	r3, [pc, #400]	; (8002de0 <LL_USART_SetBaudRate+0x238>)
 8002c4e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	b29c      	uxth	r4, r3
 8002c5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c64:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c68:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8002c6c:	4642      	mov	r2, r8
 8002c6e:	464b      	mov	r3, r9
 8002c70:	1891      	adds	r1, r2, r2
 8002c72:	6539      	str	r1, [r7, #80]	; 0x50
 8002c74:	415b      	adcs	r3, r3
 8002c76:	657b      	str	r3, [r7, #84]	; 0x54
 8002c78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c7c:	4641      	mov	r1, r8
 8002c7e:	1851      	adds	r1, r2, r1
 8002c80:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c82:	4649      	mov	r1, r9
 8002c84:	414b      	adcs	r3, r1
 8002c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c88:	f04f 0200 	mov.w	r2, #0
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8002c94:	4659      	mov	r1, fp
 8002c96:	00cb      	lsls	r3, r1, #3
 8002c98:	4651      	mov	r1, sl
 8002c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c9e:	4651      	mov	r1, sl
 8002ca0:	00ca      	lsls	r2, r1, #3
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	4642      	mov	r2, r8
 8002caa:	189b      	adds	r3, r3, r2
 8002cac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cb0:	464b      	mov	r3, r9
 8002cb2:	460a      	mov	r2, r1
 8002cb4:	eb42 0303 	adc.w	r3, r2, r3
 8002cb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002cbc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cc6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8002cca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002cce:	460b      	mov	r3, r1
 8002cd0:	18db      	adds	r3, r3, r3
 8002cd2:	643b      	str	r3, [r7, #64]	; 0x40
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	eb42 0303 	adc.w	r3, r2, r3
 8002cda:	647b      	str	r3, [r7, #68]	; 0x44
 8002cdc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ce0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002ce4:	f7fd fadc 	bl	80002a0 <__aeabi_uldivmod>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4611      	mov	r1, r2
 8002cee:	4b3c      	ldr	r3, [pc, #240]	; (8002de0 <LL_USART_SetBaudRate+0x238>)
 8002cf0:	fba3 2301 	umull	r2, r3, r3, r1
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	2264      	movs	r2, #100	; 0x64
 8002cf8:	fb02 f303 	mul.w	r3, r2, r3
 8002cfc:	1acb      	subs	r3, r1, r3
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d04:	4b36      	ldr	r3, [pc, #216]	; (8002de0 <LL_USART_SetBaudRate+0x238>)
 8002d06:	fba3 2302 	umull	r2, r3, r3, r2
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	4423      	add	r3, r4
 8002d1a:	b29c      	uxth	r4, r3
 8002d1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d20:	2200      	movs	r2, #0
 8002d22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d26:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d2a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8002d2e:	4642      	mov	r2, r8
 8002d30:	464b      	mov	r3, r9
 8002d32:	1891      	adds	r1, r2, r2
 8002d34:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d36:	415b      	adcs	r3, r3
 8002d38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d3a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d3e:	4641      	mov	r1, r8
 8002d40:	1851      	adds	r1, r2, r1
 8002d42:	6339      	str	r1, [r7, #48]	; 0x30
 8002d44:	4649      	mov	r1, r9
 8002d46:	414b      	adcs	r3, r1
 8002d48:	637b      	str	r3, [r7, #52]	; 0x34
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d56:	4659      	mov	r1, fp
 8002d58:	00cb      	lsls	r3, r1, #3
 8002d5a:	4651      	mov	r1, sl
 8002d5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d60:	4651      	mov	r1, sl
 8002d62:	00ca      	lsls	r2, r1, #3
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	4603      	mov	r3, r0
 8002d6a:	4642      	mov	r2, r8
 8002d6c:	189b      	adds	r3, r3, r2
 8002d6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d72:	464b      	mov	r3, r9
 8002d74:	460a      	mov	r2, r1
 8002d76:	eb42 0303 	adc.w	r3, r2, r3
 8002d7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002d7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002d82:	2200      	movs	r2, #0
 8002d84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d88:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002d8c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002d90:	460b      	mov	r3, r1
 8002d92:	18db      	adds	r3, r3, r3
 8002d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d96:	4613      	mov	r3, r2
 8002d98:	eb42 0303 	adc.w	r3, r2, r3
 8002d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002da2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002da6:	f7fd fa7b 	bl	80002a0 <__aeabi_uldivmod>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <LL_USART_SetBaudRate+0x238>)
 8002db0:	fba3 1302 	umull	r1, r3, r3, r2
 8002db4:	095b      	lsrs	r3, r3, #5
 8002db6:	2164      	movs	r1, #100	; 0x64
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	3332      	adds	r3, #50	; 0x32
 8002dc2:	4a07      	ldr	r2, [pc, #28]	; (8002de0 <LL_USART_SetBaudRate+0x238>)
 8002dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc8:	095b      	lsrs	r3, r3, #5
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	4423      	add	r3, r4
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ddc:	609a      	str	r2, [r3, #8]
}
 8002dde:	e108      	b.n	8002ff2 <LL_USART_SetBaudRate+0x44a>
 8002de0:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002de4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002de8:	2200      	movs	r2, #0
 8002dea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002dee:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002df2:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8002df6:	4642      	mov	r2, r8
 8002df8:	464b      	mov	r3, r9
 8002dfa:	1891      	adds	r1, r2, r2
 8002dfc:	6239      	str	r1, [r7, #32]
 8002dfe:	415b      	adcs	r3, r3
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
 8002e02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e06:	4641      	mov	r1, r8
 8002e08:	1854      	adds	r4, r2, r1
 8002e0a:	4649      	mov	r1, r9
 8002e0c:	eb43 0501 	adc.w	r5, r3, r1
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	00eb      	lsls	r3, r5, #3
 8002e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e1e:	00e2      	lsls	r2, r4, #3
 8002e20:	4614      	mov	r4, r2
 8002e22:	461d      	mov	r5, r3
 8002e24:	4643      	mov	r3, r8
 8002e26:	18e3      	adds	r3, r4, r3
 8002e28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e2c:	464b      	mov	r3, r9
 8002e2e:	eb45 0303 	adc.w	r3, r5, r3
 8002e32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002e36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e40:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8002e50:	4629      	mov	r1, r5
 8002e52:	008b      	lsls	r3, r1, #2
 8002e54:	4621      	mov	r1, r4
 8002e56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	008a      	lsls	r2, r1, #2
 8002e5e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002e62:	f7fd fa1d 	bl	80002a0 <__aeabi_uldivmod>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4b65      	ldr	r3, [pc, #404]	; (8003000 <LL_USART_SetBaudRate+0x458>)
 8002e6c:	fba3 2302 	umull	r2, r3, r3, r2
 8002e70:	095b      	lsrs	r3, r3, #5
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	b29c      	uxth	r4, r3
 8002e78:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e86:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8002e8a:	4642      	mov	r2, r8
 8002e8c:	464b      	mov	r3, r9
 8002e8e:	1891      	adds	r1, r2, r2
 8002e90:	61b9      	str	r1, [r7, #24]
 8002e92:	415b      	adcs	r3, r3
 8002e94:	61fb      	str	r3, [r7, #28]
 8002e96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e9a:	4641      	mov	r1, r8
 8002e9c:	1851      	adds	r1, r2, r1
 8002e9e:	6139      	str	r1, [r7, #16]
 8002ea0:	4649      	mov	r1, r9
 8002ea2:	414b      	adcs	r3, r1
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	f04f 0300 	mov.w	r3, #0
 8002eae:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002eb2:	4659      	mov	r1, fp
 8002eb4:	00cb      	lsls	r3, r1, #3
 8002eb6:	4651      	mov	r1, sl
 8002eb8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ebc:	4651      	mov	r1, sl
 8002ebe:	00ca      	lsls	r2, r1, #3
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4642      	mov	r2, r8
 8002ec8:	189b      	adds	r3, r3, r2
 8002eca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ece:	464b      	mov	r3, r9
 8002ed0:	460a      	mov	r2, r1
 8002ed2:	eb42 0303 	adc.w	r3, r2, r3
 8002ed6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002eda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ee4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8002ef4:	4649      	mov	r1, r9
 8002ef6:	008b      	lsls	r3, r1, #2
 8002ef8:	4641      	mov	r1, r8
 8002efa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002efe:	4641      	mov	r1, r8
 8002f00:	008a      	lsls	r2, r1, #2
 8002f02:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002f06:	f7fd f9cb 	bl	80002a0 <__aeabi_uldivmod>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4b3b      	ldr	r3, [pc, #236]	; (8003000 <LL_USART_SetBaudRate+0x458>)
 8002f12:	fba3 2301 	umull	r2, r3, r3, r1
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	2264      	movs	r2, #100	; 0x64
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	1acb      	subs	r3, r1, r3
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	3332      	adds	r3, #50	; 0x32
 8002f24:	4a36      	ldr	r2, [pc, #216]	; (8003000 <LL_USART_SetBaudRate+0x458>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	4423      	add	r3, r4
 8002f36:	b29c      	uxth	r4, r3
 8002f38:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f40:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f42:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f46:	4642      	mov	r2, r8
 8002f48:	464b      	mov	r3, r9
 8002f4a:	1891      	adds	r1, r2, r2
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	415b      	adcs	r3, r3
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f56:	4641      	mov	r1, r8
 8002f58:	1851      	adds	r1, r2, r1
 8002f5a:	6039      	str	r1, [r7, #0]
 8002f5c:	4649      	mov	r1, r9
 8002f5e:	414b      	adcs	r3, r1
 8002f60:	607b      	str	r3, [r7, #4]
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	f04f 0300 	mov.w	r3, #0
 8002f6a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f6e:	4659      	mov	r1, fp
 8002f70:	00cb      	lsls	r3, r1, #3
 8002f72:	4651      	mov	r1, sl
 8002f74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f78:	4651      	mov	r1, sl
 8002f7a:	00ca      	lsls	r2, r1, #3
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4603      	mov	r3, r0
 8002f82:	4642      	mov	r2, r8
 8002f84:	189b      	adds	r3, r3, r2
 8002f86:	673b      	str	r3, [r7, #112]	; 0x70
 8002f88:	464b      	mov	r3, r9
 8002f8a:	460a      	mov	r2, r1
 8002f8c:	eb42 0303 	adc.w	r3, r2, r3
 8002f90:	677b      	str	r3, [r7, #116]	; 0x74
 8002f92:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002f96:	2200      	movs	r2, #0
 8002f98:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8002fa8:	4649      	mov	r1, r9
 8002faa:	008b      	lsls	r3, r1, #2
 8002fac:	4641      	mov	r1, r8
 8002fae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fb2:	4641      	mov	r1, r8
 8002fb4:	008a      	lsls	r2, r1, #2
 8002fb6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002fba:	f7fd f971 	bl	80002a0 <__aeabi_uldivmod>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <LL_USART_SetBaudRate+0x458>)
 8002fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc8:	095b      	lsrs	r3, r3, #5
 8002fca:	2164      	movs	r1, #100	; 0x64
 8002fcc:	fb01 f303 	mul.w	r3, r1, r3
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	3332      	adds	r3, #50	; 0x32
 8002fd6:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <LL_USART_SetBaudRate+0x458>)
 8002fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fdc:	095b      	lsrs	r3, r3, #5
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	f003 030f 	and.w	r3, r3, #15
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	4423      	add	r3, r4
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	461a      	mov	r2, r3
 8002fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ff0:	609a      	str	r2, [r3, #8]
}
 8002ff2:	bf00      	nop
 8002ff4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ffe:	bf00      	nop
 8003000:	51eb851f 	.word	0x51eb851f

08003004 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003012:	2300      	movs	r3, #0
 8003014:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff fd8c 	bl	8002b34 <LL_USART_IsEnabled>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d15e      	bne.n	80030e0 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800302a:	f023 030c 	bic.w	r3, r3, #12
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	6851      	ldr	r1, [r2, #4]
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	68d2      	ldr	r2, [r2, #12]
 8003036:	4311      	orrs	r1, r2
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	6912      	ldr	r2, [r2, #16]
 800303c:	4311      	orrs	r1, r2
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	6992      	ldr	r2, [r2, #24]
 8003042:	430a      	orrs	r2, r1
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	4619      	mov	r1, r3
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff fd83 	bl	8002b5c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	4619      	mov	r1, r3
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff fd90 	bl	8002b82 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003062:	f107 0308 	add.w	r3, r7, #8
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff fc9a 	bl	80029a0 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a1f      	ldr	r2, [pc, #124]	; (80030ec <LL_USART_Init+0xe8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d102      	bne.n	800307a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	61bb      	str	r3, [r7, #24]
 8003078:	e021      	b.n	80030be <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a1c      	ldr	r2, [pc, #112]	; (80030f0 <LL_USART_Init+0xec>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d102      	bne.n	8003088 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	e01a      	b.n	80030be <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a1a      	ldr	r2, [pc, #104]	; (80030f4 <LL_USART_Init+0xf0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d102      	bne.n	8003096 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	61bb      	str	r3, [r7, #24]
 8003094:	e013      	b.n	80030be <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a17      	ldr	r2, [pc, #92]	; (80030f8 <LL_USART_Init+0xf4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d102      	bne.n	80030a4 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	e00c      	b.n	80030be <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a15      	ldr	r2, [pc, #84]	; (80030fc <LL_USART_Init+0xf8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d102      	bne.n	80030b2 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	61bb      	str	r3, [r7, #24]
 80030b0:	e005      	b.n	80030be <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a12      	ldr	r2, [pc, #72]	; (8003100 <LL_USART_Init+0xfc>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d101      	bne.n	80030be <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00d      	beq.n	80030e0 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d009      	beq.n	80030e0 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80030cc:	2300      	movs	r3, #0
 80030ce:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80030d8:	69b9      	ldr	r1, [r7, #24]
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff fd64 	bl	8002ba8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80030e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3720      	adds	r7, #32
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40011000 	.word	0x40011000
 80030f0:	40004400 	.word	0x40004400
 80030f4:	40004800 	.word	0x40004800
 80030f8:	40011400 	.word	0x40011400
 80030fc:	40004c00 	.word	0x40004c00
 8003100:	40005000 	.word	0x40005000

08003104 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b20      	cmp	r3, #32
 8003116:	bf0c      	ite	eq
 8003118:	2301      	moveq	r3, #1
 800311a:	2300      	movne	r3, #0
 800311c:	b2db      	uxtb	r3, r3
}
 800311e:	4618      	mov	r0, r3
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313a:	2b40      	cmp	r3, #64	; 0x40
 800313c:	bf0c      	ite	eq
 800313e:	2301      	moveq	r3, #1
 8003140:	2300      	movne	r3, #0
 8003142:	b2db      	uxtb	r3, r3
}
 8003144:	4618      	mov	r0, r3
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003160:	2b80      	cmp	r3, #128	; 0x80
 8003162:	bf0c      	ite	eq
 8003164:	2301      	moveq	r3, #1
 8003166:	2300      	movne	r3, #0
 8003168:	b2db      	uxtb	r3, r3
}
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8003176:	b480      	push	{r7}
 8003178:	b089      	sub	sp, #36	; 0x24
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	330c      	adds	r3, #12
 8003182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	e853 3f00 	ldrex	r3, [r3]
 800318a:	60bb      	str	r3, [r7, #8]
   return(result);
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f043 0320 	orr.w	r3, r3, #32
 8003192:	61fb      	str	r3, [r7, #28]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	330c      	adds	r3, #12
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	61ba      	str	r2, [r7, #24]
 800319c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319e:	6979      	ldr	r1, [r7, #20]
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	e841 2300 	strex	r3, r2, [r1]
 80031a6:	613b      	str	r3, [r7, #16]
   return(result);
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1e7      	bne.n	800317e <LL_USART_EnableIT_RXNE+0x8>
}
 80031ae:	bf00      	nop
 80031b0:	bf00      	nop
 80031b2:	3724      	adds	r7, #36	; 0x24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	b2db      	uxtb	r3, r3
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	460b      	mov	r3, r1
 80031e0:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	605a      	str	r2, [r3, #4]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <atc_alloc>:
#else
#define	atc_printf(...)     {};
#endif
//####################################################################################################
void* atc_alloc(size_t size)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
#if (_ATC_RTOS == 0)
  return malloc(size);
#else
  return pvPortMalloc(size);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f003 f9ab 	bl	8006558 <pvPortMalloc>
 8003202:	4603      	mov	r3, r0
#endif
}
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <atc_free>:
//####################################################################################################
void atc_free(void *ptr)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
#if (_ATC_RTOS == 0)
    free(ptr);
#else
    vPortFree(ptr);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f003 fa6b 	bl	80066f0 <vPortFree>
#endif
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <atc_init>:
//####################################################################################################
void atc_init(atc_t *atc, const char *name, USART_TypeDef *USARTx, void (*found)(char*))
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b084      	sub	sp, #16
 8003226:	af00      	add	r7, sp, #0
 8003228:	60f8      	str	r0, [r7, #12]
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	607a      	str	r2, [r7, #4]
 800322e:	603b      	str	r3, [r7, #0]
  if (atc->inited == true)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d11f      	bne.n	8003278 <atc_init+0x56>
    return;
  memset(atc, 0, sizeof(atc_t));
 8003238:	f44f 62c7 	mov.w	r2, #1592	; 0x638
 800323c:	2100      	movs	r1, #0
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f003 ff10 	bl	8007064 <memset>
  strncpy(atc->name, name, sizeof(atc->name) - 1);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f203 6325 	addw	r3, r3, #1573	; 0x625
 800324a:	2207      	movs	r2, #7
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	4618      	mov	r0, r3
 8003250:	f003 ff1d 	bl	800708e <strncpy>
  atc->usart = USARTx;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
  atc->found = found;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	f8c3 2634 	str.w	r2, [r3, #1588]	; 0x634
  LL_USART_EnableIT_RXNE(atc->usart);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f8d3 3630 	ldr.w	r3, [r3, #1584]	; 0x630
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff ff83 	bl	8003176 <LL_USART_EnableIT_RXNE>
  atc->inited = true;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	701a      	strb	r2, [r3, #0]
 8003276:	e000      	b.n	800327a <atc_init+0x58>
    return;
 8003278:	bf00      	nop
  atc_printf("\r\n[%s] inited.\r\n", atc->name);
}
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <atc_lock>:
//####################################################################################################
bool atc_lock(atc_t *atc, uint32_t wait_ms)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  if (atc->lock == false)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 362d 	ldrb.w	r3, [r3, #1581]	; 0x62d
 8003290:	f083 0301 	eor.w	r3, r3, #1
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d005      	beq.n	80032a6 <atc_lock+0x26>
  {
    atc->lock = true;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 262d 	strb.w	r2, [r3, #1581]	; 0x62d
    return true;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e01d      	b.n	80032e2 <atc_lock+0x62>
  }
  uint32_t start = HAL_GetTick();
 80032a6:	f7fd ff43 	bl	8001130 <HAL_GetTick>
 80032aa:	60f8      	str	r0, [r7, #12]
  while (HAL_GetTick() - start < wait_ms)
 80032ac:	e010      	b.n	80032d0 <atc_lock+0x50>
  {
    atc_delay(1);
 80032ae:	2001      	movs	r0, #1
 80032b0:	f002 f957 	bl	8005562 <osDelay>
    if (atc->lock == 0)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 362d 	ldrb.w	r3, [r3, #1581]	; 0x62d
 80032ba:	f083 0301 	eor.w	r3, r3, #1
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d005      	beq.n	80032d0 <atc_lock+0x50>
    {
      atc->lock = true;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 262d 	strb.w	r2, [r3, #1581]	; 0x62d
      return true;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e008      	b.n	80032e2 <atc_lock+0x62>
  while (HAL_GetTick() - start < wait_ms)
 80032d0:	f7fd ff2e 	bl	8001130 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d8e6      	bhi.n	80032ae <atc_lock+0x2e>
    }
  }
  return false;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <atc_unlock>:
//####################################################################################################
void atc_unlock(atc_t *atc)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  atc->lock = false;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 262d 	strb.w	r2, [r3, #1581]	; 0x62d
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <atc_transmit>:
//####################################################################################################
void atc_transmit(atc_t *atc, uint8_t *data, uint16_t len)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b086      	sub	sp, #24
 800330a:	af00      	add	r7, sp, #0
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	4613      	mov	r3, r2
 8003312:	80fb      	strh	r3, [r7, #6]
  for (uint16_t i = 0; i < len; i++)
 8003314:	2300      	movs	r3, #0
 8003316:	82fb      	strh	r3, [r7, #22]
 8003318:	e018      	b.n	800334c <atc_transmit+0x46>
  {
    while (!LL_USART_IsActiveFlag_TXE(atc->usart))
      atc_delay(1);
 800331a:	2001      	movs	r0, #1
 800331c:	f002 f921 	bl	8005562 <osDelay>
    while (!LL_USART_IsActiveFlag_TXE(atc->usart))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f8d3 3630 	ldr.w	r3, [r3, #1584]	; 0x630
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff ff12 	bl	8003150 <LL_USART_IsActiveFlag_TXE>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f3      	beq.n	800331a <atc_transmit+0x14>
    LL_USART_TransmitData8(atc->usart, data[i]);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f8d3 0630 	ldr.w	r0, [r3, #1584]	; 0x630
 8003338:	8afb      	ldrh	r3, [r7, #22]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	4413      	add	r3, r2
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	4619      	mov	r1, r3
 8003342:	f7ff ff48 	bl	80031d6 <LL_USART_TransmitData8>
  for (uint16_t i = 0; i < len; i++)
 8003346:	8afb      	ldrh	r3, [r7, #22]
 8003348:	3301      	adds	r3, #1
 800334a:	82fb      	strh	r3, [r7, #22]
 800334c:	8afa      	ldrh	r2, [r7, #22]
 800334e:	88fb      	ldrh	r3, [r7, #6]
 8003350:	429a      	cmp	r2, r3
 8003352:	d3e5      	bcc.n	8003320 <atc_transmit+0x1a>
  }
  while (!LL_USART_IsActiveFlag_TC(atc->usart))
 8003354:	e002      	b.n	800335c <atc_transmit+0x56>
    atc_delay(1);
 8003356:	2001      	movs	r0, #1
 8003358:	f002 f903 	bl	8005562 <osDelay>
  while (!LL_USART_IsActiveFlag_TC(atc->usart))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f8d3 3630 	ldr.w	r3, [r3, #1584]	; 0x630
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff fee1 	bl	800312a <LL_USART_IsActiveFlag_TC>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f3      	beq.n	8003356 <atc_transmit+0x50>
}
 800336e:	bf00      	nop
 8003370:	bf00      	nop
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <atc_rxCallback>:
//####################################################################################################
void atc_rxCallback(atc_t *atc)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  if (LL_USART_IsActiveFlag_RXNE(atc->usart))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8d3 3630 	ldr.w	r3, [r3, #1584]	; 0x630
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff febc 	bl	8003104 <LL_USART_IsActiveFlag_RXNE>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d025      	beq.n	80033de <atc_rxCallback+0x66>
  {
    uint8_t tmp = LL_USART_ReceiveData8(atc->usart);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f8d3 3630 	ldr.w	r3, [r3, #1584]	; 0x630
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff ff0f 	bl	80031bc <LL_USART_ReceiveData8>
 800339e:	4603      	mov	r3, r0
 80033a0:	73fb      	strb	r3, [r7, #15]
    if (atc->rxIndex < _ATC_RXSIZE - 1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8b3 35de 	ldrh.w	r3, [r3, #1502]	; 0x5de
 80033a8:	f240 52da 	movw	r2, #1498	; 0x5da
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d80f      	bhi.n	80033d0 <atc_rxCallback+0x58>
    {
      atc->rxBuffer[atc->rxIndex] = tmp;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8b3 35de 	ldrh.w	r3, [r3, #1502]	; 0x5de
 80033b6:	461a      	mov	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4413      	add	r3, r2
 80033bc:	7bfa      	ldrb	r2, [r7, #15]
 80033be:	705a      	strb	r2, [r3, #1]
      atc->rxIndex++;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f8b3 35de 	ldrh.w	r3, [r3, #1502]	; 0x5de
 80033c6:	3301      	adds	r3, #1
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f8a3 25de 	strh.w	r2, [r3, #1502]	; 0x5de
    }
    atc->rxTime = HAL_GetTick();
 80033d0:	f7fd feae 	bl	8001130 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f8c3 25e0 	str.w	r2, [r3, #1504]	; 0x5e0
    return;
 80033dc:	bf00      	nop
//    LL_USART_ClearFlag_FE(atc->usart);
//  if (LL_USART_IsActiveFlag_ORE(atc->usart))
//    LL_USART_ClearFlag_ORE(atc->usart);
//  if (LL_USART_IsActiveFlag_NE(atc->usart))
//    LL_USART_ClearFlag_NE(atc->usart);
}
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <atc_search>:
//####################################################################################################
void atc_search(atc_t *atc)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  for (uint8_t search = 0; search < _ATC_SEARCH_MAX; search++)
 80033ec:	2300      	movs	r3, #0
 80033ee:	73fb      	strb	r3, [r7, #15]
 80033f0:	e025      	b.n	800343e <atc_search+0x5a>
  {
    if (atc->search[search] == NULL)
 80033f2:	7bfa      	ldrb	r2, [r7, #15]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f502 72bd 	add.w	r2, r2, #378	; 0x17a
 80033fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d019      	beq.n	8003436 <atc_search+0x52>
      continue;
    char *str = strstr((char*) atc->rxBuffer, atc->search[search]);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	1c58      	adds	r0, r3, #1
 8003406:	7bfa      	ldrb	r2, [r7, #15]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f502 72bd 	add.w	r2, r2, #378	; 0x17a
 800340e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003412:	4619      	mov	r1, r3
 8003414:	f003 feaa 	bl	800716c <strstr>
 8003418:	60b8      	str	r0, [r7, #8]
    if (str != NULL)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00b      	beq.n	8003438 <atc_search+0x54>
    {
      if (atc->found != NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8d3 3634 	ldr.w	r3, [r3, #1588]	; 0x634
 8003426:	2b00      	cmp	r3, #0
 8003428:	d006      	beq.n	8003438 <atc_search+0x54>
        atc->found(str);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8d3 3634 	ldr.w	r3, [r3, #1588]	; 0x634
 8003430:	68b8      	ldr	r0, [r7, #8]
 8003432:	4798      	blx	r3
 8003434:	e000      	b.n	8003438 <atc_search+0x54>
      continue;
 8003436:	bf00      	nop
  for (uint8_t search = 0; search < _ATC_SEARCH_MAX; search++)
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	3301      	adds	r3, #1
 800343c:	73fb      	strb	r3, [r7, #15]
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	2b09      	cmp	r3, #9
 8003442:	d9d6      	bls.n	80033f2 <atc_search+0xe>
    }
  }
}
 8003444:	bf00      	nop
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <atc_searchAnswer>:
//####################################################################################################
char* atc_searchAnswer(atc_t *atc, uint8_t items, uint8_t *foundIndex)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b086      	sub	sp, #24
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	460b      	mov	r3, r1
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	72fb      	strb	r3, [r7, #11]
  *foundIndex = 0;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	701a      	strb	r2, [r3, #0]
  for (uint8_t search = 0; search < items; search++)
 8003462:	2300      	movs	r3, #0
 8003464:	75fb      	strb	r3, [r7, #23]
 8003466:	e023      	b.n	80034b0 <atc_searchAnswer+0x62>
  {
    if (search == _ATC_SEARCH_CMD_MAX)
 8003468:	7dfb      	ldrb	r3, [r7, #23]
 800346a:	2b05      	cmp	r3, #5
 800346c:	d025      	beq.n	80034ba <atc_searchAnswer+0x6c>
    {
      atc_printf("[%s] Error: Search command limit reached", atc->name);
      break;
    }
    if (atc->searchCmd[search] == NULL)
 800346e:	7dfa      	ldrb	r2, [r7, #23]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f502 72c2 	add.w	r2, r2, #388	; 0x184
 8003476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d01f      	beq.n	80034be <atc_searchAnswer+0x70>
      break;
    char *str = strstr((char*) atc->rxBuffer, atc->searchCmd[search]);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	1c58      	adds	r0, r3, #1
 8003482:	7dfa      	ldrb	r2, [r7, #23]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f502 72c2 	add.w	r2, r2, #388	; 0x184
 800348a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800348e:	4619      	mov	r1, r3
 8003490:	f003 fe6c 	bl	800716c <strstr>
 8003494:	6138      	str	r0, [r7, #16]
    if (str != NULL)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d006      	beq.n	80034aa <atc_searchAnswer+0x5c>
    {
      *foundIndex = search + 1;
 800349c:	7dfb      	ldrb	r3, [r7, #23]
 800349e:	3301      	adds	r3, #1
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	701a      	strb	r2, [r3, #0]
      return str;
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	e00b      	b.n	80034c2 <atc_searchAnswer+0x74>
  for (uint8_t search = 0; search < items; search++)
 80034aa:	7dfb      	ldrb	r3, [r7, #23]
 80034ac:	3301      	adds	r3, #1
 80034ae:	75fb      	strb	r3, [r7, #23]
 80034b0:	7dfa      	ldrb	r2, [r7, #23]
 80034b2:	7afb      	ldrb	r3, [r7, #11]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d3d7      	bcc.n	8003468 <atc_searchAnswer+0x1a>
 80034b8:	e002      	b.n	80034c0 <atc_searchAnswer+0x72>
      break;
 80034ba:	bf00      	nop
 80034bc:	e000      	b.n	80034c0 <atc_searchAnswer+0x72>
      break;
 80034be:	bf00      	nop
    }
  }
  return NULL;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <atc_empty>:
//####################################################################################################
void atc_empty(atc_t *atc)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  memset(atc->rxBuffer, 0, _ATC_RXSIZE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3301      	adds	r3, #1
 80034d6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80034da:	2100      	movs	r1, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	f003 fdc1 	bl	8007064 <memset>
  atc->rxIndex = 0;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f8a3 25de 	strh.w	r2, [r3, #1502]	; 0x5de
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <atc_available>:
//####################################################################################################
bool atc_available(atc_t *atc)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  if ((atc->rxIndex > 0) && (HAL_GetTick() - atc->rxTime) > _ATC_RXTIMEOUT_MS)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f8b3 35de 	ldrh.w	r3, [r3, #1502]	; 0x5de
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <atc_available+0x28>
 8003504:	f7fd fe14 	bl	8001130 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b32      	cmp	r3, #50	; 0x32
 8003514:	d901      	bls.n	800351a <atc_available+0x28>
    return true;
 8003516:	2301      	movs	r3, #1
 8003518:	e000      	b.n	800351c <atc_available+0x2a>
  return false;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <atc_addSearch>:
//####################################################################################################
bool atc_addSearch(atc_t *atc, const char *str)
{
 8003524:	b590      	push	{r4, r7, lr}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  if (atc->searchIndex == _ATC_SEARCH_MAX)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3624 	ldrb.w	r3, [r3, #1572]	; 0x624
 8003534:	2b0a      	cmp	r3, #10
 8003536:	d101      	bne.n	800353c <atc_addSearch+0x18>
  {
    atc_printf("[%s] Error: Search limit reached", atc->name);
    return false;
 8003538:	2300      	movs	r3, #0
 800353a:	e049      	b.n	80035d0 <atc_addSearch+0xac>
  }
  atc->search[atc->searchIndex] = (char*) atc_alloc(strlen(str) + 1);
 800353c:	6838      	ldr	r0, [r7, #0]
 800353e:	f7fc fe51 	bl	80001e4 <strlen>
 8003542:	4603      	mov	r3, r0
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3624 	ldrb.w	r3, [r3, #1572]	; 0x624
 800354c:	461c      	mov	r4, r3
 800354e:	4610      	mov	r0, r2
 8003550:	f7ff fe50 	bl	80031f4 <atc_alloc>
 8003554:	4601      	mov	r1, r0
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f504 72bd 	add.w	r2, r4, #378	; 0x17a
 800355c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  if (atc->search[atc->searchIndex] != NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3624 	ldrb.w	r3, [r3, #1572]	; 0x624
 8003566:	461a      	mov	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f502 72bd 	add.w	r2, r2, #378	; 0x17a
 800356e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d02b      	beq.n	80035ce <atc_addSearch+0xaa>
  {
    strncpy(atc->search[atc->searchIndex], str, strlen(str));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3624 	ldrb.w	r3, [r3, #1572]	; 0x624
 800357c:	461a      	mov	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f502 72bd 	add.w	r2, r2, #378	; 0x17a
 8003584:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8003588:	6838      	ldr	r0, [r7, #0]
 800358a:	f7fc fe2b 	bl	80001e4 <strlen>
 800358e:	4603      	mov	r3, r0
 8003590:	461a      	mov	r2, r3
 8003592:	6839      	ldr	r1, [r7, #0]
 8003594:	4620      	mov	r0, r4
 8003596:	f003 fd7a 	bl	800708e <strncpy>
    atc->search[atc->searchIndex][strlen(str)] = 0;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 3624 	ldrb.w	r3, [r3, #1572]	; 0x624
 80035a0:	461a      	mov	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f502 72bd 	add.w	r2, r2, #378	; 0x17a
 80035a8:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80035ac:	6838      	ldr	r0, [r7, #0]
 80035ae:	f7fc fe19 	bl	80001e4 <strlen>
 80035b2:	4603      	mov	r3, r0
 80035b4:	4423      	add	r3, r4
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]
    atc->searchIndex++;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3624 	ldrb.w	r3, [r3, #1572]	; 0x624
 80035c0:	3301      	adds	r3, #1
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    return true;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <atc_addSearch+0xac>
  }
  else
    return false;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd90      	pop	{r4, r7, pc}

080035d8 <atc_command>:
//####################################################################################################
int8_t atc_command(atc_t *atc, const char *command, uint32_t timeout_ms, char *answer, uint16_t answer_size,
    int items, ...)
{
 80035d8:	b590      	push	{r4, r7, lr}
 80035da:	b08b      	sub	sp, #44	; 0x2c
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	603b      	str	r3, [r7, #0]
  if (atc->inited == false)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	f083 0301 	eor.w	r3, r3, #1
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <atc_command+0x22>
    return -1;
 80035f4:	f04f 33ff 	mov.w	r3, #4294967295
 80035f8:	e0c9      	b.n	800378e <atc_command+0x1b6>
  if (atc_lock(atc, timeout_ms) == false)
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f7ff fe3f 	bl	8003280 <atc_lock>
 8003602:	4603      	mov	r3, r0
 8003604:	f083 0301 	eor.w	r3, r3, #1
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <atc_command+0x3c>
    return -1;
 800360e:	f04f 33ff 	mov.w	r3, #4294967295
 8003612:	e0bc      	b.n	800378e <atc_command+0x1b6>
  if (answer != NULL)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <atc_command+0x4e>
    memset(answer, 0, answer_size);
 800361a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800361c:	461a      	mov	r2, r3
 800361e:	2100      	movs	r1, #0
 8003620:	6838      	ldr	r0, [r7, #0]
 8003622:	f003 fd1f 	bl	8007064 <memset>
  uint8_t foundIndex = 0;
 8003626:	2300      	movs	r3, #0
 8003628:	75fb      	strb	r3, [r7, #23]
  va_list tag;
  va_start(tag, items);
 800362a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800362e:	613b      	str	r3, [r7, #16]
  for (uint8_t i = 0; i < items; i++)
 8003630:	2300      	movs	r3, #0
 8003632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003636:	e03f      	b.n	80036b8 <atc_command+0xe0>
  {
    if (i == _ATC_SEARCH_CMD_MAX)
 8003638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800363c:	2b05      	cmp	r3, #5
 800363e:	d041      	beq.n	80036c4 <atc_command+0xec>
    {
      atc_printf("[%s] Error: Search command limit reached", atc->name);
      break;
    }
    char *str = va_arg(tag, char*);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1d1a      	adds	r2, r3, #4
 8003644:	613a      	str	r2, [r7, #16]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	623b      	str	r3, [r7, #32]
    atc->searchCmd[i] = (char*) atc_alloc(strlen(str) + 1);
 800364a:	6a38      	ldr	r0, [r7, #32]
 800364c:	f7fc fdca 	bl	80001e4 <strlen>
 8003650:	4603      	mov	r3, r0
 8003652:	3301      	adds	r3, #1
 8003654:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff fdcb 	bl	80031f4 <atc_alloc>
 800365e:	4601      	mov	r1, r0
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f504 72c2 	add.w	r2, r4, #388	; 0x184
 8003666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    if (atc->searchCmd[i] != NULL)
 800366a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f502 72c2 	add.w	r2, r2, #388	; 0x184
 8003674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d018      	beq.n	80036ae <atc_command+0xd6>
    {
      strcpy(atc->searchCmd[i], str);
 800367c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f502 72c2 	add.w	r2, r2, #388	; 0x184
 8003686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800368a:	6a39      	ldr	r1, [r7, #32]
 800368c:	4618      	mov	r0, r3
 800368e:	f003 fe06 	bl	800729e <strcpy>
      atc->searchCmd[i][strlen(str)] = 0;
 8003692:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f502 72c2 	add.w	r2, r2, #388	; 0x184
 800369c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80036a0:	6a38      	ldr	r0, [r7, #32]
 80036a2:	f7fc fd9f 	bl	80001e4 <strlen>
 80036a6:	4603      	mov	r3, r0
 80036a8:	4423      	add	r3, r4
 80036aa:	2200      	movs	r2, #0
 80036ac:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < items; i++)
 80036ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036b2:	3301      	adds	r3, #1
 80036b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80036b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036be:	429a      	cmp	r2, r3
 80036c0:	dcba      	bgt.n	8003638 <atc_command+0x60>
 80036c2:	e000      	b.n	80036c6 <atc_command+0xee>
      break;
 80036c4:	bf00      	nop
    }
  }
  va_end(tag);
  atc_transmit(atc, (uint8_t*) command, strlen(command));
 80036c6:	68b8      	ldr	r0, [r7, #8]
 80036c8:	f7fc fd8c 	bl	80001e4 <strlen>
 80036cc:	4603      	mov	r3, r0
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	461a      	mov	r2, r3
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f7ff fe16 	bl	8003306 <atc_transmit>
  uint32_t start = HAL_GetTick();
 80036da:	f7fd fd29 	bl	8001130 <HAL_GetTick>
 80036de:	61f8      	str	r0, [r7, #28]
  while (HAL_GetTick() - start < timeout_ms)
 80036e0:	e026      	b.n	8003730 <atc_command+0x158>
  {
    atc_delay(1);
 80036e2:	2001      	movs	r0, #1
 80036e4:	f001 ff3d 	bl	8005562 <osDelay>
    if (atc_available(atc))
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f7ff ff02 	bl	80034f2 <atc_available>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01d      	beq.n	8003730 <atc_command+0x158>
    {
      atc_printf("[%s] %s", atc->name, (char* )atc->rxBuffer);
      atc_search(atc);
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f7ff fe75 	bl	80033e4 <atc_search>
      char *found = atc_searchAnswer(atc, items, &foundIndex);
 80036fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	f107 0217 	add.w	r2, r7, #23
 8003702:	4619      	mov	r1, r3
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f7ff fea2 	bl	800344e <atc_searchAnswer>
 800370a:	61b8      	str	r0, [r7, #24]
      if (found != NULL && answer != NULL)
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d008      	beq.n	8003724 <atc_command+0x14c>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <atc_command+0x14c>
        strncpy(answer, found, answer_size);
 8003718:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800371a:	461a      	mov	r2, r3
 800371c:	69b9      	ldr	r1, [r7, #24]
 800371e:	6838      	ldr	r0, [r7, #0]
 8003720:	f003 fcb5 	bl	800708e <strncpy>
      atc_empty(atc);
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f7ff fed0 	bl	80034ca <atc_empty>
      if (found != NULL)
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d108      	bne.n	8003742 <atc_command+0x16a>
  while (HAL_GetTick() - start < timeout_ms)
 8003730:	f7fd fcfe 	bl	8001130 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	429a      	cmp	r2, r3
 800373e:	d8d0      	bhi.n	80036e2 <atc_command+0x10a>
 8003740:	e000      	b.n	8003744 <atc_command+0x16c>
        break;
 8003742:	bf00      	nop
    }
  }
  for (uint8_t i = 0; i < items; i++)
 8003744:	2300      	movs	r3, #0
 8003746:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800374a:	e016      	b.n	800377a <atc_command+0x1a2>
  {
    atc_free(atc->searchCmd[i]);
 800374c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f502 72c2 	add.w	r2, r2, #388	; 0x184
 8003756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff fd56 	bl	800320c <atc_free>
    atc->searchCmd[i] = NULL;
 8003760:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f502 72c2 	add.w	r2, r2, #388	; 0x184
 800376a:	2100      	movs	r1, #0
 800376c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (uint8_t i = 0; i < items; i++)
 8003770:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003774:	3301      	adds	r3, #1
 8003776:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800377a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800377e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003780:	429a      	cmp	r2, r3
 8003782:	dce3      	bgt.n	800374c <atc_command+0x174>
  }
  atc_unlock(atc);
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f7ff fdb0 	bl	80032ea <atc_unlock>
  return foundIndex;
 800378a:	7dfb      	ldrb	r3, [r7, #23]
 800378c:	b25b      	sxtb	r3, r3
}
 800378e:	4618      	mov	r0, r3
 8003790:	372c      	adds	r7, #44	; 0x2c
 8003792:	46bd      	mov	sp, r7
 8003794:	bd90      	pop	{r4, r7, pc}
	...

08003798 <gsm_found>:

gsm_t gsm;

//###############################################################################################################
void gsm_found(char *found_str)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  char *str;

  str = strstr(found_str, "POWER DOWN\r\n");
 80037a0:	4978      	ldr	r1, [pc, #480]	; (8003984 <gsm_found+0x1ec>)
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f003 fce2 	bl	800716c <strstr>
 80037a8:	6138      	str	r0, [r7, #16]
  if (str != NULL)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d005      	beq.n	80037bc <gsm_found+0x24>
  {
    gsm.status.power = 0;
 80037b0:	4a75      	ldr	r2, [pc, #468]	; (8003988 <gsm_found+0x1f0>)
 80037b2:	7913      	ldrb	r3, [r2, #4]
 80037b4:	f36f 0300 	bfc	r3, #0, #1
 80037b8:	7113      	strb	r3, [r2, #4]
    return;
 80037ba:	e0e0      	b.n	800397e <gsm_found+0x1e6>
  }
  str = strstr(found_str, "\r\n+CREG: ");
 80037bc:	4973      	ldr	r1, [pc, #460]	; (800398c <gsm_found+0x1f4>)
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f003 fcd4 	bl	800716c <strstr>
 80037c4:	6138      	str	r0, [r7, #16]
  if (str != NULL)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d027      	beq.n	800381c <gsm_found+0x84>
  {
    int16_t p1 = -1, p2 = -1;
 80037cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037d0:	817b      	strh	r3, [r7, #10]
 80037d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037d6:	813b      	strh	r3, [r7, #8]
    sscanf(str, "\r\n+CREG: %hd,%hd", &p1, &p2);
 80037d8:	f107 0308 	add.w	r3, r7, #8
 80037dc:	f107 020a 	add.w	r2, r7, #10
 80037e0:	496b      	ldr	r1, [pc, #428]	; (8003990 <gsm_found+0x1f8>)
 80037e2:	6938      	ldr	r0, [r7, #16]
 80037e4:	f003 fb38 	bl	8006e58 <siscanf>
    if (p2 == 1)
 80037e8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d10a      	bne.n	8003806 <gsm_found+0x6e>
    {
      gsm.status.netReg = 1;
 80037f0:	4a65      	ldr	r2, [pc, #404]	; (8003988 <gsm_found+0x1f0>)
 80037f2:	7913      	ldrb	r3, [r2, #4]
 80037f4:	f043 0304 	orr.w	r3, r3, #4
 80037f8:	7113      	strb	r3, [r2, #4]
      gsm.status.netChange = 1;
 80037fa:	4a63      	ldr	r2, [pc, #396]	; (8003988 <gsm_found+0x1f0>)
 80037fc:	7913      	ldrb	r3, [r2, #4]
 80037fe:	f043 0308 	orr.w	r3, r3, #8
 8003802:	7113      	strb	r3, [r2, #4]
      return;
 8003804:	e0bb      	b.n	800397e <gsm_found+0x1e6>
    }
    else
    {
      gsm.status.netReg = 0;
 8003806:	4a60      	ldr	r2, [pc, #384]	; (8003988 <gsm_found+0x1f0>)
 8003808:	7913      	ldrb	r3, [r2, #4]
 800380a:	f36f 0382 	bfc	r3, #2, #1
 800380e:	7113      	strb	r3, [r2, #4]
      gsm.status.netChange = 1;
 8003810:	4a5d      	ldr	r2, [pc, #372]	; (8003988 <gsm_found+0x1f0>)
 8003812:	7913      	ldrb	r3, [r2, #4]
 8003814:	f043 0308 	orr.w	r3, r3, #8
 8003818:	7113      	strb	r3, [r2, #4]
      return;
 800381a:	e0b0      	b.n	800397e <gsm_found+0x1e6>
    }
    return;
  }
#endif
#if (_GSM_MSG == 1)
  str = strstr(found_str, "\r\n+CMTI:");
 800381c:	495d      	ldr	r1, [pc, #372]	; (8003994 <gsm_found+0x1fc>)
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f003 fca4 	bl	800716c <strstr>
 8003824:	6138      	str	r0, [r7, #16]
  if (str != NULL)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d013      	beq.n	8003854 <gsm_found+0xbc>
  {
    str = strchr(str, ',');
 800382c:	212c      	movs	r1, #44	; 0x2c
 800382e:	6938      	ldr	r0, [r7, #16]
 8003830:	f003 fc20 	bl	8007074 <strchr>
 8003834:	6138      	str	r0, [r7, #16]
    if (str != NULL)
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00b      	beq.n	8003854 <gsm_found+0xbc>
    {
      str++;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	3301      	adds	r3, #1
 8003840:	613b      	str	r3, [r7, #16]
      gsm.msg.newMsg = atoi(str);
 8003842:	6938      	ldr	r0, [r7, #16]
 8003844:	f003 f872 	bl	800692c <atoi>
 8003848:	4603      	mov	r3, r0
 800384a:	b21a      	sxth	r2, r3
 800384c:	4b4e      	ldr	r3, [pc, #312]	; (8003988 <gsm_found+0x1f0>)
 800384e:	f8a3 2c1a 	strh.w	r2, [r3, #3098]	; 0xc1a
      return;
 8003852:	e094      	b.n	800397e <gsm_found+0x1e6>
    }
  }
#endif
#if (_GSM_GPRS == 1)
  str = strstr(found_str, "\r\nCLOSED\r\n");
 8003854:	4950      	ldr	r1, [pc, #320]	; (8003998 <gsm_found+0x200>)
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f003 fc88 	bl	800716c <strstr>
 800385c:	6138      	str	r0, [r7, #16]
  if (str != NULL)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d004      	beq.n	800386e <gsm_found+0xd6>
  {
    gsm.gprs.tcpConnection = 0;
 8003864:	4b48      	ldr	r3, [pc, #288]	; (8003988 <gsm_found+0x1f0>)
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2c5a 	strb.w	r2, [r3, #3162]	; 0xc5a
    return;
 800386c:	e087      	b.n	800397e <gsm_found+0x1e6>
  }
  str = strstr(found_str, "\r\n+CIPRXGET: 1\r\n");
 800386e:	494b      	ldr	r1, [pc, #300]	; (800399c <gsm_found+0x204>)
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f003 fc7b 	bl	800716c <strstr>
 8003876:	6138      	str	r0, [r7, #16]
  if (str != NULL)
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d004      	beq.n	8003888 <gsm_found+0xf0>
  {
    gsm.gprs.gotData = 1;
 800387e:	4b42      	ldr	r3, [pc, #264]	; (8003988 <gsm_found+0x1f0>)
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2c5b 	strb.w	r2, [r3, #3163]	; 0xc5b
    return;
 8003886:	e07a      	b.n	800397e <gsm_found+0x1e6>
  }
  str = strstr(found_str, "\r\n+SMSTATE: 0\r\n");
 8003888:	4945      	ldr	r1, [pc, #276]	; (80039a0 <gsm_found+0x208>)
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f003 fc6e 	bl	800716c <strstr>
 8003890:	6138      	str	r0, [r7, #16]
  if (str != NULL)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d004      	beq.n	80038a2 <gsm_found+0x10a>
  {
    gsm.gprs.mqttConnected = 0;
 8003898:	4b3b      	ldr	r3, [pc, #236]	; (8003988 <gsm_found+0x1f0>)
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2ce1 	strb.w	r2, [r3, #3297]	; 0xce1
    return;
 80038a0:	e06d      	b.n	800397e <gsm_found+0x1e6>
  }
  str = strstr(found_str, "\r\n+SMPUBLISH: ");
 80038a2:	4940      	ldr	r1, [pc, #256]	; (80039a4 <gsm_found+0x20c>)
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f003 fc61 	bl	800716c <strstr>
 80038aa:	6138      	str	r0, [r7, #16]
  if (str != NULL)
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d065      	beq.n	800397e <gsm_found+0x1e6>
  {
    memset(gsm.gprs.mqttMessage, 0, sizeof(gsm.gprs.mqttMessage));
 80038b2:	2240      	movs	r2, #64	; 0x40
 80038b4:	2100      	movs	r1, #0
 80038b6:	483c      	ldr	r0, [pc, #240]	; (80039a8 <gsm_found+0x210>)
 80038b8:	f003 fbd4 	bl	8007064 <memset>
    memset(gsm.gprs.mqttTopic, 0, sizeof(gsm.gprs.mqttTopic));
 80038bc:	2240      	movs	r2, #64	; 0x40
 80038be:	2100      	movs	r1, #0
 80038c0:	483a      	ldr	r0, [pc, #232]	; (80039ac <gsm_found+0x214>)
 80038c2:	f003 fbcf 	bl	8007064 <memset>
    str = strtok(str, "\"");
 80038c6:	493a      	ldr	r1, [pc, #232]	; (80039b0 <gsm_found+0x218>)
 80038c8:	6938      	ldr	r0, [r7, #16]
 80038ca:	f003 fbf3 	bl	80070b4 <strtok>
 80038ce:	6138      	str	r0, [r7, #16]
    do
    {
      str = strtok(NULL, "\"");
 80038d0:	4937      	ldr	r1, [pc, #220]	; (80039b0 <gsm_found+0x218>)
 80038d2:	2000      	movs	r0, #0
 80038d4:	f003 fbee 	bl	80070b4 <strtok>
 80038d8:	6138      	str	r0, [r7, #16]
      if (str == NULL)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d046      	beq.n	800396e <gsm_found+0x1d6>
        break;
      char *endStr;
      uint8_t len;
      endStr = strtok(NULL, "\"");
 80038e0:	4933      	ldr	r1, [pc, #204]	; (80039b0 <gsm_found+0x218>)
 80038e2:	2000      	movs	r0, #0
 80038e4:	f003 fbe6 	bl	80070b4 <strtok>
 80038e8:	60f8      	str	r0, [r7, #12]
      if (endStr == NULL)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d040      	beq.n	8003972 <gsm_found+0x1da>
        break;
      len = endStr - str;
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	75fb      	strb	r3, [r7, #23]
      if (len > sizeof(gsm.gprs.mqttTopic))
 80038f8:	7dfb      	ldrb	r3, [r7, #23]
 80038fa:	2b40      	cmp	r3, #64	; 0x40
 80038fc:	d901      	bls.n	8003902 <gsm_found+0x16a>
        len = sizeof(gsm.gprs.mqttTopic);
 80038fe:	2340      	movs	r3, #64	; 0x40
 8003900:	75fb      	strb	r3, [r7, #23]
      if (len > 2)
 8003902:	7dfb      	ldrb	r3, [r7, #23]
 8003904:	2b02      	cmp	r3, #2
 8003906:	d902      	bls.n	800390e <gsm_found+0x176>
        len --;
 8003908:	7dfb      	ldrb	r3, [r7, #23]
 800390a:	3b01      	subs	r3, #1
 800390c:	75fb      	strb	r3, [r7, #23]
      strncpy(gsm.gprs.mqttTopic, str, len);
 800390e:	7dfb      	ldrb	r3, [r7, #23]
 8003910:	461a      	mov	r2, r3
 8003912:	6939      	ldr	r1, [r7, #16]
 8003914:	4825      	ldr	r0, [pc, #148]	; (80039ac <gsm_found+0x214>)
 8003916:	f003 fbba 	bl	800708e <strncpy>
      str = strtok(NULL, "\"");
 800391a:	4925      	ldr	r1, [pc, #148]	; (80039b0 <gsm_found+0x218>)
 800391c:	2000      	movs	r0, #0
 800391e:	f003 fbc9 	bl	80070b4 <strtok>
 8003922:	6138      	str	r0, [r7, #16]
      if (str == NULL)
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d025      	beq.n	8003976 <gsm_found+0x1de>
        break;
      endStr = strtok(NULL, "\"");
 800392a:	4921      	ldr	r1, [pc, #132]	; (80039b0 <gsm_found+0x218>)
 800392c:	2000      	movs	r0, #0
 800392e:	f003 fbc1 	bl	80070b4 <strtok>
 8003932:	60f8      	str	r0, [r7, #12]
      if (endStr == NULL)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d01f      	beq.n	800397a <gsm_found+0x1e2>
        break;
      len = endStr - str;
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	75fb      	strb	r3, [r7, #23]
      if (len > sizeof(gsm.gprs.mqttMessage))
 8003942:	7dfb      	ldrb	r3, [r7, #23]
 8003944:	2b40      	cmp	r3, #64	; 0x40
 8003946:	d901      	bls.n	800394c <gsm_found+0x1b4>
        len = sizeof(gsm.gprs.mqttMessage);
 8003948:	2340      	movs	r3, #64	; 0x40
 800394a:	75fb      	strb	r3, [r7, #23]
      if (len > 2)
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d902      	bls.n	8003958 <gsm_found+0x1c0>
        len --;
 8003952:	7dfb      	ldrb	r3, [r7, #23]
 8003954:	3b01      	subs	r3, #1
 8003956:	75fb      	strb	r3, [r7, #23]
      strncpy(gsm.gprs.mqttMessage, str, len);
 8003958:	7dfb      	ldrb	r3, [r7, #23]
 800395a:	461a      	mov	r2, r3
 800395c:	6939      	ldr	r1, [r7, #16]
 800395e:	4812      	ldr	r0, [pc, #72]	; (80039a8 <gsm_found+0x210>)
 8003960:	f003 fb95 	bl	800708e <strncpy>
      gsm.gprs.mqttData = 1;      
 8003964:	4b08      	ldr	r3, [pc, #32]	; (8003988 <gsm_found+0x1f0>)
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2ce0 	strb.w	r2, [r3, #3296]	; 0xce0
      
    }while (0);
    return;
 800396c:	e006      	b.n	800397c <gsm_found+0x1e4>
        break;
 800396e:	bf00      	nop
 8003970:	e004      	b.n	800397c <gsm_found+0x1e4>
        break;
 8003972:	bf00      	nop
 8003974:	e002      	b.n	800397c <gsm_found+0x1e4>
        break;
 8003976:	bf00      	nop
 8003978:	e000      	b.n	800397c <gsm_found+0x1e4>
        break;
 800397a:	bf00      	nop
    return;
 800397c:	bf00      	nop
  }
#endif
#if (_GSM_BLUETOOTH == 1)
  str = strstr(found_str, "");
#endif
}
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	08008838 	.word	0x08008838
 8003988:	20000330 	.word	0x20000330
 800398c:	08008848 	.word	0x08008848
 8003990:	08008854 	.word	0x08008854
 8003994:	08008868 	.word	0x08008868
 8003998:	08008874 	.word	0x08008874
 800399c:	08008880 	.word	0x08008880
 80039a0:	08008894 	.word	0x08008894
 80039a4:	080088a4 	.word	0x080088a4
 80039a8:	20000fd0 	.word	0x20000fd0
 80039ac:	20000f90 	.word	0x20000f90
 80039b0:	080088b4 	.word	0x080088b4

080039b4 <gsm_init_commands>:
//###############################################################################################################
void gsm_init_commands(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af04      	add	r7, sp, #16
  gsm_command("AT&F0\r\n", 5000, NULL, 0, 1, "\r\nOK\r\n");
 80039ba:	4b35      	ldr	r3, [pc, #212]	; (8003a90 <gsm_init_commands+0xdc>)
 80039bc:	9302      	str	r3, [sp, #8]
 80039be:	2301      	movs	r3, #1
 80039c0:	9301      	str	r3, [sp, #4]
 80039c2:	2300      	movs	r3, #0
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	2300      	movs	r3, #0
 80039c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039cc:	4931      	ldr	r1, [pc, #196]	; (8003a94 <gsm_init_commands+0xe0>)
 80039ce:	4832      	ldr	r0, [pc, #200]	; (8003a98 <gsm_init_commands+0xe4>)
 80039d0:	f7ff fe02 	bl	80035d8 <atc_command>
  gsm_command("ATE1\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n");
 80039d4:	4b2e      	ldr	r3, [pc, #184]	; (8003a90 <gsm_init_commands+0xdc>)
 80039d6:	9302      	str	r3, [sp, #8]
 80039d8:	2301      	movs	r3, #1
 80039da:	9301      	str	r3, [sp, #4]
 80039dc:	2300      	movs	r3, #0
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	2300      	movs	r3, #0
 80039e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039e6:	492d      	ldr	r1, [pc, #180]	; (8003a9c <gsm_init_commands+0xe8>)
 80039e8:	482b      	ldr	r0, [pc, #172]	; (8003a98 <gsm_init_commands+0xe4>)
 80039ea:	f7ff fdf5 	bl	80035d8 <atc_command>
  gsm_command("AT+CREG=1\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n");
 80039ee:	4b28      	ldr	r3, [pc, #160]	; (8003a90 <gsm_init_commands+0xdc>)
 80039f0:	9302      	str	r3, [sp, #8]
 80039f2:	2301      	movs	r3, #1
 80039f4:	9301      	str	r3, [sp, #4]
 80039f6:	2300      	movs	r3, #0
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	2300      	movs	r3, #0
 80039fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a00:	4927      	ldr	r1, [pc, #156]	; (8003aa0 <gsm_init_commands+0xec>)
 8003a02:	4825      	ldr	r0, [pc, #148]	; (8003a98 <gsm_init_commands+0xe4>)
 8003a04:	f7ff fde8 	bl	80035d8 <atc_command>
  gsm_command("AT+FSHEX=0\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n");
 8003a08:	4b21      	ldr	r3, [pc, #132]	; (8003a90 <gsm_init_commands+0xdc>)
 8003a0a:	9302      	str	r3, [sp, #8]
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	9301      	str	r3, [sp, #4]
 8003a10:	2300      	movs	r3, #0
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	2300      	movs	r3, #0
 8003a16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a1a:	4922      	ldr	r1, [pc, #136]	; (8003aa4 <gsm_init_commands+0xf0>)
 8003a1c:	481e      	ldr	r0, [pc, #120]	; (8003a98 <gsm_init_commands+0xe4>)
 8003a1e:	f7ff fddb 	bl	80035d8 <atc_command>
  gsm_command("AT+COLP=1\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n");
  gsm_command("AT+CLIP=1\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n");
  gsm_command("AT+DDET=1\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n");
#endif
#if (_GSM_MSG == 1)
  gsm_msg_textMode(true, false);
 8003a22:	2100      	movs	r1, #0
 8003a24:	2001      	movs	r0, #1
 8003a26:	f000 fb4f 	bl	80040c8 <gsm_msg_textMode>
  gsm_msg_selectStorage(gsm_msg_store_module);
 8003a2a:	2002      	movs	r0, #2
 8003a2c:	f000 fd08 	bl	8004440 <gsm_msg_selectStorage>
  gsm_msg_selectCharacterSet(gsm_msg_chSet_ira);
 8003a30:	2003      	movs	r0, #3
 8003a32:	f000 fd95 	bl	8004560 <gsm_msg_selectCharacterSet>
#endif
#if (_GSM_GPRS == 1)
  gsm_command("AT+CIPSHUT\r\n", 5000, NULL, 0, 2, "\r\nSHUT OK\r\n", "\r\nERROR\r\n");
 8003a36:	4b1c      	ldr	r3, [pc, #112]	; (8003aa8 <gsm_init_commands+0xf4>)
 8003a38:	9303      	str	r3, [sp, #12]
 8003a3a:	4b1c      	ldr	r3, [pc, #112]	; (8003aac <gsm_init_commands+0xf8>)
 8003a3c:	9302      	str	r3, [sp, #8]
 8003a3e:	2302      	movs	r3, #2
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	2300      	movs	r3, #0
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	2300      	movs	r3, #0
 8003a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4c:	4918      	ldr	r1, [pc, #96]	; (8003ab0 <gsm_init_commands+0xfc>)
 8003a4e:	4812      	ldr	r0, [pc, #72]	; (8003a98 <gsm_init_commands+0xe4>)
 8003a50:	f7ff fdc2 	bl	80035d8 <atc_command>
  gsm_command("AT+CIPHEAD=0\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n");
 8003a54:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <gsm_init_commands+0xdc>)
 8003a56:	9302      	str	r3, [sp, #8]
 8003a58:	2301      	movs	r3, #1
 8003a5a:	9301      	str	r3, [sp, #4]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	2300      	movs	r3, #0
 8003a62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a66:	4913      	ldr	r1, [pc, #76]	; (8003ab4 <gsm_init_commands+0x100>)
 8003a68:	480b      	ldr	r0, [pc, #44]	; (8003a98 <gsm_init_commands+0xe4>)
 8003a6a:	f7ff fdb5 	bl	80035d8 <atc_command>
  gsm_command("AT+CIPRXGET=1\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n");
 8003a6e:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <gsm_init_commands+0xdc>)
 8003a70:	9302      	str	r3, [sp, #8]
 8003a72:	2301      	movs	r3, #1
 8003a74:	9301      	str	r3, [sp, #4]
 8003a76:	2300      	movs	r3, #0
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a80:	490d      	ldr	r1, [pc, #52]	; (8003ab8 <gsm_init_commands+0x104>)
 8003a82:	4805      	ldr	r0, [pc, #20]	; (8003a98 <gsm_init_commands+0xe4>)
 8003a84:	f7ff fda8 	bl	80035d8 <atc_command>
#endif
#if (_GSM_BLUETOOTH == 1)

#endif
}
 8003a88:	bf00      	nop
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	080088c0 	.word	0x080088c0
 8003a94:	080088b8 	.word	0x080088b8
 8003a98:	20000338 	.word	0x20000338
 8003a9c:	080088c8 	.word	0x080088c8
 8003aa0:	080088d0 	.word	0x080088d0
 8003aa4:	080088dc 	.word	0x080088dc
 8003aa8:	080088fc 	.word	0x080088fc
 8003aac:	08008908 	.word	0x08008908
 8003ab0:	080088ec 	.word	0x080088ec
 8003ab4:	08008914 	.word	0x08008914
 8003ab8:	08008924 	.word	0x08008924

08003abc <gsm_lock>:
//###############################################################################################################
bool gsm_lock(uint32_t timeout_ms)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t start = HAL_GetTick();
 8003ac4:	f7fd fb34 	bl	8001130 <HAL_GetTick>
 8003ac8:	60f8      	str	r0, [r7, #12]
  while (HAL_GetTick() - start < timeout_ms)
 8003aca:	e00b      	b.n	8003ae4 <gsm_lock+0x28>
  {
    if (gsm.lock == 0)
 8003acc:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <gsm_lock+0x44>)
 8003ace:	785b      	ldrb	r3, [r3, #1]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d104      	bne.n	8003ade <gsm_lock+0x22>
    {
      gsm.lock = 1;
 8003ad4:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <gsm_lock+0x44>)
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	705a      	strb	r2, [r3, #1]
      return true;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e00b      	b.n	8003af6 <gsm_lock+0x3a>
    }
    gsm_delay(1);
 8003ade:	2001      	movs	r0, #1
 8003ae0:	f001 fd3f 	bl	8005562 <osDelay>
  while (HAL_GetTick() - start < timeout_ms)
 8003ae4:	f7fd fb24 	bl	8001130 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d8eb      	bhi.n	8003acc <gsm_lock+0x10>
  }
  return false;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20000330 	.word	0x20000330

08003b04 <gsm_unlock>:
//###############################################################################################################
void gsm_unlock()
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  gsm.lock = 0;
 8003b08:	4b03      	ldr	r3, [pc, #12]	; (8003b18 <gsm_unlock+0x14>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	705a      	strb	r2, [r3, #1]
}
 8003b0e:	bf00      	nop
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	20000330 	.word	0x20000330

08003b1c <gsm_init>:
//###############################################################################################################
bool gsm_init(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  if (gsm.inited == 1)
 8003b20:	4b41      	ldr	r3, [pc, #260]	; (8003c28 <gsm_init+0x10c>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <gsm_init+0x10>
    return true;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e07b      	b.n	8003c24 <gsm_init+0x108>
  gsm_printf("[GSM] init begin\r\n");
 8003b2c:	483f      	ldr	r0, [pc, #252]	; (8003c2c <gsm_init+0x110>)
 8003b2e:	f003 f96b 	bl	8006e08 <puts>
  HAL_GPIO_WritePin(_GSM_KEY_GPIO, _GSM_KEY_PIN, GPIO_PIN_SET);
 8003b32:	2201      	movs	r2, #1
 8003b34:	2180      	movs	r1, #128	; 0x80
 8003b36:	483e      	ldr	r0, [pc, #248]	; (8003c30 <gsm_init+0x114>)
 8003b38:	f7fd fd84 	bl	8001644 <HAL_GPIO_WritePin>
  gsm_delay(3000);
 8003b3c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003b40:	f001 fd0f 	bl	8005562 <osDelay>
  memset(&gsm, 0, sizeof(gsm));
 8003b44:	f640 42e4 	movw	r2, #3300	; 0xce4
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4837      	ldr	r0, [pc, #220]	; (8003c28 <gsm_init+0x10c>)
 8003b4c:	f003 fa8a 	bl	8007064 <memset>
  atc_init(&gsm.atc, "GSM ATC", _GSM_USART, gsm_found);
 8003b50:	4b38      	ldr	r3, [pc, #224]	; (8003c34 <gsm_init+0x118>)
 8003b52:	4a39      	ldr	r2, [pc, #228]	; (8003c38 <gsm_init+0x11c>)
 8003b54:	4939      	ldr	r1, [pc, #228]	; (8003c3c <gsm_init+0x120>)
 8003b56:	483a      	ldr	r0, [pc, #232]	; (8003c40 <gsm_init+0x124>)
 8003b58:	f7ff fb63 	bl	8003222 <atc_init>
  if (atc_addSearch(&gsm.atc, "POWER DOWN\r\n") == false)
 8003b5c:	4939      	ldr	r1, [pc, #228]	; (8003c44 <gsm_init+0x128>)
 8003b5e:	4838      	ldr	r0, [pc, #224]	; (8003c40 <gsm_init+0x124>)
 8003b60:	f7ff fce0 	bl	8003524 <atc_addSearch>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f083 0301 	eor.w	r3, r3, #1
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <gsm_init+0x58>
    return false;
 8003b70:	2300      	movs	r3, #0
 8003b72:	e057      	b.n	8003c24 <gsm_init+0x108>
  if (atc_addSearch(&gsm.atc, "\r\n+CREG:") == false)
 8003b74:	4934      	ldr	r1, [pc, #208]	; (8003c48 <gsm_init+0x12c>)
 8003b76:	4832      	ldr	r0, [pc, #200]	; (8003c40 <gsm_init+0x124>)
 8003b78:	f7ff fcd4 	bl	8003524 <atc_addSearch>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f083 0301 	eor.w	r3, r3, #1
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <gsm_init+0x70>
    return false;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e04b      	b.n	8003c24 <gsm_init+0x108>
    return false;
  if (atc_addSearch(&gsm.atc, "\r\n+DTMF:") == false)
    return false;
#endif
#if (_GSM_MSG == 1)
  if (atc_addSearch(&gsm.atc, "\r\n+CMTI:") == false)
 8003b8c:	492f      	ldr	r1, [pc, #188]	; (8003c4c <gsm_init+0x130>)
 8003b8e:	482c      	ldr	r0, [pc, #176]	; (8003c40 <gsm_init+0x124>)
 8003b90:	f7ff fcc8 	bl	8003524 <atc_addSearch>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f083 0301 	eor.w	r3, r3, #1
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <gsm_init+0x88>
    return false;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	e03f      	b.n	8003c24 <gsm_init+0x108>
  gsm.msg.newMsg = -1;
 8003ba4:	4b20      	ldr	r3, [pc, #128]	; (8003c28 <gsm_init+0x10c>)
 8003ba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003baa:	f8a3 2c1a 	strh.w	r2, [r3, #3098]	; 0xc1a
#endif
#if (_GSM_GPRS == 1)
  if (atc_addSearch(&gsm.atc, "\r\nCLOSED\r\n") == false)
 8003bae:	4928      	ldr	r1, [pc, #160]	; (8003c50 <gsm_init+0x134>)
 8003bb0:	4823      	ldr	r0, [pc, #140]	; (8003c40 <gsm_init+0x124>)
 8003bb2:	f7ff fcb7 	bl	8003524 <atc_addSearch>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	f083 0301 	eor.w	r3, r3, #1
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <gsm_init+0xaa>
    return false;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	e02e      	b.n	8003c24 <gsm_init+0x108>
  if (atc_addSearch(&gsm.atc, "\r\n+CIPRXGET: 1\r\n") == false)
 8003bc6:	4923      	ldr	r1, [pc, #140]	; (8003c54 <gsm_init+0x138>)
 8003bc8:	481d      	ldr	r0, [pc, #116]	; (8003c40 <gsm_init+0x124>)
 8003bca:	f7ff fcab 	bl	8003524 <atc_addSearch>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f083 0301 	eor.w	r3, r3, #1
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <gsm_init+0xc2>
    return false;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	e022      	b.n	8003c24 <gsm_init+0x108>
   if (atc_addSearch(&gsm.atc, "\r\n+SMSTATE: ") == false)
 8003bde:	491e      	ldr	r1, [pc, #120]	; (8003c58 <gsm_init+0x13c>)
 8003be0:	4817      	ldr	r0, [pc, #92]	; (8003c40 <gsm_init+0x124>)
 8003be2:	f7ff fc9f 	bl	8003524 <atc_addSearch>
 8003be6:	4603      	mov	r3, r0
 8003be8:	f083 0301 	eor.w	r3, r3, #1
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <gsm_init+0xda>
    return false;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e016      	b.n	8003c24 <gsm_init+0x108>
   if (atc_addSearch(&gsm.atc, "\r\n+SMPUBLISH: ") == false)
 8003bf6:	4919      	ldr	r1, [pc, #100]	; (8003c5c <gsm_init+0x140>)
 8003bf8:	4811      	ldr	r0, [pc, #68]	; (8003c40 <gsm_init+0x124>)
 8003bfa:	f7ff fc93 	bl	8003524 <atc_addSearch>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f083 0301 	eor.w	r3, r3, #1
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <gsm_init+0xf2>
    return false;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	e00a      	b.n	8003c24 <gsm_init+0x108>
#endif
#if (_GSM_BLUETOOTH == 1)

#endif
  gsm_delay(1000);
 8003c0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c12:	f001 fca6 	bl	8005562 <osDelay>
  gsm_printf("[GSM] init done\r\n");
 8003c16:	4812      	ldr	r0, [pc, #72]	; (8003c60 <gsm_init+0x144>)
 8003c18:	f003 f8f6 	bl	8006e08 <puts>
  gsm.inited = 1;
 8003c1c:	4b02      	ldr	r3, [pc, #8]	; (8003c28 <gsm_init+0x10c>)
 8003c1e:	2201      	movs	r2, #1
 8003c20:	701a      	strb	r2, [r3, #0]
  return true;
 8003c22:	2301      	movs	r3, #1
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20000330 	.word	0x20000330
 8003c2c:	08008934 	.word	0x08008934
 8003c30:	40020c00 	.word	0x40020c00
 8003c34:	08003799 	.word	0x08003799
 8003c38:	40004400 	.word	0x40004400
 8003c3c:	08008948 	.word	0x08008948
 8003c40:	20000338 	.word	0x20000338
 8003c44:	08008838 	.word	0x08008838
 8003c48:	08008950 	.word	0x08008950
 8003c4c:	08008868 	.word	0x08008868
 8003c50:	08008874 	.word	0x08008874
 8003c54:	08008880 	.word	0x08008880
 8003c58:	0800895c 	.word	0x0800895c
 8003c5c:	080088a4 	.word	0x080088a4
 8003c60:	0800896c 	.word	0x0800896c

08003c64 <gsm_power>:
  //  --- 60s timer  ######################

}
//###############################################################################################################
bool gsm_power(bool on_off)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af04      	add	r7, sp, #16
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	71fb      	strb	r3, [r7, #7]
  gsm_printf("[GSM] power(%d) begin\r\n", on_off);
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	4619      	mov	r1, r3
 8003c72:	487d      	ldr	r0, [pc, #500]	; (8003e68 <gsm_power+0x204>)
 8003c74:	f003 f862 	bl	8006d3c <iprintf>
  uint8_t state = 0;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	73fb      	strb	r3, [r7, #15]
  if (on_off)
 8003c7c:	79fb      	ldrb	r3, [r7, #7]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d013      	beq.n	8003caa <gsm_power+0x46>
  {
		if (gsm.status.power == 1)
 8003c82:	4b7a      	ldr	r3, [pc, #488]	; (8003e6c <gsm_power+0x208>)
 8003c84:	791b      	ldrb	r3, [r3, #4]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <gsm_power+0x30>
			return true;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0e5      	b.n	8003e60 <gsm_power+0x1fc>
    gsm.status.turnOn = 1;
 8003c94:	4a75      	ldr	r2, [pc, #468]	; (8003e6c <gsm_power+0x208>)
 8003c96:	7913      	ldrb	r3, [r2, #4]
 8003c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c9c:	7113      	strb	r3, [r2, #4]
    gsm.status.turnOff = 0;  
 8003c9e:	4a73      	ldr	r2, [pc, #460]	; (8003e6c <gsm_power+0x208>)
 8003ca0:	7913      	ldrb	r3, [r2, #4]
 8003ca2:	f36f 1345 	bfc	r3, #5, #1
 8003ca6:	7113      	strb	r3, [r2, #4]
 8003ca8:	e009      	b.n	8003cbe <gsm_power+0x5a>
  }
  else
  {
    gsm.status.turnOn = 0;
 8003caa:	4a70      	ldr	r2, [pc, #448]	; (8003e6c <gsm_power+0x208>)
 8003cac:	7913      	ldrb	r3, [r2, #4]
 8003cae:	f36f 1386 	bfc	r3, #6, #1
 8003cb2:	7113      	strb	r3, [r2, #4]
    gsm.status.turnOff = 1;    
 8003cb4:	4a6d      	ldr	r2, [pc, #436]	; (8003e6c <gsm_power+0x208>)
 8003cb6:	7913      	ldrb	r3, [r2, #4]
 8003cb8:	f043 0320 	orr.w	r3, r3, #32
 8003cbc:	7113      	strb	r3, [r2, #4]
  }
  if (gsm_command("AT\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n") == 1)
 8003cbe:	4b6c      	ldr	r3, [pc, #432]	; (8003e70 <gsm_power+0x20c>)
 8003cc0:	9302      	str	r3, [sp, #8]
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	9301      	str	r3, [sp, #4]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cd0:	4968      	ldr	r1, [pc, #416]	; (8003e74 <gsm_power+0x210>)
 8003cd2:	4869      	ldr	r0, [pc, #420]	; (8003e78 <gsm_power+0x214>)
 8003cd4:	f7ff fc80 	bl	80035d8 <atc_command>
     ;
  if ((on_off == true) && (state == 1))
 8003cd8:	79fb      	ldrb	r3, [r7, #7]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d023      	beq.n	8003d26 <gsm_power+0xc2>
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d120      	bne.n	8003d26 <gsm_power+0xc2>
  {
    memset(&gsm.status, 0, sizeof(gsm.status));
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	4864      	ldr	r0, [pc, #400]	; (8003e7c <gsm_power+0x218>)
 8003cea:	f003 f9bb 	bl	8007064 <memset>
    if (on_off)
 8003cee:	79fb      	ldrb	r3, [r7, #7]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <gsm_power+0x9c>
      gsm.status.turnOn = 1;
 8003cf4:	4a5d      	ldr	r2, [pc, #372]	; (8003e6c <gsm_power+0x208>)
 8003cf6:	7913      	ldrb	r3, [r2, #4]
 8003cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cfc:	7113      	strb	r3, [r2, #4]
 8003cfe:	e004      	b.n	8003d0a <gsm_power+0xa6>
    else
      gsm.status.turnOff = 1;    
 8003d00:	4a5a      	ldr	r2, [pc, #360]	; (8003e6c <gsm_power+0x208>)
 8003d02:	7913      	ldrb	r3, [r2, #4]
 8003d04:	f043 0320 	orr.w	r3, r3, #32
 8003d08:	7113      	strb	r3, [r2, #4]
    gsm.status.power = 1;
 8003d0a:	4a58      	ldr	r2, [pc, #352]	; (8003e6c <gsm_power+0x208>)
 8003d0c:	7913      	ldrb	r3, [r2, #4]
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	7113      	strb	r3, [r2, #4]
    gsm_init_commands();
 8003d14:	f7ff fe4e 	bl	80039b4 <gsm_init_commands>
    gsm_printf("[GSM] power(%d) done\r\n", on_off);
 8003d18:	79fb      	ldrb	r3, [r7, #7]
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4858      	ldr	r0, [pc, #352]	; (8003e80 <gsm_power+0x21c>)
 8003d1e:	f003 f80d 	bl	8006d3c <iprintf>
    return true;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e09c      	b.n	8003e60 <gsm_power+0x1fc>
  }
  if ((on_off == true) && (state == 0))
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d057      	beq.n	8003ddc <gsm_power+0x178>
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d154      	bne.n	8003ddc <gsm_power+0x178>
  {
    memset(&gsm.status, 0, sizeof(gsm.status));
 8003d32:	2201      	movs	r2, #1
 8003d34:	2100      	movs	r1, #0
 8003d36:	4851      	ldr	r0, [pc, #324]	; (8003e7c <gsm_power+0x218>)
 8003d38:	f003 f994 	bl	8007064 <memset>
    if (on_off)
 8003d3c:	79fb      	ldrb	r3, [r7, #7]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d005      	beq.n	8003d4e <gsm_power+0xea>
      gsm.status.turnOn = 1;
 8003d42:	4a4a      	ldr	r2, [pc, #296]	; (8003e6c <gsm_power+0x208>)
 8003d44:	7913      	ldrb	r3, [r2, #4]
 8003d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d4a:	7113      	strb	r3, [r2, #4]
 8003d4c:	e004      	b.n	8003d58 <gsm_power+0xf4>
    else
      gsm.status.turnOff = 1; 
 8003d4e:	4a47      	ldr	r2, [pc, #284]	; (8003e6c <gsm_power+0x208>)
 8003d50:	7913      	ldrb	r3, [r2, #4]
 8003d52:	f043 0320 	orr.w	r3, r3, #32
 8003d56:	7113      	strb	r3, [r2, #4]
    HAL_GPIO_WritePin(_GSM_KEY_GPIO, _GSM_KEY_PIN, GPIO_PIN_RESET);
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2180      	movs	r1, #128	; 0x80
 8003d5c:	4849      	ldr	r0, [pc, #292]	; (8003e84 <gsm_power+0x220>)
 8003d5e:	f7fd fc71 	bl	8001644 <HAL_GPIO_WritePin>
//    gsm_delay(1500);
    HAL_GPIO_WritePin(_GSM_KEY_GPIO, _GSM_KEY_PIN, GPIO_PIN_SET);
 8003d62:	2201      	movs	r2, #1
 8003d64:	2180      	movs	r1, #128	; 0x80
 8003d66:	4847      	ldr	r0, [pc, #284]	; (8003e84 <gsm_power+0x220>)
 8003d68:	f7fd fc6c 	bl	8001644 <HAL_GPIO_WritePin>
//    gsm_delay(3000);
    for (uint8_t i = 0; i < 5; i++)
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	73bb      	strb	r3, [r7, #14]
 8003d70:	e015      	b.n	8003d9e <gsm_power+0x13a>
    {
      if (gsm_command("AT\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n") == 1)
 8003d72:	4b3f      	ldr	r3, [pc, #252]	; (8003e70 <gsm_power+0x20c>)
 8003d74:	9302      	str	r3, [sp, #8]
 8003d76:	2301      	movs	r3, #1
 8003d78:	9301      	str	r3, [sp, #4]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d84:	493b      	ldr	r1, [pc, #236]	; (8003e74 <gsm_power+0x210>)
 8003d86:	483c      	ldr	r0, [pc, #240]	; (8003e78 <gsm_power+0x214>)
 8003d88:	f7ff fc26 	bl	80035d8 <atc_command>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d102      	bne.n	8003d98 <gsm_power+0x134>
      {
        state = 1;
 8003d92:	2301      	movs	r3, #1
 8003d94:	73fb      	strb	r3, [r7, #15]
        break;
 8003d96:	e005      	b.n	8003da4 <gsm_power+0x140>
    for (uint8_t i = 0; i < 5; i++)
 8003d98:	7bbb      	ldrb	r3, [r7, #14]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	73bb      	strb	r3, [r7, #14]
 8003d9e:	7bbb      	ldrb	r3, [r7, #14]
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d9e6      	bls.n	8003d72 <gsm_power+0x10e>
      }
    }
    if (state == 1)
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d111      	bne.n	8003dce <gsm_power+0x16a>
    {
      gsm_delay(5000);
 8003daa:	f241 3088 	movw	r0, #5000	; 0x1388
 8003dae:	f001 fbd8 	bl	8005562 <osDelay>
      gsm_init_commands();
 8003db2:	f7ff fdff 	bl	80039b4 <gsm_init_commands>
      gsm.status.power = 1;
 8003db6:	4a2d      	ldr	r2, [pc, #180]	; (8003e6c <gsm_power+0x208>)
 8003db8:	7913      	ldrb	r3, [r2, #4]
 8003dba:	f043 0301 	orr.w	r3, r3, #1
 8003dbe:	7113      	strb	r3, [r2, #4]
      gsm_printf("[GSM] power(%d) done\r\n", on_off);
 8003dc0:	79fb      	ldrb	r3, [r7, #7]
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	482e      	ldr	r0, [pc, #184]	; (8003e80 <gsm_power+0x21c>)
 8003dc6:	f002 ffb9 	bl	8006d3c <iprintf>
      return true;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e048      	b.n	8003e60 <gsm_power+0x1fc>
    }
    else
    {
      gsm_printf("[GSM] power(%d) failed!\r\n", on_off);
 8003dce:	79fb      	ldrb	r3, [r7, #7]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	482d      	ldr	r0, [pc, #180]	; (8003e88 <gsm_power+0x224>)
 8003dd4:	f002 ffb2 	bl	8006d3c <iprintf>
      return false;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	e041      	b.n	8003e60 <gsm_power+0x1fc>
    }
  }
  if ((on_off == false) && (state == 0))
 8003ddc:	79fb      	ldrb	r3, [r7, #7]
 8003dde:	f083 0301 	eor.w	r3, r3, #1
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00e      	beq.n	8003e06 <gsm_power+0x1a2>
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10b      	bne.n	8003e06 <gsm_power+0x1a2>
  {
    gsm_printf("[GSM] power(%d) done\r\n", on_off);
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	4619      	mov	r1, r3
 8003df2:	4823      	ldr	r0, [pc, #140]	; (8003e80 <gsm_power+0x21c>)
 8003df4:	f002 ffa2 	bl	8006d3c <iprintf>
    gsm.status.power = 0;
 8003df8:	4a1c      	ldr	r2, [pc, #112]	; (8003e6c <gsm_power+0x208>)
 8003dfa:	7913      	ldrb	r3, [r2, #4]
 8003dfc:	f36f 0300 	bfc	r3, #0, #1
 8003e00:	7113      	strb	r3, [r2, #4]
    return true;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e02c      	b.n	8003e60 <gsm_power+0x1fc>
  }
  if ((on_off == false) && (state == 1))
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	f083 0301 	eor.w	r3, r3, #1
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d020      	beq.n	8003e54 <gsm_power+0x1f0>
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d11d      	bne.n	8003e54 <gsm_power+0x1f0>
  {
    HAL_GPIO_WritePin(_GSM_KEY_GPIO, _GSM_KEY_PIN, GPIO_PIN_RESET);
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2180      	movs	r1, #128	; 0x80
 8003e1c:	4819      	ldr	r0, [pc, #100]	; (8003e84 <gsm_power+0x220>)
 8003e1e:	f7fd fc11 	bl	8001644 <HAL_GPIO_WritePin>
    gsm_delay(1500);
 8003e22:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003e26:	f001 fb9c 	bl	8005562 <osDelay>
    HAL_GPIO_WritePin(_GSM_KEY_GPIO, _GSM_KEY_PIN, GPIO_PIN_SET);
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	2180      	movs	r1, #128	; 0x80
 8003e2e:	4815      	ldr	r0, [pc, #84]	; (8003e84 <gsm_power+0x220>)
 8003e30:	f7fd fc08 	bl	8001644 <HAL_GPIO_WritePin>
    gsm_delay(3000);
 8003e34:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003e38:	f001 fb93 	bl	8005562 <osDelay>
    gsm.status.power = 0;
 8003e3c:	4a0b      	ldr	r2, [pc, #44]	; (8003e6c <gsm_power+0x208>)
 8003e3e:	7913      	ldrb	r3, [r2, #4]
 8003e40:	f36f 0300 	bfc	r3, #0, #1
 8003e44:	7113      	strb	r3, [r2, #4]
    gsm_printf("[GSM] power(%d) done\r\n", on_off);
 8003e46:	79fb      	ldrb	r3, [r7, #7]
 8003e48:	4619      	mov	r1, r3
 8003e4a:	480d      	ldr	r0, [pc, #52]	; (8003e80 <gsm_power+0x21c>)
 8003e4c:	f002 ff76 	bl	8006d3c <iprintf>
    return true;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e005      	b.n	8003e60 <gsm_power+0x1fc>
  }
  gsm_printf("[GSM] power(%d) failed!\r\n", on_off);
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	4619      	mov	r1, r3
 8003e58:	480b      	ldr	r0, [pc, #44]	; (8003e88 <gsm_power+0x224>)
 8003e5a:	f002 ff6f 	bl	8006d3c <iprintf>
  return false;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	08008a0c 	.word	0x08008a0c
 8003e6c:	20000330 	.word	0x20000330
 8003e70:	080088c0 	.word	0x080088c0
 8003e74:	08008980 	.word	0x08008980
 8003e78:	20000338 	.word	0x20000338
 8003e7c:	20000334 	.word	0x20000334
 8003e80:	08008a24 	.word	0x08008a24
 8003e84:	40020c00 	.word	0x40020c00
 8003e88:	08008a3c 	.word	0x08008a3c

08003e8c <gsm_getSignalQuality_0_to_100>:
  gsm_unlock();
  return true;
}
//###############################################################################################################
uint8_t gsm_getSignalQuality_0_to_100(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b08e      	sub	sp, #56	; 0x38
 8003e90:	af04      	add	r7, sp, #16
  if (gsm_lock(10000) == false)
 8003e92:	f242 7010 	movw	r0, #10000	; 0x2710
 8003e96:	f7ff fe11 	bl	8003abc <gsm_lock>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f083 0301 	eor.w	r3, r3, #1
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d004      	beq.n	8003eb0 <gsm_getSignalQuality_0_to_100+0x24>
  {
    gsm_printf("[GSM] getSignalQuality_0_to_100() failed!\r\n");
 8003ea6:	4829      	ldr	r0, [pc, #164]	; (8003f4c <gsm_getSignalQuality_0_to_100+0xc0>)
 8003ea8:	f002 ffae 	bl	8006e08 <puts>
    return false;
 8003eac:	2300      	movs	r3, #0
 8003eae:	e049      	b.n	8003f44 <gsm_getSignalQuality_0_to_100+0xb8>
  }
  char str[32];
  int16_t p1, p2;
  if (gsm_command("AT+CSQ\r\n", 1000, str, sizeof(str), 2, "\r\n+CSQ:", "\r\nERROR\r\n") != 1)
 8003eb0:	f107 0308 	add.w	r3, r7, #8
 8003eb4:	4a26      	ldr	r2, [pc, #152]	; (8003f50 <gsm_getSignalQuality_0_to_100+0xc4>)
 8003eb6:	9203      	str	r2, [sp, #12]
 8003eb8:	4a26      	ldr	r2, [pc, #152]	; (8003f54 <gsm_getSignalQuality_0_to_100+0xc8>)
 8003eba:	9202      	str	r2, [sp, #8]
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	9201      	str	r2, [sp, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	9200      	str	r2, [sp, #0]
 8003ec4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ec8:	4923      	ldr	r1, [pc, #140]	; (8003f58 <gsm_getSignalQuality_0_to_100+0xcc>)
 8003eca:	4824      	ldr	r0, [pc, #144]	; (8003f5c <gsm_getSignalQuality_0_to_100+0xd0>)
 8003ecc:	f7ff fb84 	bl	80035d8 <atc_command>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d006      	beq.n	8003ee4 <gsm_getSignalQuality_0_to_100+0x58>
  {
    gsm_printf("[GSM] getSignalQuality_0_to_100() failed!\r\n");
 8003ed6:	481d      	ldr	r0, [pc, #116]	; (8003f4c <gsm_getSignalQuality_0_to_100+0xc0>)
 8003ed8:	f002 ff96 	bl	8006e08 <puts>
    gsm_unlock();
 8003edc:	f7ff fe12 	bl	8003b04 <gsm_unlock>
    return 0;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	e02f      	b.n	8003f44 <gsm_getSignalQuality_0_to_100+0xb8>
  }
  if (sscanf(str, "\r\n+CSQ: %hd,%hd\r\n", &p1, &p2) != 2)
 8003ee4:	1d3b      	adds	r3, r7, #4
 8003ee6:	1dba      	adds	r2, r7, #6
 8003ee8:	f107 0008 	add.w	r0, r7, #8
 8003eec:	491c      	ldr	r1, [pc, #112]	; (8003f60 <gsm_getSignalQuality_0_to_100+0xd4>)
 8003eee:	f002 ffb3 	bl	8006e58 <siscanf>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d006      	beq.n	8003f06 <gsm_getSignalQuality_0_to_100+0x7a>
  {
    gsm_printf("[GSM] getSignalQuality_0_to_100() failed!\r\n");
 8003ef8:	4814      	ldr	r0, [pc, #80]	; (8003f4c <gsm_getSignalQuality_0_to_100+0xc0>)
 8003efa:	f002 ff85 	bl	8006e08 <puts>
    gsm_unlock();
 8003efe:	f7ff fe01 	bl	8003b04 <gsm_unlock>
    return 0;
 8003f02:	2300      	movs	r3, #0
 8003f04:	e01e      	b.n	8003f44 <gsm_getSignalQuality_0_to_100+0xb8>
  }
  if (p1 == 99)
 8003f06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f0a:	2b63      	cmp	r3, #99	; 0x63
 8003f0c:	d103      	bne.n	8003f16 <gsm_getSignalQuality_0_to_100+0x8a>
    gsm.signal = 0;
 8003f0e:	4b15      	ldr	r3, [pc, #84]	; (8003f64 <gsm_getSignalQuality_0_to_100+0xd8>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	70da      	strb	r2, [r3, #3]
 8003f14:	e00f      	b.n	8003f36 <gsm_getSignalQuality_0_to_100+0xaa>
  else
    gsm.signal = (p1 * 100) / 31;
 8003f16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	2364      	movs	r3, #100	; 0x64
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	4a11      	ldr	r2, [pc, #68]	; (8003f68 <gsm_getSignalQuality_0_to_100+0xdc>)
 8003f24:	fb82 1203 	smull	r1, r2, r2, r3
 8003f28:	441a      	add	r2, r3
 8003f2a:	1112      	asrs	r2, r2, #4
 8003f2c:	17db      	asrs	r3, r3, #31
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <gsm_getSignalQuality_0_to_100+0xd8>)
 8003f34:	70da      	strb	r2, [r3, #3]
  gsm_printf("[GSM] getSignalQuality_0_to_100() done\r\n");
 8003f36:	480d      	ldr	r0, [pc, #52]	; (8003f6c <gsm_getSignalQuality_0_to_100+0xe0>)
 8003f38:	f002 ff66 	bl	8006e08 <puts>
  gsm_unlock();
 8003f3c:	f7ff fde2 	bl	8003b04 <gsm_unlock>
  return gsm.signal;
 8003f40:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <gsm_getSignalQuality_0_to_100+0xd8>)
 8003f42:	78db      	ldrb	r3, [r3, #3]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3728      	adds	r7, #40	; 0x28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	08008c8c 	.word	0x08008c8c
 8003f50:	080088fc 	.word	0x080088fc
 8003f54:	08008cc4 	.word	0x08008cc4
 8003f58:	08008cb8 	.word	0x08008cb8
 8003f5c:	20000338 	.word	0x20000338
 8003f60:	08008ccc 	.word	0x08008ccc
 8003f64:	20000330 	.word	0x20000330
 8003f68:	84210843 	.word	0x84210843
 8003f6c:	08008ce0 	.word	0x08008ce0

08003f70 <gsm_msg_updateStorage>:
#include "pdu.h"

#if (_GSM_MSG == 1)
//###############################################################################################################
bool gsm_msg_updateStorage(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b096      	sub	sp, #88	; 0x58
 8003f74:	af04      	add	r7, sp, #16
  if (gsm_lock(10000) == false)
 8003f76:	f242 7010 	movw	r0, #10000	; 0x2710
 8003f7a:	f7ff fd9f 	bl	8003abc <gsm_lock>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f083 0301 	eor.w	r3, r3, #1
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d004      	beq.n	8003f94 <gsm_msg_updateStorage+0x24>
  {
    gsm_printf("[GSM] msg_updateStorage() failed!\r\n");
 8003f8a:	4840      	ldr	r0, [pc, #256]	; (800408c <gsm_msg_updateStorage+0x11c>)
 8003f8c:	f002 ff3c 	bl	8006e08 <puts>
    return false;
 8003f90:	2300      	movs	r3, #0
 8003f92:	e077      	b.n	8004084 <gsm_msg_updateStorage+0x114>
  }
  char str[64];
  char s[5];
  if (gsm_command("AT+CPMS?\r\n", 1000 , str, sizeof(str), 2, "\r\n+CPMS:", "\r\nERROR\r\n") != 1)
 8003f94:	f107 0308 	add.w	r3, r7, #8
 8003f98:	4a3d      	ldr	r2, [pc, #244]	; (8004090 <gsm_msg_updateStorage+0x120>)
 8003f9a:	9203      	str	r2, [sp, #12]
 8003f9c:	4a3d      	ldr	r2, [pc, #244]	; (8004094 <gsm_msg_updateStorage+0x124>)
 8003f9e:	9202      	str	r2, [sp, #8]
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	9201      	str	r2, [sp, #4]
 8003fa4:	2240      	movs	r2, #64	; 0x40
 8003fa6:	9200      	str	r2, [sp, #0]
 8003fa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fac:	493a      	ldr	r1, [pc, #232]	; (8004098 <gsm_msg_updateStorage+0x128>)
 8003fae:	483b      	ldr	r0, [pc, #236]	; (800409c <gsm_msg_updateStorage+0x12c>)
 8003fb0:	f7ff fb12 	bl	80035d8 <atc_command>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d006      	beq.n	8003fc8 <gsm_msg_updateStorage+0x58>
  {
    gsm_printf("[GSM] msg_updateStorage() failed!\r\n");
 8003fba:	4834      	ldr	r0, [pc, #208]	; (800408c <gsm_msg_updateStorage+0x11c>)
 8003fbc:	f002 ff24 	bl	8006e08 <puts>
    gsm_unlock();
 8003fc0:	f7ff fda0 	bl	8003b04 <gsm_unlock>
    return false;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	e05d      	b.n	8004084 <gsm_msg_updateStorage+0x114>
  }
  if (sscanf(str, "\r\n+CPMS: \"%[^\"]\",%hd,%hd,", s, &gsm.msg.storageUsed, &gsm.msg.storageTotal) != 3)
 8003fc8:	463a      	mov	r2, r7
 8003fca:	f107 0008 	add.w	r0, r7, #8
 8003fce:	4b34      	ldr	r3, [pc, #208]	; (80040a0 <gsm_msg_updateStorage+0x130>)
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	4b34      	ldr	r3, [pc, #208]	; (80040a4 <gsm_msg_updateStorage+0x134>)
 8003fd4:	4934      	ldr	r1, [pc, #208]	; (80040a8 <gsm_msg_updateStorage+0x138>)
 8003fd6:	f002 ff3f 	bl	8006e58 <siscanf>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b03      	cmp	r3, #3
 8003fde:	d006      	beq.n	8003fee <gsm_msg_updateStorage+0x7e>
  {
    gsm_printf("[GSM] msg_updateStorage() failed!\r\n");
 8003fe0:	482a      	ldr	r0, [pc, #168]	; (800408c <gsm_msg_updateStorage+0x11c>)
 8003fe2:	f002 ff11 	bl	8006e08 <puts>
    gsm_unlock();
 8003fe6:	f7ff fd8d 	bl	8003b04 <gsm_unlock>
    return false;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e04a      	b.n	8004084 <gsm_msg_updateStorage+0x114>
  }
  if (strcmp(s, "SM") == 0)
 8003fee:	463b      	mov	r3, r7
 8003ff0:	492e      	ldr	r1, [pc, #184]	; (80040ac <gsm_msg_updateStorage+0x13c>)
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fc f8ec 	bl	80001d0 <strcmp>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d104      	bne.n	8004008 <gsm_msg_updateStorage+0x98>
    gsm.msg.storage = gsm_msg_store_simcard;
 8003ffe:	4b2c      	ldr	r3, [pc, #176]	; (80040b0 <gsm_msg_updateStorage+0x140>)
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2c0e 	strb.w	r2, [r3, #3086]	; 0xc0e
 8004006:	e037      	b.n	8004078 <gsm_msg_updateStorage+0x108>
  else if (strcmp(s, "ME") == 0)
 8004008:	463b      	mov	r3, r7
 800400a:	492a      	ldr	r1, [pc, #168]	; (80040b4 <gsm_msg_updateStorage+0x144>)
 800400c:	4618      	mov	r0, r3
 800400e:	f7fc f8df 	bl	80001d0 <strcmp>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d104      	bne.n	8004022 <gsm_msg_updateStorage+0xb2>
    gsm.msg.storage = gsm_msg_store_module;
 8004018:	4b25      	ldr	r3, [pc, #148]	; (80040b0 <gsm_msg_updateStorage+0x140>)
 800401a:	2202      	movs	r2, #2
 800401c:	f883 2c0e 	strb.w	r2, [r3, #3086]	; 0xc0e
 8004020:	e02a      	b.n	8004078 <gsm_msg_updateStorage+0x108>
  else if (strcmp(s, "SM_P") == 0)
 8004022:	463b      	mov	r3, r7
 8004024:	4924      	ldr	r1, [pc, #144]	; (80040b8 <gsm_msg_updateStorage+0x148>)
 8004026:	4618      	mov	r0, r3
 8004028:	f7fc f8d2 	bl	80001d0 <strcmp>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d104      	bne.n	800403c <gsm_msg_updateStorage+0xcc>
    gsm.msg.storage = gsm_msg_store_simcard_preferred;
 8004032:	4b1f      	ldr	r3, [pc, #124]	; (80040b0 <gsm_msg_updateStorage+0x140>)
 8004034:	2203      	movs	r2, #3
 8004036:	f883 2c0e 	strb.w	r2, [r3, #3086]	; 0xc0e
 800403a:	e01d      	b.n	8004078 <gsm_msg_updateStorage+0x108>
  else if (strcmp(s, "ME_P") == 0)
 800403c:	463b      	mov	r3, r7
 800403e:	491f      	ldr	r1, [pc, #124]	; (80040bc <gsm_msg_updateStorage+0x14c>)
 8004040:	4618      	mov	r0, r3
 8004042:	f7fc f8c5 	bl	80001d0 <strcmp>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d104      	bne.n	8004056 <gsm_msg_updateStorage+0xe6>
    gsm.msg.storage = gsm_msg_store_module_preferred;
 800404c:	4b18      	ldr	r3, [pc, #96]	; (80040b0 <gsm_msg_updateStorage+0x140>)
 800404e:	2204      	movs	r2, #4
 8004050:	f883 2c0e 	strb.w	r2, [r3, #3086]	; 0xc0e
 8004054:	e010      	b.n	8004078 <gsm_msg_updateStorage+0x108>
  else if (strcmp(s, "MT") == 0)
 8004056:	463b      	mov	r3, r7
 8004058:	4919      	ldr	r1, [pc, #100]	; (80040c0 <gsm_msg_updateStorage+0x150>)
 800405a:	4618      	mov	r0, r3
 800405c:	f7fc f8b8 	bl	80001d0 <strcmp>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d104      	bne.n	8004070 <gsm_msg_updateStorage+0x100>
    gsm.msg.storage = gsm_msg_store_simcard_or_module;
 8004066:	4b12      	ldr	r3, [pc, #72]	; (80040b0 <gsm_msg_updateStorage+0x140>)
 8004068:	2205      	movs	r2, #5
 800406a:	f883 2c0e 	strb.w	r2, [r3, #3086]	; 0xc0e
 800406e:	e003      	b.n	8004078 <gsm_msg_updateStorage+0x108>
  else
    gsm.msg.storage = gsm_msg_store_error;
 8004070:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <gsm_msg_updateStorage+0x140>)
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2c0e 	strb.w	r2, [r3, #3086]	; 0xc0e
  gsm_printf("[GSM] msg_updateStorage() done\r\n");
 8004078:	4812      	ldr	r0, [pc, #72]	; (80040c4 <gsm_msg_updateStorage+0x154>)
 800407a:	f002 fec5 	bl	8006e08 <puts>
  gsm_unlock();
 800407e:	f7ff fd41 	bl	8003b04 <gsm_unlock>
  return true;
 8004082:	2301      	movs	r3, #1
}
 8004084:	4618      	mov	r0, r3
 8004086:	3748      	adds	r7, #72	; 0x48
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	08008edc 	.word	0x08008edc
 8004090:	08008f0c 	.word	0x08008f0c
 8004094:	08008f18 	.word	0x08008f18
 8004098:	08008f00 	.word	0x08008f00
 800409c:	20000338 	.word	0x20000338
 80040a0:	20000f40 	.word	0x20000f40
 80040a4:	20000f42 	.word	0x20000f42
 80040a8:	08008f24 	.word	0x08008f24
 80040ac:	08008f40 	.word	0x08008f40
 80040b0:	20000330 	.word	0x20000330
 80040b4:	08008f44 	.word	0x08008f44
 80040b8:	08008f48 	.word	0x08008f48
 80040bc:	08008f50 	.word	0x08008f50
 80040c0:	08008f58 	.word	0x08008f58
 80040c4:	08008f5c 	.word	0x08008f5c

080040c8 <gsm_msg_textMode>:
  gsm_msg_updateStorage();
  return gsm.msg.storageTotal - gsm.msg.storageUsed;
}
//###############################################################################################################
bool gsm_msg_textMode(bool on_off, bool integer)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af04      	add	r7, sp, #16
 80040ce:	4603      	mov	r3, r0
 80040d0:	460a      	mov	r2, r1
 80040d2:	71fb      	strb	r3, [r7, #7]
 80040d4:	4613      	mov	r3, r2
 80040d6:	71bb      	strb	r3, [r7, #6]
  if (gsm_lock(10000) == false)
 80040d8:	f242 7010 	movw	r0, #10000	; 0x2710
 80040dc:	f7ff fcee 	bl	8003abc <gsm_lock>
 80040e0:	4603      	mov	r3, r0
 80040e2:	f083 0301 	eor.w	r3, r3, #1
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d004      	beq.n	80040f6 <gsm_msg_textMode+0x2e>
  {
    gsm_printf("[GSM] msg_textMode() failed!\r\n");
 80040ec:	4839      	ldr	r0, [pc, #228]	; (80041d4 <gsm_msg_textMode+0x10c>)
 80040ee:	f002 fe8b 	bl	8006e08 <puts>
    return false;
 80040f2:	2300      	movs	r3, #0
 80040f4:	e06a      	b.n	80041cc <gsm_msg_textMode+0x104>
  }
  if (on_off)
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d044      	beq.n	8004186 <gsm_msg_textMode+0xbe>
  {
    if (gsm_command("AT+CMGF=1\r\n", 1000, NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") == 1)
 80040fc:	4b36      	ldr	r3, [pc, #216]	; (80041d8 <gsm_msg_textMode+0x110>)
 80040fe:	9303      	str	r3, [sp, #12]
 8004100:	4b36      	ldr	r3, [pc, #216]	; (80041dc <gsm_msg_textMode+0x114>)
 8004102:	9302      	str	r3, [sp, #8]
 8004104:	2302      	movs	r3, #2
 8004106:	9301      	str	r3, [sp, #4]
 8004108:	2300      	movs	r3, #0
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	2300      	movs	r3, #0
 800410e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004112:	4933      	ldr	r1, [pc, #204]	; (80041e0 <gsm_msg_textMode+0x118>)
 8004114:	4833      	ldr	r0, [pc, #204]	; (80041e4 <gsm_msg_textMode+0x11c>)
 8004116:	f7ff fa5f 	bl	80035d8 <atc_command>
 800411a:	4603      	mov	r3, r0
 800411c:	2b01      	cmp	r3, #1
 800411e:	d14f      	bne.n	80041c0 <gsm_msg_textMode+0xf8>
    {
      gsm.msg.textMode = 1;
 8004120:	4b31      	ldr	r3, [pc, #196]	; (80041e8 <gsm_msg_textMode+0x120>)
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2c0c 	strb.w	r2, [r3, #3084]	; 0xc0c
      if (integer == false)
 8004128:	79bb      	ldrb	r3, [r7, #6]
 800412a:	f083 0301 	eor.w	r3, r3, #1
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d012      	beq.n	800415a <gsm_msg_textMode+0x92>
      {
        gsm_command("AT+CSMP=17,167,0,0\r\n", 1000, NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8004134:	4b28      	ldr	r3, [pc, #160]	; (80041d8 <gsm_msg_textMode+0x110>)
 8004136:	9303      	str	r3, [sp, #12]
 8004138:	4b28      	ldr	r3, [pc, #160]	; (80041dc <gsm_msg_textMode+0x114>)
 800413a:	9302      	str	r3, [sp, #8]
 800413c:	2302      	movs	r3, #2
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	2300      	movs	r3, #0
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	2300      	movs	r3, #0
 8004146:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800414a:	4928      	ldr	r1, [pc, #160]	; (80041ec <gsm_msg_textMode+0x124>)
 800414c:	4825      	ldr	r0, [pc, #148]	; (80041e4 <gsm_msg_textMode+0x11c>)
 800414e:	f7ff fa43 	bl	80035d8 <atc_command>
        gsm_printf("[GSM] msg_textMode() done. text: true, integer: false \r\n");
 8004152:	4827      	ldr	r0, [pc, #156]	; (80041f0 <gsm_msg_textMode+0x128>)
 8004154:	f002 fe58 	bl	8006e08 <puts>
 8004158:	e011      	b.n	800417e <gsm_msg_textMode+0xb6>
      }
      else
      {
        gsm_command("AT+CSMP=17,167,0,8\r\n", 1000, NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 800415a:	4b1f      	ldr	r3, [pc, #124]	; (80041d8 <gsm_msg_textMode+0x110>)
 800415c:	9303      	str	r3, [sp, #12]
 800415e:	4b1f      	ldr	r3, [pc, #124]	; (80041dc <gsm_msg_textMode+0x114>)
 8004160:	9302      	str	r3, [sp, #8]
 8004162:	2302      	movs	r3, #2
 8004164:	9301      	str	r3, [sp, #4]
 8004166:	2300      	movs	r3, #0
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	2300      	movs	r3, #0
 800416c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004170:	4920      	ldr	r1, [pc, #128]	; (80041f4 <gsm_msg_textMode+0x12c>)
 8004172:	481c      	ldr	r0, [pc, #112]	; (80041e4 <gsm_msg_textMode+0x11c>)
 8004174:	f7ff fa30 	bl	80035d8 <atc_command>
        gsm_printf("[GSM] msg_textMode() done. text: true, integer: true \r\n");
 8004178:	481f      	ldr	r0, [pc, #124]	; (80041f8 <gsm_msg_textMode+0x130>)
 800417a:	f002 fe45 	bl	8006e08 <puts>
      }
      gsm_unlock();
 800417e:	f7ff fcc1 	bl	8003b04 <gsm_unlock>
      return true;
 8004182:	2301      	movs	r3, #1
 8004184:	e022      	b.n	80041cc <gsm_msg_textMode+0x104>
    }
  }
  else
  {
    if (gsm_command("AT+CMGF=0\r\n", 1000, NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") == 1)
 8004186:	4b14      	ldr	r3, [pc, #80]	; (80041d8 <gsm_msg_textMode+0x110>)
 8004188:	9303      	str	r3, [sp, #12]
 800418a:	4b14      	ldr	r3, [pc, #80]	; (80041dc <gsm_msg_textMode+0x114>)
 800418c:	9302      	str	r3, [sp, #8]
 800418e:	2302      	movs	r3, #2
 8004190:	9301      	str	r3, [sp, #4]
 8004192:	2300      	movs	r3, #0
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	2300      	movs	r3, #0
 8004198:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800419c:	4917      	ldr	r1, [pc, #92]	; (80041fc <gsm_msg_textMode+0x134>)
 800419e:	4811      	ldr	r0, [pc, #68]	; (80041e4 <gsm_msg_textMode+0x11c>)
 80041a0:	f7ff fa1a 	bl	80035d8 <atc_command>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d10a      	bne.n	80041c0 <gsm_msg_textMode+0xf8>
    {
      gsm.msg.textMode = 0;
 80041aa:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <gsm_msg_textMode+0x120>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2c0c 	strb.w	r2, [r3, #3084]	; 0xc0c
      gsm_printf("[GSM] msg_textMode() done. text: false\r\n");
 80041b2:	4813      	ldr	r0, [pc, #76]	; (8004200 <gsm_msg_textMode+0x138>)
 80041b4:	f002 fe28 	bl	8006e08 <puts>
      gsm_unlock();
 80041b8:	f7ff fca4 	bl	8003b04 <gsm_unlock>
      return true;
 80041bc:	2301      	movs	r3, #1
 80041be:	e005      	b.n	80041cc <gsm_msg_textMode+0x104>
    }
  }
  gsm_printf("[GSM] msg_textMode() failed!\r\n");
 80041c0:	4804      	ldr	r0, [pc, #16]	; (80041d4 <gsm_msg_textMode+0x10c>)
 80041c2:	f002 fe21 	bl	8006e08 <puts>
  gsm_unlock();
 80041c6:	f7ff fc9d 	bl	8003b04 <gsm_unlock>
  return false;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	08008f7c 	.word	0x08008f7c
 80041d8:	08008f0c 	.word	0x08008f0c
 80041dc:	08008fa8 	.word	0x08008fa8
 80041e0:	08008f9c 	.word	0x08008f9c
 80041e4:	20000338 	.word	0x20000338
 80041e8:	20000330 	.word	0x20000330
 80041ec:	08008fb0 	.word	0x08008fb0
 80041f0:	08008fc8 	.word	0x08008fc8
 80041f4:	08009000 	.word	0x08009000
 80041f8:	08009018 	.word	0x08009018
 80041fc:	08009050 	.word	0x08009050
 8004200:	0800905c 	.word	0x0800905c

08004204 <gsm_msg_send>:
  gsm_unlock();
  return false;
}
//###############################################################################################################
bool gsm_msg_send(const char *number, const char *msg)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b092      	sub	sp, #72	; 0x48
 8004208:	af06      	add	r7, sp, #24
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  gsm_printf("[GSM] msg_send() begin\r\n");
 800420e:	487e      	ldr	r0, [pc, #504]	; (8004408 <gsm_msg_send+0x204>)
 8004210:	f002 fdfa 	bl	8006e08 <puts>
  if ((number == NULL) || (msg == NULL))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <gsm_msg_send+0x1c>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d104      	bne.n	800422a <gsm_msg_send+0x26>
  {
    gsm_printf("[GSM] msg_send() failed!\r\n");
 8004220:	487a      	ldr	r0, [pc, #488]	; (800440c <gsm_msg_send+0x208>)
 8004222:	f002 fdf1 	bl	8006e08 <puts>
    return false;
 8004226:	2300      	movs	r3, #0
 8004228:	e0ea      	b.n	8004400 <gsm_msg_send+0x1fc>
  }
  if (gsm_lock(10000) == false)
 800422a:	f242 7010 	movw	r0, #10000	; 0x2710
 800422e:	f7ff fc45 	bl	8003abc <gsm_lock>
 8004232:	4603      	mov	r3, r0
 8004234:	f083 0301 	eor.w	r3, r3, #1
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d004      	beq.n	8004248 <gsm_msg_send+0x44>
  {
    gsm_printf("[GSM] msg_send() failed!\r\n");
 800423e:	4873      	ldr	r0, [pc, #460]	; (800440c <gsm_msg_send+0x208>)
 8004240:	f002 fde2 	bl	8006e08 <puts>
    return false;
 8004244:	2300      	movs	r3, #0
 8004246:	e0db      	b.n	8004400 <gsm_msg_send+0x1fc>
  }

  char str[32];
  // +++ text mode
  if (gsm.msg.textMode == 1)
 8004248:	4b71      	ldr	r3, [pc, #452]	; (8004410 <gsm_msg_send+0x20c>)
 800424a:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	; 0xc0c
 800424e:	2b01      	cmp	r3, #1
 8004250:	d158      	bne.n	8004304 <gsm_msg_send+0x100>
  {
    sprintf(str, "AT+CMGS=\"%s\"\r\n", number);
 8004252:	f107 030c 	add.w	r3, r7, #12
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	496e      	ldr	r1, [pc, #440]	; (8004414 <gsm_msg_send+0x210>)
 800425a:	4618      	mov	r0, r3
 800425c:	f002 fddc 	bl	8006e18 <siprintf>
    if (gsm_command(str, 5000 , NULL, 0, 2, "\r\r\n> ", "\r\nERROR\r\n") != 1)
 8004260:	f107 010c 	add.w	r1, r7, #12
 8004264:	4b6c      	ldr	r3, [pc, #432]	; (8004418 <gsm_msg_send+0x214>)
 8004266:	9303      	str	r3, [sp, #12]
 8004268:	4b6c      	ldr	r3, [pc, #432]	; (800441c <gsm_msg_send+0x218>)
 800426a:	9302      	str	r3, [sp, #8]
 800426c:	2302      	movs	r3, #2
 800426e:	9301      	str	r3, [sp, #4]
 8004270:	2300      	movs	r3, #0
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	2300      	movs	r3, #0
 8004276:	f241 3288 	movw	r2, #5000	; 0x1388
 800427a:	4869      	ldr	r0, [pc, #420]	; (8004420 <gsm_msg_send+0x21c>)
 800427c:	f7ff f9ac 	bl	80035d8 <atc_command>
 8004280:	4603      	mov	r3, r0
 8004282:	2b01      	cmp	r3, #1
 8004284:	d019      	beq.n	80042ba <gsm_msg_send+0xb6>
    {
      sprintf(str, "%c", 27);
 8004286:	f107 030c 	add.w	r3, r7, #12
 800428a:	221b      	movs	r2, #27
 800428c:	4965      	ldr	r1, [pc, #404]	; (8004424 <gsm_msg_send+0x220>)
 800428e:	4618      	mov	r0, r3
 8004290:	f002 fdc2 	bl	8006e18 <siprintf>
      gsm_command(str, 1000, NULL, 0, 0);
 8004294:	f107 010c 	add.w	r1, r7, #12
 8004298:	2300      	movs	r3, #0
 800429a:	9301      	str	r3, [sp, #4]
 800429c:	2300      	movs	r3, #0
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	2300      	movs	r3, #0
 80042a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042a6:	485e      	ldr	r0, [pc, #376]	; (8004420 <gsm_msg_send+0x21c>)
 80042a8:	f7ff f996 	bl	80035d8 <atc_command>
      gsm_printf("[GSM] msg_send() failed!\r\n");
 80042ac:	4857      	ldr	r0, [pc, #348]	; (800440c <gsm_msg_send+0x208>)
 80042ae:	f002 fdab 	bl	8006e08 <puts>
      gsm_unlock();
 80042b2:	f7ff fc27 	bl	8003b04 <gsm_unlock>
      return false;
 80042b6:	2300      	movs	r3, #0
 80042b8:	e0a2      	b.n	8004400 <gsm_msg_send+0x1fc>
    }
    sprintf((char*) gsm.buffer, "%s%c", msg, 26);
 80042ba:	231a      	movs	r3, #26
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	495a      	ldr	r1, [pc, #360]	; (8004428 <gsm_msg_send+0x224>)
 80042c0:	485a      	ldr	r0, [pc, #360]	; (800442c <gsm_msg_send+0x228>)
 80042c2:	f002 fda9 	bl	8006e18 <siprintf>
    if (gsm_command((char*)gsm.buffer, 80000 , NULL, 0, 2, "\r\n+CMGS:", "\r\nERROR\r\n") != 1)
 80042c6:	4b54      	ldr	r3, [pc, #336]	; (8004418 <gsm_msg_send+0x214>)
 80042c8:	9303      	str	r3, [sp, #12]
 80042ca:	4b59      	ldr	r3, [pc, #356]	; (8004430 <gsm_msg_send+0x22c>)
 80042cc:	9302      	str	r3, [sp, #8]
 80042ce:	2302      	movs	r3, #2
 80042d0:	9301      	str	r3, [sp, #4]
 80042d2:	2300      	movs	r3, #0
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	2300      	movs	r3, #0
 80042d8:	4a56      	ldr	r2, [pc, #344]	; (8004434 <gsm_msg_send+0x230>)
 80042da:	4954      	ldr	r1, [pc, #336]	; (800442c <gsm_msg_send+0x228>)
 80042dc:	4850      	ldr	r0, [pc, #320]	; (8004420 <gsm_msg_send+0x21c>)
 80042de:	f7ff f97b 	bl	80035d8 <atc_command>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d006      	beq.n	80042f6 <gsm_msg_send+0xf2>
    {
      gsm_printf("[GSM] msg_send() failed!\r\n");
 80042e8:	4848      	ldr	r0, [pc, #288]	; (800440c <gsm_msg_send+0x208>)
 80042ea:	f002 fd8d 	bl	8006e08 <puts>
      gsm_unlock();
 80042ee:	f7ff fc09 	bl	8003b04 <gsm_unlock>
      return false;
 80042f2:	2300      	movs	r3, #0
 80042f4:	e084      	b.n	8004400 <gsm_msg_send+0x1fc>
    }
    gsm_printf("[GSM] msg_send() done\r\n");
 80042f6:	4850      	ldr	r0, [pc, #320]	; (8004438 <gsm_msg_send+0x234>)
 80042f8:	f002 fd86 	bl	8006e08 <puts>
    gsm_unlock();
 80042fc:	f7ff fc02 	bl	8003b04 <gsm_unlock>
    return true;
 8004300:	2301      	movs	r3, #1
 8004302:	e07d      	b.n	8004400 <gsm_msg_send+0x1fc>
  }
  // --- text mode

  // +++ pdu mode
  else if(gsm.msg.textMode == 0)
 8004304:	4b42      	ldr	r3, [pc, #264]	; (8004410 <gsm_msg_send+0x20c>)
 8004306:	f893 3c0c 	ldrb.w	r3, [r3, #3084]	; 0xc0c
 800430a:	2b00      	cmp	r3, #0
 800430c:	d178      	bne.n	8004400 <gsm_msg_send+0x1fc>
  {		
    int messageLen = PDU_encode(NULL, false, false, false, 0, 0, number, 0, msg, 0);
 800430e:	2300      	movs	r3, #0
 8004310:	9305      	str	r3, [sp, #20]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	9304      	str	r3, [sp, #16]
 8004316:	2300      	movs	r3, #0
 8004318:	9303      	str	r3, [sp, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	9302      	str	r3, [sp, #8]
 800431e:	2300      	movs	r3, #0
 8004320:	9301      	str	r3, [sp, #4]
 8004322:	2300      	movs	r3, #0
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	2300      	movs	r3, #0
 8004328:	2200      	movs	r2, #0
 800432a:	2100      	movs	r1, #0
 800432c:	2000      	movs	r0, #0
 800432e:	f000 fc17 	bl	8004b60 <PDU_encode>
 8004332:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(messageLen > 0)
 8004334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004336:	2b00      	cmp	r3, #0
 8004338:	dd5b      	ble.n	80043f2 <gsm_msg_send+0x1ee>
    {
      sprintf(str, "AT+CMGS=%d\r\n", messageLen);
 800433a:	f107 030c 	add.w	r3, r7, #12
 800433e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004340:	493e      	ldr	r1, [pc, #248]	; (800443c <gsm_msg_send+0x238>)
 8004342:	4618      	mov	r0, r3
 8004344:	f002 fd68 	bl	8006e18 <siprintf>
      if (gsm_command(str, 5000 , NULL, 0, 2, "\r\r\n> ", "\r\nERROR\r\n") != 1)
 8004348:	f107 010c 	add.w	r1, r7, #12
 800434c:	4b32      	ldr	r3, [pc, #200]	; (8004418 <gsm_msg_send+0x214>)
 800434e:	9303      	str	r3, [sp, #12]
 8004350:	4b32      	ldr	r3, [pc, #200]	; (800441c <gsm_msg_send+0x218>)
 8004352:	9302      	str	r3, [sp, #8]
 8004354:	2302      	movs	r3, #2
 8004356:	9301      	str	r3, [sp, #4]
 8004358:	2300      	movs	r3, #0
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	2300      	movs	r3, #0
 800435e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004362:	482f      	ldr	r0, [pc, #188]	; (8004420 <gsm_msg_send+0x21c>)
 8004364:	f7ff f938 	bl	80035d8 <atc_command>
 8004368:	4603      	mov	r3, r0
 800436a:	2b01      	cmp	r3, #1
 800436c:	d019      	beq.n	80043a2 <gsm_msg_send+0x19e>
      {
        sprintf(str, "%c", 27);
 800436e:	f107 030c 	add.w	r3, r7, #12
 8004372:	221b      	movs	r2, #27
 8004374:	492b      	ldr	r1, [pc, #172]	; (8004424 <gsm_msg_send+0x220>)
 8004376:	4618      	mov	r0, r3
 8004378:	f002 fd4e 	bl	8006e18 <siprintf>
        gsm_command(str, 1000, NULL, 0, 0);
 800437c:	f107 010c 	add.w	r1, r7, #12
 8004380:	2300      	movs	r3, #0
 8004382:	9301      	str	r3, [sp, #4]
 8004384:	2300      	movs	r3, #0
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	2300      	movs	r3, #0
 800438a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800438e:	4824      	ldr	r0, [pc, #144]	; (8004420 <gsm_msg_send+0x21c>)
 8004390:	f7ff f922 	bl	80035d8 <atc_command>
        gsm_printf("[GSM] msg_send() failed!\r\n");
 8004394:	481d      	ldr	r0, [pc, #116]	; (800440c <gsm_msg_send+0x208>)
 8004396:	f002 fd37 	bl	8006e08 <puts>
        gsm_unlock();
 800439a:	f7ff fbb3 	bl	8003b04 <gsm_unlock>
        return false;
 800439e:	2300      	movs	r3, #0
 80043a0:	e02e      	b.n	8004400 <gsm_msg_send+0x1fc>
      }
      sprintf((char *)gsm.buffer, "%s%c", PDU_getPDUBuffer(), 26);
 80043a2:	f000 f981 	bl	80046a8 <PDU_getPDUBuffer>
 80043a6:	4602      	mov	r2, r0
 80043a8:	231a      	movs	r3, #26
 80043aa:	491f      	ldr	r1, [pc, #124]	; (8004428 <gsm_msg_send+0x224>)
 80043ac:	481f      	ldr	r0, [pc, #124]	; (800442c <gsm_msg_send+0x228>)
 80043ae:	f002 fd33 	bl	8006e18 <siprintf>
      if(gsm_command((char *)gsm.buffer, 8000, NULL, 0, 2, "\r\n+CMGS:", "\r\nERROR\r\n") != 1)
 80043b2:	4b19      	ldr	r3, [pc, #100]	; (8004418 <gsm_msg_send+0x214>)
 80043b4:	9303      	str	r3, [sp, #12]
 80043b6:	4b1e      	ldr	r3, [pc, #120]	; (8004430 <gsm_msg_send+0x22c>)
 80043b8:	9302      	str	r3, [sp, #8]
 80043ba:	2302      	movs	r3, #2
 80043bc:	9301      	str	r3, [sp, #4]
 80043be:	2300      	movs	r3, #0
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	2300      	movs	r3, #0
 80043c4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80043c8:	4918      	ldr	r1, [pc, #96]	; (800442c <gsm_msg_send+0x228>)
 80043ca:	4815      	ldr	r0, [pc, #84]	; (8004420 <gsm_msg_send+0x21c>)
 80043cc:	f7ff f904 	bl	80035d8 <atc_command>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d006      	beq.n	80043e4 <gsm_msg_send+0x1e0>
      {
        gsm_printf("[GSM] msg_send() failed!\r\n");
 80043d6:	480d      	ldr	r0, [pc, #52]	; (800440c <gsm_msg_send+0x208>)
 80043d8:	f002 fd16 	bl	8006e08 <puts>
        gsm_unlock();
 80043dc:	f7ff fb92 	bl	8003b04 <gsm_unlock>
        return false;
 80043e0:	2300      	movs	r3, #0
 80043e2:	e00d      	b.n	8004400 <gsm_msg_send+0x1fc>
      }
      gsm_printf("[GSM] msg_send() done\r\n");
 80043e4:	4814      	ldr	r0, [pc, #80]	; (8004438 <gsm_msg_send+0x234>)
 80043e6:	f002 fd0f 	bl	8006e08 <puts>
      gsm_unlock();
 80043ea:	f7ff fb8b 	bl	8003b04 <gsm_unlock>
      return true;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e006      	b.n	8004400 <gsm_msg_send+0x1fc>

    }
    gsm_printf("[GSM] msg_send() failed!\r\n");
 80043f2:	4806      	ldr	r0, [pc, #24]	; (800440c <gsm_msg_send+0x208>)
 80043f4:	f002 fd08 	bl	8006e08 <puts>
    gsm_unlock();
 80043f8:	f7ff fb84 	bl	8003b04 <gsm_unlock>
    return false;
 80043fc:	2300      	movs	r3, #0
 80043fe:	e7ff      	b.n	8004400 <gsm_msg_send+0x1fc>
  }
  // --- pdu mode
}
 8004400:	4618      	mov	r0, r3
 8004402:	3730      	adds	r7, #48	; 0x30
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	080091c8 	.word	0x080091c8
 800440c:	080091e0 	.word	0x080091e0
 8004410:	20000330 	.word	0x20000330
 8004414:	080091fc 	.word	0x080091fc
 8004418:	08008f0c 	.word	0x08008f0c
 800441c:	0800920c 	.word	0x0800920c
 8004420:	20000338 	.word	0x20000338
 8004424:	08009214 	.word	0x08009214
 8004428:	08009218 	.word	0x08009218
 800442c:	20000970 	.word	0x20000970
 8004430:	08009220 	.word	0x08009220
 8004434:	00013880 	.word	0x00013880
 8004438:	0800922c 	.word	0x0800922c
 800443c:	08009244 	.word	0x08009244

08004440 <gsm_msg_selectStorage>:
//###############################################################################################################
bool gsm_msg_selectStorage(gsm_msg_store_t gsm_msg_store_)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b096      	sub	sp, #88	; 0x58
 8004444:	af04      	add	r7, sp, #16
 8004446:	4603      	mov	r3, r0
 8004448:	71fb      	strb	r3, [r7, #7]
  if (gsm_lock(10000) == false)
 800444a:	f242 7010 	movw	r0, #10000	; 0x2710
 800444e:	f7ff fb35 	bl	8003abc <gsm_lock>
 8004452:	4603      	mov	r3, r0
 8004454:	f083 0301 	eor.w	r3, r3, #1
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d004      	beq.n	8004468 <gsm_msg_selectStorage+0x28>
  {
    gsm_printf("[GSM] msg_selectStorage() failed!\r\n");
 800445e:	4835      	ldr	r0, [pc, #212]	; (8004534 <gsm_msg_selectStorage+0xf4>)
 8004460:	f002 fcd2 	bl	8006e08 <puts>
    return false;
 8004464:	2300      	movs	r3, #0
 8004466:	e061      	b.n	800452c <gsm_msg_selectStorage+0xec>
  }
  char str[64];
  switch (gsm_msg_store_)
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	3b01      	subs	r3, #1
 800446c:	2b04      	cmp	r3, #4
 800446e:	d830      	bhi.n	80044d2 <gsm_msg_selectStorage+0x92>
 8004470:	a201      	add	r2, pc, #4	; (adr r2, 8004478 <gsm_msg_selectStorage+0x38>)
 8004472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004476:	bf00      	nop
 8004478:	0800448d 	.word	0x0800448d
 800447c:	0800449b 	.word	0x0800449b
 8004480:	080044a9 	.word	0x080044a9
 8004484:	080044b7 	.word	0x080044b7
 8004488:	080044c5 	.word	0x080044c5
  {
  case gsm_msg_store_simcard:
    sprintf(str, "AT+CPMS=\"SM\",\"SM\",\"SM\"\r\n");
 800448c:	f107 0308 	add.w	r3, r7, #8
 8004490:	4929      	ldr	r1, [pc, #164]	; (8004538 <gsm_msg_selectStorage+0xf8>)
 8004492:	4618      	mov	r0, r3
 8004494:	f002 fcc0 	bl	8006e18 <siprintf>
    break;
 8004498:	e022      	b.n	80044e0 <gsm_msg_selectStorage+0xa0>
  case gsm_msg_store_module:
    sprintf(str, "AT+CPMS=\"ME\",\"ME\",\"ME\"\r\n");
 800449a:	f107 0308 	add.w	r3, r7, #8
 800449e:	4927      	ldr	r1, [pc, #156]	; (800453c <gsm_msg_selectStorage+0xfc>)
 80044a0:	4618      	mov	r0, r3
 80044a2:	f002 fcb9 	bl	8006e18 <siprintf>
    break;
 80044a6:	e01b      	b.n	80044e0 <gsm_msg_selectStorage+0xa0>
  case gsm_msg_store_simcard_preferred:
    sprintf(str, "AT+CPMS=\"SM_P\",\"SM_P\",\"SM_P\"\r\n");
 80044a8:	f107 0308 	add.w	r3, r7, #8
 80044ac:	4924      	ldr	r1, [pc, #144]	; (8004540 <gsm_msg_selectStorage+0x100>)
 80044ae:	4618      	mov	r0, r3
 80044b0:	f002 fcb2 	bl	8006e18 <siprintf>
    break;
 80044b4:	e014      	b.n	80044e0 <gsm_msg_selectStorage+0xa0>
  case gsm_msg_store_module_preferred:
    sprintf(str, "AT+CPMS=\"ME_P\",\"ME_P\",\"ME_P\"\r\n");
 80044b6:	f107 0308 	add.w	r3, r7, #8
 80044ba:	4922      	ldr	r1, [pc, #136]	; (8004544 <gsm_msg_selectStorage+0x104>)
 80044bc:	4618      	mov	r0, r3
 80044be:	f002 fcab 	bl	8006e18 <siprintf>
    break;
 80044c2:	e00d      	b.n	80044e0 <gsm_msg_selectStorage+0xa0>
  case gsm_msg_store_simcard_or_module:
    sprintf(str, "AT+CPMS=\"MT\",\"MT\",\"MT\"\r\n");
 80044c4:	f107 0308 	add.w	r3, r7, #8
 80044c8:	491f      	ldr	r1, [pc, #124]	; (8004548 <gsm_msg_selectStorage+0x108>)
 80044ca:	4618      	mov	r0, r3
 80044cc:	f002 fca4 	bl	8006e18 <siprintf>
    break;
 80044d0:	e006      	b.n	80044e0 <gsm_msg_selectStorage+0xa0>
  default:
    gsm_printf("[GSM] msg_selectStorage() failed!\r\n");
 80044d2:	4818      	ldr	r0, [pc, #96]	; (8004534 <gsm_msg_selectStorage+0xf4>)
 80044d4:	f002 fc98 	bl	8006e08 <puts>
    gsm_unlock();
 80044d8:	f7ff fb14 	bl	8003b04 <gsm_unlock>
    return false;
 80044dc:	2300      	movs	r3, #0
 80044de:	e025      	b.n	800452c <gsm_msg_selectStorage+0xec>
  }
  if (gsm_command(str, 1000 , NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") != 1)
 80044e0:	f107 0108 	add.w	r1, r7, #8
 80044e4:	4b19      	ldr	r3, [pc, #100]	; (800454c <gsm_msg_selectStorage+0x10c>)
 80044e6:	9303      	str	r3, [sp, #12]
 80044e8:	4b19      	ldr	r3, [pc, #100]	; (8004550 <gsm_msg_selectStorage+0x110>)
 80044ea:	9302      	str	r3, [sp, #8]
 80044ec:	2302      	movs	r3, #2
 80044ee:	9301      	str	r3, [sp, #4]
 80044f0:	2300      	movs	r3, #0
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	2300      	movs	r3, #0
 80044f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044fa:	4816      	ldr	r0, [pc, #88]	; (8004554 <gsm_msg_selectStorage+0x114>)
 80044fc:	f7ff f86c 	bl	80035d8 <atc_command>
 8004500:	4603      	mov	r3, r0
 8004502:	2b01      	cmp	r3, #1
 8004504:	d006      	beq.n	8004514 <gsm_msg_selectStorage+0xd4>
  {
    gsm_printf("[GSM] msg_selectStorage() failed!\r\n");
 8004506:	480b      	ldr	r0, [pc, #44]	; (8004534 <gsm_msg_selectStorage+0xf4>)
 8004508:	f002 fc7e 	bl	8006e08 <puts>
    gsm_unlock();
 800450c:	f7ff fafa 	bl	8003b04 <gsm_unlock>
    return false;
 8004510:	2300      	movs	r3, #0
 8004512:	e00b      	b.n	800452c <gsm_msg_selectStorage+0xec>
  }
  gsm.msg.storage = gsm_msg_store_;
 8004514:	4a10      	ldr	r2, [pc, #64]	; (8004558 <gsm_msg_selectStorage+0x118>)
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	f882 3c0e 	strb.w	r3, [r2, #3086]	; 0xc0e
  gsm_printf("[GSM] msg_selectStorage() done\r\n");
 800451c:	480f      	ldr	r0, [pc, #60]	; (800455c <gsm_msg_selectStorage+0x11c>)
 800451e:	f002 fc73 	bl	8006e08 <puts>
  gsm_unlock();
 8004522:	f7ff faef 	bl	8003b04 <gsm_unlock>
  gsm_msg_updateStorage();
 8004526:	f7ff fd23 	bl	8003f70 <gsm_msg_updateStorage>
  return true;
 800452a:	2301      	movs	r3, #1
}
 800452c:	4618      	mov	r0, r3
 800452e:	3748      	adds	r7, #72	; 0x48
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	08009254 	.word	0x08009254
 8004538:	08009278 	.word	0x08009278
 800453c:	08009294 	.word	0x08009294
 8004540:	080092b0 	.word	0x080092b0
 8004544:	080092d0 	.word	0x080092d0
 8004548:	080092f0 	.word	0x080092f0
 800454c:	08008f0c 	.word	0x08008f0c
 8004550:	08008fa8 	.word	0x08008fa8
 8004554:	20000338 	.word	0x20000338
 8004558:	20000330 	.word	0x20000330
 800455c:	0800930c 	.word	0x0800930c

08004560 <gsm_msg_selectCharacterSet>:
//###############################################################################################################
bool gsm_msg_selectCharacterSet(gsm_msg_chset_t gsm_msg_chSet_)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b096      	sub	sp, #88	; 0x58
 8004564:	af04      	add	r7, sp, #16
 8004566:	4603      	mov	r3, r0
 8004568:	71fb      	strb	r3, [r7, #7]
  if (gsm_lock(10000) == false)
 800456a:	f242 7010 	movw	r0, #10000	; 0x2710
 800456e:	f7ff faa5 	bl	8003abc <gsm_lock>
 8004572:	4603      	mov	r3, r0
 8004574:	f083 0301 	eor.w	r3, r3, #1
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d004      	beq.n	8004588 <gsm_msg_selectCharacterSet+0x28>
  {
    gsm_printf("[GSM] msg_selectCharacterSet() failed!\r\n");
 800457e:	483d      	ldr	r0, [pc, #244]	; (8004674 <gsm_msg_selectCharacterSet+0x114>)
 8004580:	f002 fc42 	bl	8006e08 <puts>
    return false;
 8004584:	2300      	movs	r3, #0
 8004586:	e071      	b.n	800466c <gsm_msg_selectCharacterSet+0x10c>
  }
  char str[64];
  switch (gsm_msg_chSet_)
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	3b01      	subs	r3, #1
 800458c:	2b06      	cmp	r3, #6
 800458e:	d842      	bhi.n	8004616 <gsm_msg_selectCharacterSet+0xb6>
 8004590:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <gsm_msg_selectCharacterSet+0x38>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045c3 	.word	0x080045c3
 800459c:	080045fb 	.word	0x080045fb
 80045a0:	080045d1 	.word	0x080045d1
 80045a4:	080045ed 	.word	0x080045ed
 80045a8:	080045df 	.word	0x080045df
 80045ac:	08004609 	.word	0x08004609
 80045b0:	080045b5 	.word	0x080045b5
  {
  case gsm_msg_chSet_8859_1:
    sprintf(str, "AT+CSCS=\"8859-1\"\r\n");
 80045b4:	f107 0308 	add.w	r3, r7, #8
 80045b8:	492f      	ldr	r1, [pc, #188]	; (8004678 <gsm_msg_selectCharacterSet+0x118>)
 80045ba:	4618      	mov	r0, r3
 80045bc:	f002 fc2c 	bl	8006e18 <siprintf>
    break;
 80045c0:	e030      	b.n	8004624 <gsm_msg_selectCharacterSet+0xc4>
  case gsm_msg_chSet_gsm:
    sprintf(str, "AT+CSCS=\"GSM\"\r\n");
 80045c2:	f107 0308 	add.w	r3, r7, #8
 80045c6:	492d      	ldr	r1, [pc, #180]	; (800467c <gsm_msg_selectCharacterSet+0x11c>)
 80045c8:	4618      	mov	r0, r3
 80045ca:	f002 fc25 	bl	8006e18 <siprintf>
    break;
 80045ce:	e029      	b.n	8004624 <gsm_msg_selectCharacterSet+0xc4>
  case gsm_msg_chSet_ira:
    sprintf(str, "AT+CSCS=\"IRA\"\r\n");
 80045d0:	f107 0308 	add.w	r3, r7, #8
 80045d4:	492a      	ldr	r1, [pc, #168]	; (8004680 <gsm_msg_selectCharacterSet+0x120>)
 80045d6:	4618      	mov	r0, r3
 80045d8:	f002 fc1e 	bl	8006e18 <siprintf>
    break;
 80045dc:	e022      	b.n	8004624 <gsm_msg_selectCharacterSet+0xc4>
  case gsm_msg_chSet_pccp:
    sprintf(str, "AT+CSCS=\"PCCP\"\r\n");
 80045de:	f107 0308 	add.w	r3, r7, #8
 80045e2:	4928      	ldr	r1, [pc, #160]	; (8004684 <gsm_msg_selectCharacterSet+0x124>)
 80045e4:	4618      	mov	r0, r3
 80045e6:	f002 fc17 	bl	8006e18 <siprintf>
    break;
 80045ea:	e01b      	b.n	8004624 <gsm_msg_selectCharacterSet+0xc4>
  case gsm_msg_chSet_hex:
    sprintf(str, "AT+CSCS=\"HEX\"\r\n");
 80045ec:	f107 0308 	add.w	r3, r7, #8
 80045f0:	4925      	ldr	r1, [pc, #148]	; (8004688 <gsm_msg_selectCharacterSet+0x128>)
 80045f2:	4618      	mov	r0, r3
 80045f4:	f002 fc10 	bl	8006e18 <siprintf>
    break;
 80045f8:	e014      	b.n	8004624 <gsm_msg_selectCharacterSet+0xc4>
  case gsm_msg_chSet_ucs2:
    sprintf(str, "AT+CSCS=\"UCS2\"\r\n");
 80045fa:	f107 0308 	add.w	r3, r7, #8
 80045fe:	4923      	ldr	r1, [pc, #140]	; (800468c <gsm_msg_selectCharacterSet+0x12c>)
 8004600:	4618      	mov	r0, r3
 8004602:	f002 fc09 	bl	8006e18 <siprintf>
    break;
 8004606:	e00d      	b.n	8004624 <gsm_msg_selectCharacterSet+0xc4>
  case gsm_msg_chSet_pcdn:
    sprintf(str, "AT+CSCS=\"PCDN\"\r\n");
 8004608:	f107 0308 	add.w	r3, r7, #8
 800460c:	4920      	ldr	r1, [pc, #128]	; (8004690 <gsm_msg_selectCharacterSet+0x130>)
 800460e:	4618      	mov	r0, r3
 8004610:	f002 fc02 	bl	8006e18 <siprintf>
    break;
 8004614:	e006      	b.n	8004624 <gsm_msg_selectCharacterSet+0xc4>
  default:
    gsm_printf("[GSM] msg_selectCharacterSet() failed!\r\n");
 8004616:	4817      	ldr	r0, [pc, #92]	; (8004674 <gsm_msg_selectCharacterSet+0x114>)
 8004618:	f002 fbf6 	bl	8006e08 <puts>
    gsm_unlock();
 800461c:	f7ff fa72 	bl	8003b04 <gsm_unlock>
    return false;
 8004620:	2300      	movs	r3, #0
 8004622:	e023      	b.n	800466c <gsm_msg_selectCharacterSet+0x10c>
  }
  if (gsm_command(str, 1000 , NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") != 1)
 8004624:	f107 0108 	add.w	r1, r7, #8
 8004628:	4b1a      	ldr	r3, [pc, #104]	; (8004694 <gsm_msg_selectCharacterSet+0x134>)
 800462a:	9303      	str	r3, [sp, #12]
 800462c:	4b1a      	ldr	r3, [pc, #104]	; (8004698 <gsm_msg_selectCharacterSet+0x138>)
 800462e:	9302      	str	r3, [sp, #8]
 8004630:	2302      	movs	r3, #2
 8004632:	9301      	str	r3, [sp, #4]
 8004634:	2300      	movs	r3, #0
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	2300      	movs	r3, #0
 800463a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800463e:	4817      	ldr	r0, [pc, #92]	; (800469c <gsm_msg_selectCharacterSet+0x13c>)
 8004640:	f7fe ffca 	bl	80035d8 <atc_command>
 8004644:	4603      	mov	r3, r0
 8004646:	2b01      	cmp	r3, #1
 8004648:	d006      	beq.n	8004658 <gsm_msg_selectCharacterSet+0xf8>
  {
    gsm_printf("[GSM] msg_selectCharacterSet() failed!\r\n");
 800464a:	480a      	ldr	r0, [pc, #40]	; (8004674 <gsm_msg_selectCharacterSet+0x114>)
 800464c:	f002 fbdc 	bl	8006e08 <puts>
    gsm_unlock();
 8004650:	f7ff fa58 	bl	8003b04 <gsm_unlock>
    return false;
 8004654:	2300      	movs	r3, #0
 8004656:	e009      	b.n	800466c <gsm_msg_selectCharacterSet+0x10c>
  }
  gsm.msg.characterSet = gsm_msg_chSet_;
 8004658:	4a11      	ldr	r2, [pc, #68]	; (80046a0 <gsm_msg_selectCharacterSet+0x140>)
 800465a:	79fb      	ldrb	r3, [r7, #7]
 800465c:	f882 3c0d 	strb.w	r3, [r2, #3085]	; 0xc0d
  gsm_printf("[GSM] msg_selectCharacterSet() done\r\n");
 8004660:	4810      	ldr	r0, [pc, #64]	; (80046a4 <gsm_msg_selectCharacterSet+0x144>)
 8004662:	f002 fbd1 	bl	8006e08 <puts>
  gsm_unlock();
 8004666:	f7ff fa4d 	bl	8003b04 <gsm_unlock>
  return true;
 800466a:	2301      	movs	r3, #1
}
 800466c:	4618      	mov	r0, r3
 800466e:	3748      	adds	r7, #72	; 0x48
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	0800932c 	.word	0x0800932c
 8004678:	08009354 	.word	0x08009354
 800467c:	08009368 	.word	0x08009368
 8004680:	08009378 	.word	0x08009378
 8004684:	08009388 	.word	0x08009388
 8004688:	0800939c 	.word	0x0800939c
 800468c:	080093ac 	.word	0x080093ac
 8004690:	080093c0 	.word	0x080093c0
 8004694:	08008f0c 	.word	0x08008f0c
 8004698:	08008fa8 	.word	0x08008fa8
 800469c:	20000338 	.word	0x20000338
 80046a0:	20000330 	.word	0x20000330
 80046a4:	080093d4 	.word	0x080093d4

080046a8 <PDU_getPDUBuffer>:
    free(pduBuffer);
    //free(deliverHeader.UD);
}

char *PDU_getPDUBuffer()
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
    return pduBuffer;
 80046ac:	4b03      	ldr	r3, [pc, #12]	; (80046bc <PDU_getPDUBuffer+0x14>)
 80046ae:	681b      	ldr	r3, [r3, #0]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	2000101c 	.word	0x2000101c

080046c0 <isPhoneNumberLegal>:
 * @param number
 * @return true If the phone number is correct
 * @return false If the phone number is incorrect
 */
bool isPhoneNumberLegal(const char *number)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
    bool result = true;
 80046c8:	2301      	movs	r3, #1
 80046ca:	75fb      	strb	r3, [r7, #23]
    int size = strlen(number);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7fb fd89 	bl	80001e4 <strlen>
 80046d2:	4603      	mov	r3, r0
 80046d4:	60fb      	str	r3, [r7, #12]
    int i = 0;
 80046d6:	2300      	movs	r3, #0
 80046d8:	613b      	str	r3, [r7, #16]
    while(i++ < size)
 80046da:	e013      	b.n	8004704 <isPhoneNumberLegal+0x44>
    {
        char c = *number++;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	607a      	str	r2, [r7, #4]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	72fb      	strb	r3, [r7, #11]
        if(!(isdigit(c) || c == '+'))
 80046e6:	7afb      	ldrb	r3, [r7, #11]
 80046e8:	3301      	adds	r3, #1
 80046ea:	4a0c      	ldr	r2, [pc, #48]	; (800471c <isPhoneNumberLegal+0x5c>)
 80046ec:	4413      	add	r3, r2
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d105      	bne.n	8004704 <isPhoneNumberLegal+0x44>
 80046f8:	7afb      	ldrb	r3, [r7, #11]
 80046fa:	2b2b      	cmp	r3, #43	; 0x2b
 80046fc:	d002      	beq.n	8004704 <isPhoneNumberLegal+0x44>
        {
            result = false;
 80046fe:	2300      	movs	r3, #0
 8004700:	75fb      	strb	r3, [r7, #23]
            break;
 8004702:	e005      	b.n	8004710 <isPhoneNumberLegal+0x50>
    while(i++ < size)
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	613a      	str	r2, [r7, #16]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	429a      	cmp	r2, r3
 800470e:	dce5      	bgt.n	80046dc <isPhoneNumberLegal+0x1c>
        }
    }
    return result;
 8004710:	7dfb      	ldrb	r3, [r7, #23]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	08009772 	.word	0x08009772

08004720 <stringToBCD>:
 * @param number the phone number
 * @param pdu In fact, it is the same buffer
 * @return none
 */
void stringToBCD(const char *number, int addressLength, char *pdu)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
    int i, tIndex = 0;
 800472c:	2300      	movs	r3, #0
 800472e:	613b      	str	r3, [r7, #16]
    /* Ignore leading '+' */
    if (*number == '+')
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b2b      	cmp	r3, #43	; 0x2b
 8004736:	d102      	bne.n	800473e <stringToBCD+0x1e>
        number++;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3301      	adds	r3, #1
 800473c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < addressLength; i++)
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	e03d      	b.n	80047c0 <stringToBCD+0xa0>
    {
        if ((i & 1) == 1) // odd, upper
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d01f      	beq.n	800478e <stringToBCD+0x6e>
        {
            pdu[tIndex] &= 0x0f;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	4413      	add	r3, r2
 8004754:	781a      	ldrb	r2, [r3, #0]
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	440b      	add	r3, r1
 800475c:	f002 020f 	and.w	r2, r2, #15
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	701a      	strb	r2, [r3, #0]
            pdu[tIndex] += (*number++ - '0') << 4;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	60fa      	str	r2, [r7, #12]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	3b30      	subs	r3, #48	; 0x30
 800476e:	0118      	lsls	r0, r3, #4
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	4413      	add	r3, r2
 8004776:	7819      	ldrb	r1, [r3, #0]
 8004778:	b2c2      	uxtb	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	4403      	add	r3, r0
 8004780:	440a      	add	r2, r1
 8004782:	b2d2      	uxtb	r2, r2
 8004784:	701a      	strb	r2, [r3, #0]
            tIndex++;
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	3301      	adds	r3, #1
 800478a:	613b      	str	r3, [r7, #16]
 800478c:	e015      	b.n	80047ba <stringToBCD+0x9a>
        }
        else
        {
            // prime in case this is the last byte
            pdu[tIndex] = 0xf0;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	4413      	add	r3, r2
 8004794:	22f0      	movs	r2, #240	; 0xf0
 8004796:	701a      	strb	r2, [r3, #0]
            pdu[tIndex] += *number++ - '0';
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	1c5a      	adds	r2, r3, #1
 800479c:	60fa      	str	r2, [r7, #12]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	4413      	add	r3, r2
 80047aa:	7819      	ldrb	r1, [r3, #0]
 80047ac:	b2c2      	uxtb	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	4403      	add	r3, r0
 80047b4:	440a      	add	r2, r1
 80047b6:	b2d2      	uxtb	r2, r2
 80047b8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < addressLength; i++)
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	3301      	adds	r3, #1
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	dbbd      	blt.n	8004744 <stringToBCD+0x24>
        }
    }
}
 80047c8:	bf00      	nop
 80047ca:	bf00      	nop
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
	...

080047d8 <setAddress>:
/**
 * @brief Save recipient phone number, check that it is numeric
 * @return true if valid
*/
bool setAddress(const char *address, PDU_NumberLengthType_t numberLengthType, char *buffer)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	460b      	mov	r3, r1
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	72fb      	strb	r3, [r7, #11]
    int addressLength;
    /* If it is SMSC number and the service number is NULL */
    if((numberLengthType == OCTET) && (address == NULL))
 80047e6:	7afb      	ldrb	r3, [r7, #11]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10e      	bne.n	800480a <setAddress+0x32>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10b      	bne.n	800480a <setAddress+0x32>
    {
        /* set zero, use default service center number */
        buffer[bufferHead++] = 0;
 80047f2:	4b38      	ldr	r3, [pc, #224]	; (80048d4 <setAddress+0xfc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	4936      	ldr	r1, [pc, #216]	; (80048d4 <setAddress+0xfc>)
 80047fa:	600a      	str	r2, [r1, #0]
 80047fc:	461a      	mov	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4413      	add	r3, r2
 8004802:	2200      	movs	r2, #0
 8004804:	701a      	strb	r2, [r3, #0]
        return true;
 8004806:	2301      	movs	r3, #1
 8004808:	e060      	b.n	80048cc <setAddress+0xf4>
    }
    /* sanity check on number format numeric and optional '+' */
    bool result = isPhoneNumberLegal(address);
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f7ff ff58 	bl	80046c0 <isPhoneNumberLegal>
 8004810:	4603      	mov	r3, r0
 8004812:	75fb      	strb	r3, [r7, #23]
    if(result)
 8004814:	7dfb      	ldrb	r3, [r7, #23]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d057      	beq.n	80048ca <setAddress+0xf2>
    {
        PDU_NumberFormat_t numberFormat = NATIONAL_NUMBER;
 800481a:	2381      	movs	r3, #129	; 0x81
 800481c:	75bb      	strb	r3, [r7, #22]
        if(*address == '+')
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	2b2b      	cmp	r3, #43	; 0x2b
 8004824:	d104      	bne.n	8004830 <setAddress+0x58>
        {
            /* Ignore leading '+' */
            address++;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3301      	adds	r3, #1
 800482a:	60fb      	str	r3, [r7, #12]
            numberFormat = INTERNATIONAL_NUMBER;
 800482c:	2391      	movs	r3, #145	; 0x91
 800482e:	75bb      	strb	r3, [r7, #22]
        }
        addressLength = strlen(address);
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f7fb fcd7 	bl	80001e4 <strlen>
 8004836:	4603      	mov	r3, r0
 8004838:	613b      	str	r3, [r7, #16]
        if(addressLength < MAX_NUMBER_LENGTH)
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	2b13      	cmp	r3, #19
 800483e:	dc42      	bgt.n	80048c6 <setAddress+0xee>
        {
            if(numberLengthType == NIBBLES)
 8004840:	7afb      	ldrb	r3, [r7, #11]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d10b      	bne.n	800485e <setAddress+0x86>
                buffer[bufferHead++] = addressLength;
 8004846:	4b23      	ldr	r3, [pc, #140]	; (80048d4 <setAddress+0xfc>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	4921      	ldr	r1, [pc, #132]	; (80048d4 <setAddress+0xfc>)
 800484e:	600a      	str	r2, [r1, #0]
 8004850:	461a      	mov	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4413      	add	r3, r2
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	701a      	strb	r2, [r3, #0]
 800485c:	e010      	b.n	8004880 <setAddress+0xa8>
            else
                buffer[bufferHead++] =((addressLength +1 ) / 2) + 1;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	3301      	adds	r3, #1
 8004862:	0fda      	lsrs	r2, r3, #31
 8004864:	4413      	add	r3, r2
 8004866:	105b      	asrs	r3, r3, #1
 8004868:	b2da      	uxtb	r2, r3
 800486a:	4b1a      	ldr	r3, [pc, #104]	; (80048d4 <setAddress+0xfc>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	1c59      	adds	r1, r3, #1
 8004870:	4818      	ldr	r0, [pc, #96]	; (80048d4 <setAddress+0xfc>)
 8004872:	6001      	str	r1, [r0, #0]
 8004874:	4619      	mov	r1, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	440b      	add	r3, r1
 800487a:	3201      	adds	r2, #1
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	701a      	strb	r2, [r3, #0]

            buffer[bufferHead++] = numberFormat;
 8004880:	4b14      	ldr	r3, [pc, #80]	; (80048d4 <setAddress+0xfc>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	4913      	ldr	r1, [pc, #76]	; (80048d4 <setAddress+0xfc>)
 8004888:	600a      	str	r2, [r1, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4413      	add	r3, r2
 8004890:	7dba      	ldrb	r2, [r7, #22]
 8004892:	701a      	strb	r2, [r3, #0]
            stringToBCD(address, addressLength, &buffer[bufferHead]);
 8004894:	4b0f      	ldr	r3, [pc, #60]	; (80048d4 <setAddress+0xfc>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4413      	add	r3, r2
 800489e:	461a      	mov	r2, r3
 80048a0:	6939      	ldr	r1, [r7, #16]
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f7ff ff3c 	bl	8004720 <stringToBCD>
            bufferHead += (strlen(address) + 1) / 2;
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f7fb fc9b 	bl	80001e4 <strlen>
 80048ae:	4603      	mov	r3, r0
 80048b0:	3301      	adds	r3, #1
 80048b2:	085b      	lsrs	r3, r3, #1
 80048b4:	4a07      	ldr	r2, [pc, #28]	; (80048d4 <setAddress+0xfc>)
 80048b6:	6812      	ldr	r2, [r2, #0]
 80048b8:	4413      	add	r3, r2
 80048ba:	461a      	mov	r2, r3
 80048bc:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <setAddress+0xfc>)
 80048be:	601a      	str	r2, [r3, #0]
            result = true;
 80048c0:	2301      	movs	r3, #1
 80048c2:	75fb      	strb	r3, [r7, #23]
 80048c4:	e001      	b.n	80048ca <setAddress+0xf2>
        }
        else
            result = false;
 80048c6:	2300      	movs	r3, #0
 80048c8:	75fb      	strb	r3, [r7, #23]
    }
    return result;
 80048ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	20001018 	.word	0x20001018

080048d8 <buildUDH>:
 * @param va_list first param should be IEI Predefined sound
 *              second param and next contains data
 * @return
 */
int buildUDH(char *udhBuffer, int items, va_list tag)
{
 80048d8:	b480      	push	{r7}
 80048da:	b089      	sub	sp, #36	; 0x24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
    int udhBufferPointer = 0, tmp;
 80048e4:	2300      	movs	r3, #0
 80048e6:	61fb      	str	r3, [r7, #28]
    //va_list tag;
    //va_start(tag, items);
    /* IEI: Predefined sound */
    int val = va_arg(tag, int);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	1d1a      	adds	r2, r3, #4
 80048ec:	607a      	str	r2, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	61bb      	str	r3, [r7, #24]
    switch (val)
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	f200 812b 	bhi.w	8004b50 <buildUDH+0x278>
 80048fa:	a201      	add	r2, pc, #4	; (adr r2, 8004900 <buildUDH+0x28>)
 80048fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004900:	08004925 	.word	0x08004925
 8004904:	08004b51 	.word	0x08004b51
 8004908:	08004b51 	.word	0x08004b51
 800490c:	08004b51 	.word	0x08004b51
 8004910:	080049a7 	.word	0x080049a7
 8004914:	08004a11 	.word	0x08004a11
 8004918:	08004b51 	.word	0x08004b51
 800491c:	08004b51 	.word	0x08004b51
 8004920:	08004aab 	.word	0x08004aab
    {
        case 0: /* Concatenated short messages, 8-bit reference number	 */
            /* length = 3 */
            if(items == 3+1)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b04      	cmp	r3, #4
 8004928:	f040 810b 	bne.w	8004b42 <buildUDH+0x26a>
            {
                udhBuffer[udhBufferPointer++] = 5; // UDH Length
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	61fa      	str	r2, [r7, #28]
 8004932:	461a      	mov	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4413      	add	r3, r2
 8004938:	2205      	movs	r2, #5
 800493a:	701a      	strb	r2, [r3, #0]
                udhBuffer[udhBufferPointer++] = 0; // IEI
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	61fa      	str	r2, [r7, #28]
 8004942:	461a      	mov	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4413      	add	r3, r2
 8004948:	2200      	movs	r2, #0
 800494a:	701a      	strb	r2, [r3, #0]
                udhBuffer[udhBufferPointer++] = 3; // IEI Length
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	61fa      	str	r2, [r7, #28]
 8004952:	461a      	mov	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4413      	add	r3, r2
 8004958:	2203      	movs	r2, #3
 800495a:	701a      	strb	r2, [r3, #0]
                udhBuffer[udhBufferPointer++] = va_arg(tag, int); // CSMS
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	1d1a      	adds	r2, r3, #4
 8004960:	607a      	str	r2, [r7, #4]
 8004962:	6819      	ldr	r1, [r3, #0]
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	61fa      	str	r2, [r7, #28]
 800496a:	461a      	mov	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4413      	add	r3, r2
 8004970:	b2ca      	uxtb	r2, r1
 8004972:	701a      	strb	r2, [r3, #0]
                udhBuffer[udhBufferPointer++] = va_arg(tag, int); // num parts
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	1d1a      	adds	r2, r3, #4
 8004978:	607a      	str	r2, [r7, #4]
 800497a:	6819      	ldr	r1, [r3, #0]
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	61fa      	str	r2, [r7, #28]
 8004982:	461a      	mov	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4413      	add	r3, r2
 8004988:	b2ca      	uxtb	r2, r1
 800498a:	701a      	strb	r2, [r3, #0]
                udhBuffer[udhBufferPointer++] = va_arg(tag, int); // part number
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	1d1a      	adds	r2, r3, #4
 8004990:	607a      	str	r2, [r7, #4]
 8004992:	6819      	ldr	r1, [r3, #0]
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	61fa      	str	r2, [r7, #28]
 800499a:	461a      	mov	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4413      	add	r3, r2
 80049a0:	b2ca      	uxtb	r2, r1
 80049a2:	701a      	strb	r2, [r3, #0]
            }
            break;
 80049a4:	e0cd      	b.n	8004b42 <buildUDH+0x26a>
        case 1: /* Special SMS Message Indication */
            /* length = 2 */
            break;
        case 4: /* Application port addressing scheme, 8-bit address */
            /* length = 2 */
            if(items == 2+1)
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	f040 80cc 	bne.w	8004b46 <buildUDH+0x26e>
            {
                udhBuffer[udhBufferPointer++] = 6; // UDH Length
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	61fa      	str	r2, [r7, #28]
 80049b4:	461a      	mov	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4413      	add	r3, r2
 80049ba:	2206      	movs	r2, #6
 80049bc:	701a      	strb	r2, [r3, #0]
                udhBuffer[udhBufferPointer++] = 4; // IEI
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	61fa      	str	r2, [r7, #28]
 80049c4:	461a      	mov	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4413      	add	r3, r2
 80049ca:	2204      	movs	r2, #4
 80049cc:	701a      	strb	r2, [r3, #0]
                udhBuffer[udhBufferPointer++] = 2; // IEI Length
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	61fa      	str	r2, [r7, #28]
 80049d4:	461a      	mov	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4413      	add	r3, r2
 80049da:	2202      	movs	r2, #2
 80049dc:	701a      	strb	r2, [r3, #0]
                udhBuffer[udhBufferPointer++] = va_arg(tag, int); // Source Port
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	1d1a      	adds	r2, r3, #4
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	6819      	ldr	r1, [r3, #0]
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	61fa      	str	r2, [r7, #28]
 80049ec:	461a      	mov	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4413      	add	r3, r2
 80049f2:	b2ca      	uxtb	r2, r1
 80049f4:	701a      	strb	r2, [r3, #0]
                udhBuffer[udhBufferPointer++] = va_arg(tag, int); // Destination Port
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	1d1a      	adds	r2, r3, #4
 80049fa:	607a      	str	r2, [r7, #4]
 80049fc:	6819      	ldr	r1, [r3, #0]
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	61fa      	str	r2, [r7, #28]
 8004a04:	461a      	mov	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4413      	add	r3, r2
 8004a0a:	b2ca      	uxtb	r2, r1
 8004a0c:	701a      	strb	r2, [r3, #0]
            }
            break;
 8004a0e:	e09a      	b.n	8004b46 <buildUDH+0x26e>
        case 5: /* Application port addressing scheme, 16-bit address	 */
            /* length = 4 */
            if(items == 2+1)
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2b03      	cmp	r3, #3
 8004a14:	f040 8099 	bne.w	8004b4a <buildUDH+0x272>
            {
                udhBuffer[udhBufferPointer++] = 6; // UDH Length
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	61fa      	str	r2, [r7, #28]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	2206      	movs	r2, #6
 8004a26:	701a      	strb	r2, [r3, #0]
                udhBuffer[udhBufferPointer++] = 5; // IEI
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	61fa      	str	r2, [r7, #28]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4413      	add	r3, r2
 8004a34:	2205      	movs	r2, #5
 8004a36:	701a      	strb	r2, [r3, #0]
                udhBuffer[udhBufferPointer++] = 4; // IEI Length
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	61fa      	str	r2, [r7, #28]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	2204      	movs	r2, #4
 8004a46:	701a      	strb	r2, [r3, #0]
                tmp = va_arg(tag, int);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	1d1a      	adds	r2, r3, #4
 8004a4c:	607a      	str	r2, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	617b      	str	r3, [r7, #20]
                udhBuffer[udhBufferPointer++] = tmp >> 8; // Source Port high byte
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	1219      	asrs	r1, r3, #8
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	61fa      	str	r2, [r7, #28]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4413      	add	r3, r2
 8004a62:	b2ca      	uxtb	r2, r1
 8004a64:	701a      	strb	r2, [r3, #0]
                udhBuffer[udhBufferPointer++] = tmp & 0xff; // Source Port low byte
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	61fa      	str	r2, [r7, #28]
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4413      	add	r3, r2
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	b2d2      	uxtb	r2, r2
 8004a76:	701a      	strb	r2, [r3, #0]
                tmp = va_arg(tag, int);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	1d1a      	adds	r2, r3, #4
 8004a7c:	607a      	str	r2, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	617b      	str	r3, [r7, #20]
                udhBuffer[udhBufferPointer++] = tmp >> 8; // Destination Port high byte
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	1219      	asrs	r1, r3, #8
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	61fa      	str	r2, [r7, #28]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4413      	add	r3, r2
 8004a92:	b2ca      	uxtb	r2, r1
 8004a94:	701a      	strb	r2, [r3, #0]
                udhBuffer[udhBufferPointer++] = tmp & 0xff; // Destination Port low byte
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	1c5a      	adds	r2, r3, #1
 8004a9a:	61fa      	str	r2, [r7, #28]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	701a      	strb	r2, [r3, #0]
            }
            break;
 8004aa8:	e04f      	b.n	8004b4a <buildUDH+0x272>
        case 8: /* Concatenated short messages, 16-bit reference number	 */
            /* length = 4 */
            if(items == 3+1)
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d14e      	bne.n	8004b4e <buildUDH+0x276>
            {
                udhBuffer[udhBufferPointer++] = 6; // UDH Length
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	61fa      	str	r2, [r7, #28]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	2206      	movs	r2, #6
 8004abe:	701a      	strb	r2, [r3, #0]
                udhBuffer[udhBufferPointer++] = 8; // IEI
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	61fa      	str	r2, [r7, #28]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	2208      	movs	r2, #8
 8004ace:	701a      	strb	r2, [r3, #0]
                udhBuffer[udhBufferPointer++] = 4; // IEI Length
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	61fa      	str	r2, [r7, #28]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4413      	add	r3, r2
 8004adc:	2204      	movs	r2, #4
 8004ade:	701a      	strb	r2, [r3, #0]
                tmp = va_arg(tag, int);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	1d1a      	adds	r2, r3, #4
 8004ae4:	607a      	str	r2, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	617b      	str	r3, [r7, #20]
                udhBuffer[udhBufferPointer++] = tmp >> 8; // CSMS high byte
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	1219      	asrs	r1, r3, #8
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	61fa      	str	r2, [r7, #28]
 8004af4:	461a      	mov	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4413      	add	r3, r2
 8004afa:	b2ca      	uxtb	r2, r1
 8004afc:	701a      	strb	r2, [r3, #0]
                udhBuffer[udhBufferPointer++] = tmp & 0xff; // CSMS low byte
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	61fa      	str	r2, [r7, #28]
 8004b04:	461a      	mov	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4413      	add	r3, r2
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	701a      	strb	r2, [r3, #0]
                udhBuffer[udhBufferPointer++] = va_arg(tag, int); // num parts
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	1d1a      	adds	r2, r3, #4
 8004b14:	607a      	str	r2, [r7, #4]
 8004b16:	6819      	ldr	r1, [r3, #0]
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	61fa      	str	r2, [r7, #28]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4413      	add	r3, r2
 8004b24:	b2ca      	uxtb	r2, r1
 8004b26:	701a      	strb	r2, [r3, #0]
                udhBuffer[udhBufferPointer++] = va_arg(tag, int); // part number
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	1d1a      	adds	r2, r3, #4
 8004b2c:	607a      	str	r2, [r7, #4]
 8004b2e:	6819      	ldr	r1, [r3, #0]
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	61fa      	str	r2, [r7, #28]
 8004b36:	461a      	mov	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	b2ca      	uxtb	r2, r1
 8004b3e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8004b40:	e005      	b.n	8004b4e <buildUDH+0x276>
            break;
 8004b42:	bf00      	nop
 8004b44:	e004      	b.n	8004b50 <buildUDH+0x278>
            break;
 8004b46:	bf00      	nop
 8004b48:	e002      	b.n	8004b50 <buildUDH+0x278>
            break;
 8004b4a:	bf00      	nop
 8004b4c:	e000      	b.n	8004b50 <buildUDH+0x278>
            break;
 8004b4e:	bf00      	nop
        default:
            ;
    }
    va_end(tag);
    return udhBufferPointer;
 8004b50:	69fb      	ldr	r3, [r7, #28]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3724      	adds	r7, #36	; 0x24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop

08004b60 <PDU_encode>:
 * @param message
 * @return sms length without SCA
 * @return < 0 If invalid in anyway
 */
int PDU_encode(const char *SCA, bool ReplayPath, bool headerPresent, bool statusReport, PDU_VPF_t VPF_Format, int messageReference, const char *recipient, int VPF_Value, const char *message, int items, ...)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b0c2      	sub	sp, #264	; 0x108
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	4608      	mov	r0, r1
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4603      	mov	r3, r0
 8004b70:	70fb      	strb	r3, [r7, #3]
 8004b72:	460b      	mov	r3, r1
 8004b74:	70bb      	strb	r3, [r7, #2]
 8004b76:	4613      	mov	r3, r2
 8004b78:	707b      	strb	r3, [r7, #1]
    char udhBuffer[10];
    char tempBuffer[PDU_BINARY_MAX_LENGTH];
    const char *savem = message;
 8004b7a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004b7e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    int length = -1;
 8004b82:	f04f 33ff 	mov.w	r3, #4294967295
 8004b86:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    bufferHead = 0;
 8004b8a:	4bb6      	ldr	r3, [pc, #728]	; (8004e64 <PDU_encode+0x304>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]
    message_length = 0;
 8004b90:	4bb5      	ldr	r3, [pc, #724]	; (8004e68 <PDU_encode+0x308>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
    PDU_DataCodingScheme_t DCS = DCS_7BIT;
 8004b96:	2300      	movs	r3, #0
 8004b98:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb

    /* proper way to check if entire message default GSM 7 bit
      scan UTF8 string, check each UCS2, bail out on 1st non-GSM7 value
    */
    bool gsm7bit = true;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
    while (*message && gsm7bit)
 8004ba2:	e026      	b.n	8004bf2 <PDU_encode+0x92>
    {
        unsigned short ucs2[2], target; // allow for surrogate pair
        int length = utf8Length(message);
 8004ba4:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8004ba8:	f000 fb62 	bl	8005270 <utf8Length>
 8004bac:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        utf8_to_ucs2_single(message, ucs2); // translate to a single ucs2
 8004bb0:	f107 0310 	add.w	r3, r7, #16
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8004bba:	f000 fba3 	bl	8005304 <utf8_to_ucs2_single>
        // UCS2 is bigendian, swap to little endian
        target = (ucs2[0] << 8) | ((ucs2[0] & 0xff00) >> 8);
 8004bbe:	8a3b      	ldrh	r3, [r7, #16]
 8004bc0:	021b      	lsls	r3, r3, #8
 8004bc2:	b21a      	sxth	r2, r3
 8004bc4:	8a3b      	ldrh	r3, [r7, #16]
 8004bc6:	0a1b      	lsrs	r3, r3, #8
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	b21b      	sxth	r3, r3
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	b21b      	sxth	r3, r3
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	81fb      	strh	r3, [r7, #14]
        gsm7bit = isGSM7(&target);
 8004bd4:	f107 030e 	add.w	r3, r7, #14
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 f9d1 	bl	8004f80 <isGSM7>
 8004bde:	4603      	mov	r3, r0
 8004be0:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
        message += length; // bump to next
 8004be4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004be8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004bec:	4413      	add	r3, r2
 8004bee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    while (*message && gsm7bit)
 8004bf2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <PDU_encode+0xa4>
 8004bfc:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1cf      	bne.n	8004ba4 <PDU_encode+0x44>
    }
    if (!gsm7bit)
 8004c04:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8004c08:	f083 0301 	eor.w	r3, r3, #1
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <PDU_encode+0xb8>
        DCS = DCS_16BIT;
 8004c12:	2308      	movs	r3, #8
 8004c14:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb

    /* Set SMSC Address */
    if(!setAddress(SCA, OCTET, tempBuffer))
 8004c18:	f107 0318 	add.w	r3, r7, #24
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	2100      	movs	r1, #0
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7ff fdd9 	bl	80047d8 <setAddress>
 8004c26:	4603      	mov	r3, r0
 8004c28:	f083 0301 	eor.w	r3, r3, #1
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d002      	beq.n	8004c38 <PDU_encode+0xd8>
        return ADDRESS_FORMAT; // bail out now
 8004c32:	f06f 0304 	mvn.w	r3, #4
 8004c36:	e196      	b.n	8004f66 <PDU_encode+0x406>
    else
        message_length = bufferHead;
 8004c38:	4b8a      	ldr	r3, [pc, #552]	; (8004e64 <PDU_encode+0x304>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a8a      	ldr	r2, [pc, #552]	; (8004e68 <PDU_encode+0x308>)
 8004c3e:	6013      	str	r3, [r2, #0]
    /* Set PDU-Type */
    int pdu_type = MTI_SMS_SUBMIT;
 8004c40:	2301      	movs	r3, #1
 8004c42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    if(headerPresent)
 8004c46:	78bb      	ldrb	r3, [r7, #2]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <PDU_encode+0xf8>
        pdu_type |= (1<<UDHI_BIT);
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c54:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    if(ReplayPath)
 8004c58:	78fb      	ldrb	r3, [r7, #3]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d005      	beq.n	8004c6a <PDU_encode+0x10a>
        pdu_type |= (1<<RP_BIT);
 8004c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c66:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    if(statusReport)
 8004c6a:	787b      	ldrb	r3, [r7, #1]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <PDU_encode+0x11c>
        pdu_type |= (1<<SRI_BIT);
 8004c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c74:	f043 0320 	orr.w	r3, r3, #32
 8004c78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    if(VPF_Format != VPF_NOT_PRESENT)
 8004c7c:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d007      	beq.n	8004c94 <PDU_encode+0x134>
        pdu_type |= (VPF_Format << VPF_BIT);
 8004c84:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    tempBuffer[bufferHead++] = pdu_type;
 8004c94:	4b73      	ldr	r3, [pc, #460]	; (8004e64 <PDU_encode+0x304>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	4972      	ldr	r1, [pc, #456]	; (8004e64 <PDU_encode+0x304>)
 8004c9c:	600a      	str	r2, [r1, #0]
 8004c9e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004ca8:	443b      	add	r3, r7
 8004caa:	f803 2ce8 	strb.w	r2, [r3, #-232]
    /* Set Message Reference */
    tempBuffer[bufferHead++] = 0;
 8004cae:	4b6d      	ldr	r3, [pc, #436]	; (8004e64 <PDU_encode+0x304>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	496b      	ldr	r1, [pc, #428]	; (8004e64 <PDU_encode+0x304>)
 8004cb6:	600a      	str	r2, [r1, #0]
 8004cb8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004cbc:	443b      	add	r3, r7
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f803 2ce8 	strb.w	r2, [r3, #-232]
    /* Set Destination Address */
    if(!setAddress(recipient, NIBBLES, tempBuffer))
 8004cc4:	f107 0318 	add.w	r3, r7, #24
 8004cc8:	461a      	mov	r2, r3
 8004cca:	2101      	movs	r1, #1
 8004ccc:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8004cd0:	f7ff fd82 	bl	80047d8 <setAddress>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	f083 0301 	eor.w	r3, r3, #1
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <PDU_encode+0x186>
        return ADDRESS_FORMAT;
 8004ce0:	f06f 0304 	mvn.w	r3, #4
 8004ce4:	e13f      	b.n	8004f66 <PDU_encode+0x406>
    /* Set PID */
    tempBuffer[bufferHead++] = PID_SHORT_MESSAGE;
 8004ce6:	4b5f      	ldr	r3, [pc, #380]	; (8004e64 <PDU_encode+0x304>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	1c5a      	adds	r2, r3, #1
 8004cec:	495d      	ldr	r1, [pc, #372]	; (8004e64 <PDU_encode+0x304>)
 8004cee:	600a      	str	r2, [r1, #0]
 8004cf0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004cf4:	443b      	add	r3, r7
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f803 2ce8 	strb.w	r2, [r3, #-232]
    /* Set Data Coding Schema */
    int UDL_PlaceHolder = 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    switch (DCS)
 8004d02:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8004d06:	2b08      	cmp	r3, #8
 8004d08:	d01e      	beq.n	8004d48 <PDU_encode+0x1e8>
 8004d0a:	2b08      	cmp	r3, #8
 8004d0c:	dc28      	bgt.n	8004d60 <PDU_encode+0x200>
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <PDU_encode+0x1b8>
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d00c      	beq.n	8004d30 <PDU_encode+0x1d0>
 8004d16:	e023      	b.n	8004d60 <PDU_encode+0x200>
    {
        case DCS_7BIT:
            tempBuffer[bufferHead++] = DCS_7BIT; break;
 8004d18:	4b52      	ldr	r3, [pc, #328]	; (8004e64 <PDU_encode+0x304>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	4951      	ldr	r1, [pc, #324]	; (8004e64 <PDU_encode+0x304>)
 8004d20:	600a      	str	r2, [r1, #0]
 8004d22:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004d26:	443b      	add	r3, r7
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f803 2ce8 	strb.w	r2, [r3, #-232]
 8004d2e:	e017      	b.n	8004d60 <PDU_encode+0x200>
        case DCS_8BIT:
            tempBuffer[bufferHead++] = DCS_8BIT; break;
 8004d30:	4b4c      	ldr	r3, [pc, #304]	; (8004e64 <PDU_encode+0x304>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	1c5a      	adds	r2, r3, #1
 8004d36:	494b      	ldr	r1, [pc, #300]	; (8004e64 <PDU_encode+0x304>)
 8004d38:	600a      	str	r2, [r1, #0]
 8004d3a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004d3e:	443b      	add	r3, r7
 8004d40:	2204      	movs	r2, #4
 8004d42:	f803 2ce8 	strb.w	r2, [r3, #-232]
 8004d46:	e00b      	b.n	8004d60 <PDU_encode+0x200>
        case DCS_16BIT:
            tempBuffer[bufferHead++] = DCS_16BIT; break;
 8004d48:	4b46      	ldr	r3, [pc, #280]	; (8004e64 <PDU_encode+0x304>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	1c5a      	adds	r2, r3, #1
 8004d4e:	4945      	ldr	r1, [pc, #276]	; (8004e64 <PDU_encode+0x304>)
 8004d50:	600a      	str	r2, [r1, #0]
 8004d52:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004d56:	443b      	add	r3, r7
 8004d58:	2208      	movs	r2, #8
 8004d5a:	f803 2ce8 	strb.w	r2, [r3, #-232]
 8004d5e:	bf00      	nop
    }
    /* Set Validity Period */
    if(VPF_Format != VPF_NOT_PRESENT)
 8004d60:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00c      	beq.n	8004d82 <PDU_encode+0x222>
    {
        tempBuffer[bufferHead++] = VPF_Value;
 8004d68:	4b3e      	ldr	r3, [pc, #248]	; (8004e64 <PDU_encode+0x304>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	493d      	ldr	r1, [pc, #244]	; (8004e64 <PDU_encode+0x304>)
 8004d70:	600a      	str	r2, [r1, #0]
 8004d72:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004d7c:	443b      	add	r3, r7
 8004d7e:	f803 2ce8 	strb.w	r2, [r3, #-232]
        /*int vpfSize = calculateVP(VPF_Value, tempBuffer);
        bufferHead += vpfSize;*///TODO
    }
    /* Save UDL index in tempBuffer */
    UDL_PlaceHolder = bufferHead;
 8004d82:	4b38      	ldr	r3, [pc, #224]	; (8004e64 <PDU_encode+0x304>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    /* Skip UDL index in tempBuffer */
    tempBuffer[bufferHead++] = 1;
 8004d8a:	4b36      	ldr	r3, [pc, #216]	; (8004e64 <PDU_encode+0x304>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	4934      	ldr	r1, [pc, #208]	; (8004e64 <PDU_encode+0x304>)
 8004d92:	600a      	str	r2, [r1, #0]
 8004d94:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004d98:	443b      	add	r3, r7
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f803 2ce8 	strb.w	r2, [r3, #-232]
    /* Build UDH */
    int udhSize;
    if(!headerPresent)
 8004da0:	78bb      	ldrb	r3, [r7, #2]
 8004da2:	f083 0301 	eor.w	r3, r3, #1
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <PDU_encode+0x254>
        udhSize = 0;
 8004dac:	2300      	movs	r3, #0
 8004dae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004db2:	e00c      	b.n	8004dce <PDU_encode+0x26e>
    else
    {
        va_list args;
        va_start(args,items);
 8004db4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004db8:	60bb      	str	r3, [r7, #8]
            udhSize = buildUDH(udhBuffer, items, args);
 8004dba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7ff fd87 	bl	80048d8 <buildUDH>
 8004dca:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
        va_end(args);
    }
    /* Set UDL & Set UDH & Set message */
    int delta = -1;
 8004dce:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    int septetCount = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
    switch (DCS)
 8004dda:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d044      	beq.n	8004e6c <PDU_encode+0x30c>
 8004de2:	2b08      	cmp	r3, #8
 8004de4:	f300 8080 	bgt.w	8004ee8 <PDU_encode+0x388>
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <PDU_encode+0x290>
 8004dec:	2b04      	cmp	r3, #4
            delta = utf8_to_packed7bit(savem, &tempBuffer[bufferHead], &septetCount, udhSize == 0 ? 0 : 8, MAX_NUMBER_OCTETS);
            /*if (delta < 0)
                overFlow = delta == WORK_BUFFER_TOO_SMALL;*/
            break;
        case DCS_8BIT:
            break;
 8004dee:	e07b      	b.n	8004ee8 <PDU_encode+0x388>
            if(udhSize == 6)
 8004df0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004df4:	2b06      	cmp	r3, #6
 8004df6:	d107      	bne.n	8004e08 <PDU_encode+0x2a8>
                udhBuffer[6] = 0x40;
 8004df8:	2340      	movs	r3, #64	; 0x40
 8004dfa:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
                udhSize++;
 8004dfe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e02:	3301      	adds	r3, #1
 8004e04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
            if(udhSize != 0)
 8004e08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d012      	beq.n	8004e36 <PDU_encode+0x2d6>
                memcpy(&tempBuffer[bufferHead], udhBuffer, udhSize);
 8004e10:	4b14      	ldr	r3, [pc, #80]	; (8004e64 <PDU_encode+0x304>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f107 0218 	add.w	r2, r7, #24
 8004e18:	4413      	add	r3, r2
 8004e1a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8004e1e:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8004e22:	4618      	mov	r0, r3
 8004e24:	f002 fa43 	bl	80072ae <memcpy>
                bufferHead += udhSize;
 8004e28:	4b0e      	ldr	r3, [pc, #56]	; (8004e64 <PDU_encode+0x304>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e30:	4413      	add	r3, r2
 8004e32:	4a0c      	ldr	r2, [pc, #48]	; (8004e64 <PDU_encode+0x304>)
 8004e34:	6013      	str	r3, [r2, #0]
            delta = utf8_to_packed7bit(savem, &tempBuffer[bufferHead], &septetCount, udhSize == 0 ? 0 : 8, MAX_NUMBER_OCTETS);
 8004e36:	4b0b      	ldr	r3, [pc, #44]	; (8004e64 <PDU_encode+0x304>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f107 0218 	add.w	r2, r7, #24
 8004e3e:	18d1      	adds	r1, r2, r3
 8004e40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <PDU_encode+0x2ec>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e000      	b.n	8004e4e <PDU_encode+0x2ee>
 8004e4c:	2308      	movs	r3, #8
 8004e4e:	f107 0214 	add.w	r2, r7, #20
 8004e52:	208c      	movs	r0, #140	; 0x8c
 8004e54:	9000      	str	r0, [sp, #0]
 8004e56:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8004e5a:	f000 f97d 	bl	8005158 <utf8_to_packed7bit>
 8004e5e:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
            break;
 8004e62:	e041      	b.n	8004ee8 <PDU_encode+0x388>
 8004e64:	20001018 	.word	0x20001018
 8004e68:	20001014 	.word	0x20001014
        case DCS_16BIT:
            /* Insert UDH if any */
            if(udhSize != 0)
 8004e6c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d012      	beq.n	8004e9a <PDU_encode+0x33a>
            {
                memcpy(&tempBuffer[bufferHead], udhBuffer, udhSize);
 8004e74:	4b3e      	ldr	r3, [pc, #248]	; (8004f70 <PDU_encode+0x410>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f107 0218 	add.w	r2, r7, #24
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8004e82:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8004e86:	4618      	mov	r0, r3
 8004e88:	f002 fa11 	bl	80072ae <memcpy>
                bufferHead += udhSize;
 8004e8c:	4b38      	ldr	r3, [pc, #224]	; (8004f70 <PDU_encode+0x410>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e94:	4413      	add	r3, r2
 8004e96:	4a36      	ldr	r2, [pc, #216]	; (8004f70 <PDU_encode+0x410>)
 8004e98:	6013      	str	r3, [r2, #0]
            }
            delta = utf8_to_ucs2(savem, (char *)&tempBuffer[bufferHead]);
 8004e9a:	4b35      	ldr	r3, [pc, #212]	; (8004f70 <PDU_encode+0x410>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f107 0218 	add.w	r2, r7, #24
 8004ea2:	4413      	add	r3, r2
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8004eaa:	f000 fab5 	bl	8005418 <utf8_to_ucs2>
 8004eae:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
            if(delta > 0)
 8004eb2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	dd15      	ble.n	8004ee6 <PDU_encode+0x386>
            {
                tempBuffer[UDL_PlaceHolder] = delta + udhSize;  // correct message length
 8004eba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	4413      	add	r3, r2
 8004ec8:	b2d9      	uxtb	r1, r3
 8004eca:	f107 0218 	add.w	r2, r7, #24
 8004ece:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ed2:	4413      	add	r3, r2
 8004ed4:	460a      	mov	r2, r1
 8004ed6:	701a      	strb	r2, [r3, #0]
                length = bufferHead + delta;                    // allow for length byte
 8004ed8:	4b25      	ldr	r3, [pc, #148]	; (8004f70 <PDU_encode+0x410>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
            }
            break;
 8004ee6:	bf00      	nop
    }
    if(delta < 0) // sanity check
 8004ee8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	da02      	bge.n	8004ef6 <PDU_encode+0x396>
        return delta;
 8004ef0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004ef4:	e037      	b.n	8004f66 <PDU_encode+0x406>
    /* Convert binary to printable */
    if(pduBufferLength < (length * 2))
 8004ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004efa:	005a      	lsls	r2, r3, #1
 8004efc:	4b1d      	ldr	r3, [pc, #116]	; (8004f74 <PDU_encode+0x414>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	dd02      	ble.n	8004f0a <PDU_encode+0x3aa>
        return WORK_BUFFER_TOO_SMALL;
 8004f04:	f06f 0305 	mvn.w	r3, #5
 8004f08:	e02d      	b.n	8004f66 <PDU_encode+0x406>

    int newOffset = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    for(int i = 0; i < length; i++)
 8004f10:	2300      	movs	r3, #0
 8004f12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f16:	e017      	b.n	8004f48 <PDU_encode+0x3e8>
    {
        putHex(tempBuffer[i], &pduBuffer[newOffset]);
 8004f18:	f107 0218 	add.w	r2, r7, #24
 8004f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f20:	4413      	add	r3, r2
 8004f22:	7818      	ldrb	r0, [r3, #0]
 8004f24:	4b14      	ldr	r3, [pc, #80]	; (8004f78 <PDU_encode+0x418>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004f2c:	4413      	add	r3, r2
 8004f2e:	4619      	mov	r1, r3
 8004f30:	f000 f850 	bl	8004fd4 <putHex>
        newOffset += 2;
 8004f34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004f38:	3302      	adds	r3, #2
 8004f3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    for(int i = 0; i < length; i++)
 8004f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f42:	3301      	adds	r3, #1
 8004f44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f48:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f50:	429a      	cmp	r2, r3
 8004f52:	dbe1      	blt.n	8004f18 <PDU_encode+0x3b8>
    #ifdef CTRL_Z
        pduBuffer[length * 2] = 0x1a;    // add ctrl+z
        pduBuffer[(length * 2) + 1] = 0; // add end marker
    #endif

    message_length = length - message_length;
 8004f54:	4b09      	ldr	r3, [pc, #36]	; (8004f7c <PDU_encode+0x41c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	4a07      	ldr	r2, [pc, #28]	; (8004f7c <PDU_encode+0x41c>)
 8004f60:	6013      	str	r3, [r2, #0]
    return message_length;
 8004f62:	4b06      	ldr	r3, [pc, #24]	; (8004f7c <PDU_encode+0x41c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	20001018 	.word	0x20001018
 8004f74:	20001020 	.word	0x20001020
 8004f78:	2000101c 	.word	0x2000101c
 8004f7c:	20001014 	.word	0x20001014

08004f80 <isGSM7>:
    return string;
}


bool isGSM7(unsigned short *pucs)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
    for (unsigned int i = 0; i < sizeof(gsm7_legal) / sizeof(sRange); i++)
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	e015      	b.n	8004fba <isGSM7+0x3a>
    {
#ifdef PM
        if (*pucs >= pgm_read_word(&gsm7_legal[i].min) && *pucs <= pgm_read_word(&gsm7_legal[i].max))
#else
        if (*pucs >= gsm7_legal[i].min && *pucs <= gsm7_legal[i].max)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	881a      	ldrh	r2, [r3, #0]
 8004f92:	490f      	ldr	r1, [pc, #60]	; (8004fd0 <isGSM7+0x50>)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d30a      	bcc.n	8004fb4 <isGSM7+0x34>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	881a      	ldrh	r2, [r3, #0]
 8004fa2:	490b      	ldr	r1, [pc, #44]	; (8004fd0 <isGSM7+0x50>)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	440b      	add	r3, r1
 8004faa:	885b      	ldrh	r3, [r3, #2]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d801      	bhi.n	8004fb4 <isGSM7+0x34>
#endif
            return true;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e006      	b.n	8004fc2 <isGSM7+0x42>
    for (unsigned int i = 0; i < sizeof(gsm7_legal) / sizeof(sRange); i++)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2b1c      	cmp	r3, #28
 8004fbe:	d9e6      	bls.n	8004f8e <isGSM7+0xe>
    }
    return false;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	080094d0 	.word	0x080094d0

08004fd4 <putHex>:
 *
 * @param b
 * @param target
 */
void putHex(unsigned char b, char *target)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	4603      	mov	r3, r0
 8004fdc:	6039      	str	r1, [r7, #0]
 8004fde:	71fb      	strb	r3, [r7, #7]
    // upper nibble
    if ((b >> 4) <= 9)
 8004fe0:	79fb      	ldrb	r3, [r7, #7]
 8004fe2:	091b      	lsrs	r3, r3, #4
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b09      	cmp	r3, #9
 8004fe8:	d809      	bhi.n	8004ffe <putHex+0x2a>
        *target++ = (b >> 4) + '0';
 8004fea:	79fb      	ldrb	r3, [r7, #7]
 8004fec:	091b      	lsrs	r3, r3, #4
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	1c59      	adds	r1, r3, #1
 8004ff4:	6039      	str	r1, [r7, #0]
 8004ff6:	3230      	adds	r2, #48	; 0x30
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	701a      	strb	r2, [r3, #0]
 8004ffc:	e008      	b.n	8005010 <putHex+0x3c>
    else
        *target++ = (b >> 4) + 'A' - 10;
 8004ffe:	79fb      	ldrb	r3, [r7, #7]
 8005000:	091b      	lsrs	r3, r3, #4
 8005002:	b2da      	uxtb	r2, r3
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	1c59      	adds	r1, r3, #1
 8005008:	6039      	str	r1, [r7, #0]
 800500a:	3237      	adds	r2, #55	; 0x37
 800500c:	b2d2      	uxtb	r2, r2
 800500e:	701a      	strb	r2, [r3, #0]
    // lower nibble
    if ((b & 0xf) <= 9)
 8005010:	79fb      	ldrb	r3, [r7, #7]
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	2b09      	cmp	r3, #9
 8005018:	dc0a      	bgt.n	8005030 <putHex+0x5c>
        *target++ = (b & 0xf) + '0';
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	f003 030f 	and.w	r3, r3, #15
 8005020:	b2da      	uxtb	r2, r3
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	1c59      	adds	r1, r3, #1
 8005026:	6039      	str	r1, [r7, #0]
 8005028:	3230      	adds	r2, #48	; 0x30
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	701a      	strb	r2, [r3, #0]
    else
        *target++ = (b & 0xf) + 'A' - 10;
}
 800502e:	e009      	b.n	8005044 <putHex+0x70>
        *target++ = (b & 0xf) + 'A' - 10;
 8005030:	79fb      	ldrb	r3, [r7, #7]
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	b2da      	uxtb	r2, r3
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	1c59      	adds	r1, r3, #1
 800503c:	6039      	str	r1, [r7, #0]
 800503e:	3237      	adds	r2, #55	; 0x37
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	701a      	strb	r2, [r3, #0]
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <convert_utf8_to_gsm7bit>:
    Need to know UDH size in septets (0 or 8) to calculate when
    message is too long
    Return GSM7_TOO_LONG is message is longer than MAX_SMS_LENGTH_7BIT
*/
int convert_utf8_to_gsm7bit(const char *message, char *gsm7bit, int udhSize, int bufferSize)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b088      	sub	sp, #32
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
 800505c:	603b      	str	r3, [r7, #0]

    int w = 0;
 800505e:	2300      	movs	r3, #0
 8005060:	61fb      	str	r3, [r7, #28]

    while (*message)
 8005062:	e063      	b.n	800512c <convert_utf8_to_gsm7bit+0xdc>
    {
        // sanity check against overflow
        int length = utf8Length(message);
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 f903 	bl	8005270 <utf8Length>
 800506a:	61b8      	str	r0, [r7, #24]
        unsigned short ucs2[2], target; // allow for surrogate pair
        utf8_to_ucs2_single(message, ucs2);
 800506c:	f107 0310 	add.w	r3, r7, #16
 8005070:	4619      	mov	r1, r3
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 f946 	bl	8005304 <utf8_to_ucs2_single>
        target = (ucs2[0] << 8) | ((ucs2[0] & 0xff00) >> 8); // swap endian
 8005078:	8a3b      	ldrh	r3, [r7, #16]
 800507a:	021b      	lsls	r3, r3, #8
 800507c:	b21a      	sxth	r2, r3
 800507e:	8a3b      	ldrh	r3, [r7, #16]
 8005080:	0a1b      	lsrs	r3, r3, #8
 8005082:	b29b      	uxth	r3, r3
 8005084:	b21b      	sxth	r3, r3
 8005086:	4313      	orrs	r3, r2
 8005088:	b21b      	sxth	r3, r3
 800508a:	82fb      	strh	r3, [r7, #22]
        /*
          Handle special cases, code a bit convoluted caused by the need to
          keep translate tables as small as possible
        */
        if (target == 0x20AC)
 800508c:	8afb      	ldrh	r3, [r7, #22]
 800508e:	f242 02ac 	movw	r2, #8364	; 0x20ac
 8005092:	4293      	cmp	r3, r2
 8005094:	d10d      	bne.n	80050b2 <convert_utf8_to_gsm7bit+0x62>
        { // euro ucs2
            *gsm7bit++ = 27;
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	60ba      	str	r2, [r7, #8]
 800509c:	221b      	movs	r2, #27
 800509e:	701a      	strb	r2, [r3, #0]
            *gsm7bit++ = 0x65;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	60ba      	str	r2, [r7, #8]
 80050a6:	2265      	movs	r2, #101	; 0x65
 80050a8:	701a      	strb	r2, [r3, #0]
            w += 2;
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	3302      	adds	r3, #2
 80050ae:	61fb      	str	r3, [r7, #28]
 80050b0:	e035      	b.n	800511e <convert_utf8_to_gsm7bit+0xce>
        }
        else if (target >= GREEK_UCS_MINIMUM)
 80050b2:	8afb      	ldrh	r3, [r7, #22]
 80050b4:	f240 3292 	movw	r2, #914	; 0x392
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d90e      	bls.n	80050da <convert_utf8_to_gsm7bit+0x8a>
        {
#ifdef PM
            *gsm7bit++ = pgm_read_word(lookup_UnicodeToGreek7 + target - GREEK_UCS_MINIMUM);
#else
            *gsm7bit++ = lookup_UnicodeToGreek7[target - GREEK_UCS_MINIMUM];
 80050bc:	8afb      	ldrh	r3, [r7, #22]
 80050be:	f2a3 3393 	subw	r3, r3, #915	; 0x393
 80050c2:	4a23      	ldr	r2, [pc, #140]	; (8005150 <convert_utf8_to_gsm7bit+0x100>)
 80050c4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	60ba      	str	r2, [r7, #8]
 80050ce:	b2ca      	uxtb	r2, r1
 80050d0:	701a      	strb	r2, [r3, #0]
#endif
            w++;
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	3301      	adds	r3, #1
 80050d6:	61fb      	str	r3, [r7, #28]
 80050d8:	e021      	b.n	800511e <convert_utf8_to_gsm7bit+0xce>
        else
        {
#ifdef PM
            short x = pgm_read_word(lookup_ascii8to7 + target);
#else
            short x = lookup_ascii8to7[target];
 80050da:	8afb      	ldrh	r3, [r7, #22]
 80050dc:	4a1d      	ldr	r2, [pc, #116]	; (8005154 <convert_utf8_to_gsm7bit+0x104>)
 80050de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050e2:	82bb      	strh	r3, [r7, #20]
#endif
            if (x > 256)
 80050e4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80050e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ec:	dd0e      	ble.n	800510c <convert_utf8_to_gsm7bit+0xbc>
            { // this is an escaped character
                *gsm7bit++ = 27;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	60ba      	str	r2, [r7, #8]
 80050f4:	221b      	movs	r2, #27
 80050f6:	701a      	strb	r2, [r3, #0]
                *gsm7bit++ = x - 256;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	60ba      	str	r2, [r7, #8]
 80050fe:	8aba      	ldrh	r2, [r7, #20]
 8005100:	b2d2      	uxtb	r2, r2
 8005102:	701a      	strb	r2, [r3, #0]
                w += 2;
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	3302      	adds	r3, #2
 8005108:	61fb      	str	r3, [r7, #28]
 800510a:	e008      	b.n	800511e <convert_utf8_to_gsm7bit+0xce>
            }
            else
            {
                *gsm7bit++ = x;
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	1c5a      	adds	r2, r3, #1
 8005110:	60ba      	str	r2, [r7, #8]
 8005112:	8aba      	ldrh	r2, [r7, #20]
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	701a      	strb	r2, [r3, #0]
                w++;
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	3301      	adds	r3, #1
 800511c:	61fb      	str	r3, [r7, #28]
            }
        }
        message += length; // bump to next character
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4413      	add	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
        // check not exceeding max 160 characters for GSM7
        if (w > MAX_SMS_LENGTH_7BIT)
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	2ba0      	cmp	r3, #160	; 0xa0
 800512a:	dc04      	bgt.n	8005136 <convert_utf8_to_gsm7bit+0xe6>
    while (*message)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d197      	bne.n	8005064 <convert_utf8_to_gsm7bit+0x14>
 8005134:	e000      	b.n	8005138 <convert_utf8_to_gsm7bit+0xe8>
            break;
 8005136:	bf00      	nop
    }
    return w > MAX_SMS_LENGTH_7BIT ? GSM7_TOO_LONG : w;
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	2ba0      	cmp	r3, #160	; 0xa0
 800513c:	dc01      	bgt.n	8005142 <convert_utf8_to_gsm7bit+0xf2>
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	e001      	b.n	8005146 <convert_utf8_to_gsm7bit+0xf6>
 8005142:	f06f 0302 	mvn.w	r3, #2
}
 8005146:	4618      	mov	r0, r3
 8005148:	3720      	adds	r7, #32
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	08009744 	.word	0x08009744
 8005154:	08009544 	.word	0x08009544

08005158 <utf8_to_packed7bit>:
 * @param udhSize
 * @param bufferSize
 * @return GSM7_TOO_LONG is the message is longer than MAX_SMS_LENGTH_7BIT
 */
int utf8_to_packed7bit(const char *utf8, char *pdu, int *septets, int udhSize, int bufferSize)
{
 8005158:	b590      	push	{r4, r7, lr}
 800515a:	b0b1      	sub	sp, #196	; 0xc4
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	603b      	str	r3, [r7, #0]
    int w;
    int len7bit;
    char gsm7bit[MAX_SMS_LENGTH_7BIT + 2]; // allow for overflow

    /* Start by converting the UTF8-string to a GSM7 string */
    len7bit = convert_utf8_to_gsm7bit(utf8, gsm7bit, udhSize, bufferSize);
 8005166:	f107 0110 	add.w	r1, r7, #16
 800516a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f7ff ff6d 	bl	8005050 <convert_utf8_to_gsm7bit>
 8005176:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
    // check if workBuffer exceeded
    if (len7bit < 0)
 800517a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800517e:	2b00      	cmp	r3, #0
 8005180:	da02      	bge.n	8005188 <utf8_to_packed7bit+0x30>
        return len7bit;
 8005182:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005186:	e06c      	b.n	8005262 <utf8_to_packed7bit+0x10a>

    /* Now, we can create a PDU string by packing the 7bit-string */
    r = 0;
 8005188:	2300      	movs	r3, #0
 800518a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    w = 0;
 800518e:	2300      	movs	r3, #0
 8005190:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    while (r < len7bit)
 8005194:	e059      	b.n	800524a <utf8_to_packed7bit+0xf2>
    {
        pdu[w] = ((gsm7bit[r] >> (w % 7)) & 0x7F) | ((gsm7bit[r + 1] << (7 - (w % 7))) & 0xFF);
 8005196:	f107 0210 	add.w	r2, r7, #16
 800519a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800519e:	4413      	add	r3, r2
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80051a8:	4b30      	ldr	r3, [pc, #192]	; (800526c <utf8_to_packed7bit+0x114>)
 80051aa:	fb83 1302 	smull	r1, r3, r3, r2
 80051ae:	4413      	add	r3, r2
 80051b0:	1099      	asrs	r1, r3, #2
 80051b2:	17d3      	asrs	r3, r2, #31
 80051b4:	1ac9      	subs	r1, r1, r3
 80051b6:	460b      	mov	r3, r1
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	1a5b      	subs	r3, r3, r1
 80051bc:	1ad1      	subs	r1, r2, r3
 80051be:	fa40 f301 	asr.w	r3, r0, r1
 80051c2:	b25b      	sxtb	r3, r3
 80051c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051c8:	b258      	sxtb	r0, r3
 80051ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80051ce:	3301      	adds	r3, #1
 80051d0:	33c0      	adds	r3, #192	; 0xc0
 80051d2:	443b      	add	r3, r7
 80051d4:	f813 3cb0 	ldrb.w	r3, [r3, #-176]
 80051d8:	461c      	mov	r4, r3
 80051da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80051de:	4b23      	ldr	r3, [pc, #140]	; (800526c <utf8_to_packed7bit+0x114>)
 80051e0:	fb83 1302 	smull	r1, r3, r3, r2
 80051e4:	4413      	add	r3, r2
 80051e6:	1099      	asrs	r1, r3, #2
 80051e8:	17d3      	asrs	r3, r2, #31
 80051ea:	1ac9      	subs	r1, r1, r3
 80051ec:	460b      	mov	r3, r1
 80051ee:	00db      	lsls	r3, r3, #3
 80051f0:	1a5b      	subs	r3, r3, r1
 80051f2:	1ad1      	subs	r1, r2, r3
 80051f4:	f1c1 0307 	rsb	r3, r1, #7
 80051f8:	fa04 f303 	lsl.w	r3, r4, r3
 80051fc:	b25b      	sxtb	r3, r3
 80051fe:	4303      	orrs	r3, r0
 8005200:	b259      	sxtb	r1, r3
 8005202:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	4413      	add	r3, r2
 800520a:	b2ca      	uxtb	r2, r1
 800520c:	701a      	strb	r2, [r3, #0]
        if ((w % 7) == 6)
 800520e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005212:	4b16      	ldr	r3, [pc, #88]	; (800526c <utf8_to_packed7bit+0x114>)
 8005214:	fb83 1302 	smull	r1, r3, r3, r2
 8005218:	4413      	add	r3, r2
 800521a:	1099      	asrs	r1, r3, #2
 800521c:	17d3      	asrs	r3, r2, #31
 800521e:	1ac9      	subs	r1, r1, r3
 8005220:	460b      	mov	r3, r1
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	1a5b      	subs	r3, r3, r1
 8005226:	1ad1      	subs	r1, r2, r3
 8005228:	2906      	cmp	r1, #6
 800522a:	d104      	bne.n	8005236 <utf8_to_packed7bit+0xde>
            r++;
 800522c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005230:	3301      	adds	r3, #1
 8005232:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        r++;
 8005236:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800523a:	3301      	adds	r3, #1
 800523c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        w++;
 8005240:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005244:	3301      	adds	r3, #1
 8005246:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    while (r < len7bit)
 800524a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800524e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005252:	429a      	cmp	r2, r3
 8005254:	db9f      	blt.n	8005196 <utf8_to_packed7bit+0x3e>
    }
    *septets = len7bit;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800525c:	601a      	str	r2, [r3, #0]
    return w;
 800525e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
}
 8005262:	4618      	mov	r0, r3
 8005264:	37c4      	adds	r7, #196	; 0xc4
 8005266:	46bd      	mov	sp, r7
 8005268:	bd90      	pop	{r4, r7, pc}
 800526a:	bf00      	nop
 800526c:	92492493 	.word	0x92492493

08005270 <utf8Length>:
 *
 * @param utf8
 * @return number of bytes used by this UTF8 unicode character
 */
int utf8Length(const char *utf8)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
    int length = 1;
 8005278:	2301      	movs	r3, #1
 800527a:	617b      	str	r3, [r7, #20]
    unsigned char mask = BITS76ON;
 800527c:	23c0      	movs	r3, #192	; 0xc0
 800527e:	74fb      	strb	r3, [r7, #19]
    // look for ascii 7 on 1st byte
    if ((*utf8 & BIT7ON6OFF) == 0)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	b25b      	sxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	da35      	bge.n	80052f6 <utf8Length+0x86>
        ;
    else
    {
        // look for length pattern on first byte - 2 r more continuous 1's
        while ((*utf8 & mask) == mask)
 800528a:	e008      	b.n	800529e <utf8Length+0x2e>
        {
            length++;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	3301      	adds	r3, #1
 8005290:	617b      	str	r3, [r7, #20]
            mask = (mask >> 1 | BIT7ON6OFF);
 8005292:	7cfb      	ldrb	r3, [r7, #19]
 8005294:	085b      	lsrs	r3, r3, #1
 8005296:	b2db      	uxtb	r3, r3
 8005298:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800529c:	74fb      	strb	r3, [r7, #19]
        while ((*utf8 & mask) == mask)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	781a      	ldrb	r2, [r3, #0]
 80052a2:	7cfb      	ldrb	r3, [r7, #19]
 80052a4:	4013      	ands	r3, r2
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	7cfa      	ldrb	r2, [r7, #19]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d0ee      	beq.n	800528c <utf8Length+0x1c>
        }
        if (length > 1)
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	dd1d      	ble.n	80052f0 <utf8Length+0x80>
        { // validate continuation bytes
            int LEN = length - 1;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	60fb      	str	r3, [r7, #12]
            utf8++;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3301      	adds	r3, #1
 80052be:	607b      	str	r3, [r7, #4]
            while (LEN)
 80052c0:	e00a      	b.n	80052d8 <utf8Length+0x68>
            {
                if ((*utf8++ & BITS76ON) == BIT7ON6OFF)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	607a      	str	r2, [r7, #4]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052ce:	2b80      	cmp	r3, #128	; 0x80
 80052d0:	d106      	bne.n	80052e0 <utf8Length+0x70>
                    LEN--;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	3b01      	subs	r3, #1
 80052d6:	60fb      	str	r3, [r7, #12]
            while (LEN)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1f1      	bne.n	80052c2 <utf8Length+0x52>
 80052de:	e000      	b.n	80052e2 <utf8Length+0x72>
                else
                    break;
 80052e0:	bf00      	nop
            }
            if (LEN != 0)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d006      	beq.n	80052f6 <utf8Length+0x86>
                length = -1;
 80052e8:	f04f 33ff 	mov.w	r3, #4294967295
 80052ec:	617b      	str	r3, [r7, #20]
 80052ee:	e002      	b.n	80052f6 <utf8Length+0x86>
        }
        else
            length = -1;
 80052f0:	f04f 33ff 	mov.w	r3, #4294967295
 80052f4:	617b      	str	r3, [r7, #20]
    }
    return length;
 80052f6:	697b      	ldr	r3, [r7, #20]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	371c      	adds	r7, #28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <utf8_to_ucs2_single>:
 * @param utf8
 * @param target
 * @return number of octets
 */
int utf8_to_ucs2_single(const char *utf8, unsigned short *target)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b088      	sub	sp, #32
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
    unsigned short ucs2[2];
    int numBytes = 0;
 800530e:	2300      	movs	r3, #0
 8005310:	61fb      	str	r3, [r7, #28]
    int cont = utf8Length(utf8) - 1; // number of continuation bytes
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7ff ffac 	bl	8005270 <utf8Length>
 8005318:	4603      	mov	r3, r0
 800531a:	3b01      	subs	r3, #1
 800531c:	61bb      	str	r3, [r7, #24]
    unsigned long utf16;
    if (cont < 0)
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	2b00      	cmp	r3, #0
 8005322:	da01      	bge.n	8005328 <utf8_to_ucs2_single+0x24>
        return 0;
 8005324:	2300      	movs	r3, #0
 8005326:	e06f      	b.n	8005408 <utf8_to_ucs2_single+0x104>
    if (cont == 0)
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d108      	bne.n	8005340 <utf8_to_ucs2_single+0x3c>
    { // ascii 7 bit
        ucs2[0] = *utf8;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	b29b      	uxth	r3, r3
 8005334:	813b      	strh	r3, [r7, #8]
        ucs2[1] = 0; // was missing before
 8005336:	2300      	movs	r3, #0
 8005338:	817b      	strh	r3, [r7, #10]
        numBytes = 2;
 800533a:	2302      	movs	r3, #2
 800533c:	61fb      	str	r3, [r7, #28]
 800533e:	e044      	b.n	80053ca <utf8_to_ucs2_single+0xc6>
    }
    else
    {
        // read n bits of first byte then 6 bits of each continuation
        unsigned char mask = BITS0TO5ON;
 8005340:	233f      	movs	r3, #63	; 0x3f
 8005342:	74fb      	strb	r3, [r7, #19]
        int temp = cont;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	60fb      	str	r3, [r7, #12]
        while (temp-- > 0)
 8005348:	e002      	b.n	8005350 <utf8_to_ucs2_single+0x4c>
            mask >>= 1;
 800534a:	7cfb      	ldrb	r3, [r7, #19]
 800534c:	085b      	lsrs	r3, r3, #1
 800534e:	74fb      	strb	r3, [r7, #19]
        while (temp-- > 0)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	1e5a      	subs	r2, r3, #1
 8005354:	60fa      	str	r2, [r7, #12]
 8005356:	2b00      	cmp	r3, #0
 8005358:	dcf7      	bgt.n	800534a <utf8_to_ucs2_single+0x46>
        utf16 = *utf8++ & mask;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	781a      	ldrb	r2, [r3, #0]
 8005362:	7cfb      	ldrb	r3, [r7, #19]
 8005364:	4013      	ands	r3, r2
 8005366:	b2db      	uxtb	r3, r3
 8005368:	617b      	str	r3, [r7, #20]
        // add continuation bytes
        while (cont-- > 0)
 800536a:	e009      	b.n	8005380 <utf8_to_ucs2_single+0x7c>
        {
            utf16 = (utf16 << 6) | (*(utf8++) & BITS0TO5ON);
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	019a      	lsls	r2, r3, #6
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	1c59      	adds	r1, r3, #1
 8005374:	6079      	str	r1, [r7, #4]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800537c:	4313      	orrs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]
        while (cont-- > 0)
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	1e5a      	subs	r2, r3, #1
 8005384:	61ba      	str	r2, [r7, #24]
 8005386:	2b00      	cmp	r3, #0
 8005388:	dcf0      	bgt.n	800536c <utf8_to_ucs2_single+0x68>
        }
        // check if we need to make a surrogate pair
        if (utf16 < 0x10000)
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005390:	d205      	bcs.n	800539e <utf8_to_ucs2_single+0x9a>
        {
            ucs2[0] = utf16;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	b29b      	uxth	r3, r3
 8005396:	813b      	strh	r3, [r7, #8]
            numBytes = 2;
 8005398:	2302      	movs	r3, #2
 800539a:	61fb      	str	r3, [r7, #28]
 800539c:	e015      	b.n	80053ca <utf8_to_ucs2_single+0xc6>
        }
        else
        {
            utf16 -= 0x10000;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80053a4:	617b      	str	r3, [r7, #20]
            ucs2[0] = 0xD800 | (utf16 >> 10);
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	0a9b      	lsrs	r3, r3, #10
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	4b18      	ldr	r3, [pc, #96]	; (8005410 <utf8_to_ucs2_single+0x10c>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	813b      	strh	r3, [r7, #8]
            ucs2[1] = 0xDC00 | (utf16 & 0x3ff);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053bc:	b29a      	uxth	r2, r3
 80053be:	4b15      	ldr	r3, [pc, #84]	; (8005414 <utf8_to_ucs2_single+0x110>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	817b      	strh	r3, [r7, #10]
            numBytes = 4;
 80053c6:	2304      	movs	r3, #4
 80053c8:	61fb      	str	r3, [r7, #28]
        }
    }
    *target = (ucs2[0] >> 8) | ((ucs2[0] & 0x0ff) << 8); // swap bytes
 80053ca:	893b      	ldrh	r3, [r7, #8]
 80053cc:	0a1b      	lsrs	r3, r3, #8
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	b21a      	sxth	r2, r3
 80053d2:	893b      	ldrh	r3, [r7, #8]
 80053d4:	021b      	lsls	r3, r3, #8
 80053d6:	b21b      	sxth	r3, r3
 80053d8:	4313      	orrs	r3, r2
 80053da:	b21b      	sxth	r3, r3
 80053dc:	b29a      	uxth	r2, r3
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	801a      	strh	r2, [r3, #0]
    if (numBytes > 2)
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	dd0e      	ble.n	8005406 <utf8_to_ucs2_single+0x102>
    {
        target++;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	3302      	adds	r3, #2
 80053ec:	603b      	str	r3, [r7, #0]
        *target = (ucs2[1] >> 8) | ((ucs2[1] & 0x0ff) << 8); // swap bytes
 80053ee:	897b      	ldrh	r3, [r7, #10]
 80053f0:	0a1b      	lsrs	r3, r3, #8
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	b21a      	sxth	r2, r3
 80053f6:	897b      	ldrh	r3, [r7, #10]
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	b21b      	sxth	r3, r3
 80053fc:	4313      	orrs	r3, r2
 80053fe:	b21b      	sxth	r3, r3
 8005400:	b29a      	uxth	r2, r3
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	801a      	strh	r2, [r3, #0]
    }
    return numBytes;
 8005406:	69fb      	ldr	r3, [r7, #28]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3720      	adds	r7, #32
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	ffffd800 	.word	0xffffd800
 8005414:	ffffdc00 	.word	0xffffdc00

08005418 <utf8_to_ucs2>:
 * @param utf8
 * @param ucs2
 * @return number of octets, else -2 if too large to fit in a PDU
 */
int utf8_to_ucs2(const char *utf8, char *ucs2)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
    /* translate an utf8 zero terminated string */
    int octets = 0, ucsLength;
 8005422:	2300      	movs	r3, #0
 8005424:	617b      	str	r3, [r7, #20]
    unsigned short tempUCS2[2]; // allow space for surrogate pair
    while (*utf8 && octets <= MAX_NUMBER_OCTETS)
 8005426:	e025      	b.n	8005474 <utf8_to_ucs2+0x5c>
    {
        int inputLen = utf8Length(utf8);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7ff ff21 	bl	8005270 <utf8Length>
 800542e:	6138      	str	r0, [r7, #16]
        ucsLength = utf8_to_ucs2_single(utf8, tempUCS2);
 8005430:	f107 0308 	add.w	r3, r7, #8
 8005434:	4619      	mov	r1, r3
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7ff ff64 	bl	8005304 <utf8_to_ucs2_single>
 800543c:	60f8      	str	r0, [r7, #12]
        // sanity check against overflowing the buffer
        if (octets + ucsLength > MAX_NUMBER_OCTETS)
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4413      	add	r3, r2
 8005444:	2b8c      	cmp	r3, #140	; 0x8c
 8005446:	dd02      	ble.n	800544e <utf8_to_ucs2+0x36>
            return UCS2_TOO_LONG;
 8005448:	f06f 0301 	mvn.w	r3, #1
 800544c:	e01a      	b.n	8005484 <utf8_to_ucs2+0x6c>
        // ok to continue
        memcpy(ucs2, tempUCS2, ucsLength);
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	f107 0308 	add.w	r3, r7, #8
 8005454:	4619      	mov	r1, r3
 8005456:	6838      	ldr	r0, [r7, #0]
 8005458:	f001 ff29 	bl	80072ae <memcpy>
        utf8 += inputLen;    // bump input pointer
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	4413      	add	r3, r2
 8005462:	607b      	str	r3, [r7, #4]
        ucs2 += ucsLength;   // bump output pointer
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	4413      	add	r3, r2
 800546a:	603b      	str	r3, [r7, #0]
        octets += ucsLength; // bump total number of octets created
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4413      	add	r3, r2
 8005472:	617b      	str	r3, [r7, #20]
    while (*utf8 && octets <= MAX_NUMBER_OCTETS)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <utf8_to_ucs2+0x6a>
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	2b8c      	cmp	r3, #140	; 0x8c
 8005480:	ddd2      	ble.n	8005428 <utf8_to_ucs2+0x10>
    }
    return octets;
 8005482:	697b      	ldr	r3, [r7, #20]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	4603      	mov	r3, r0
 8005494:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800549a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800549e:	2b84      	cmp	r3, #132	; 0x84
 80054a0:	d005      	beq.n	80054ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80054a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4413      	add	r3, r2
 80054aa:	3303      	adds	r3, #3
 80054ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80054ae:	68fb      	ldr	r3, [r7, #12]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80054c0:	f000 fade 	bl	8005a80 <vTaskStartScheduler>
  
  return osOK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	bd80      	pop	{r7, pc}

080054ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80054ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054cc:	b089      	sub	sp, #36	; 0x24
 80054ce:	af04      	add	r7, sp, #16
 80054d0:	6078      	str	r0, [r7, #4]
 80054d2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d020      	beq.n	800551e <osThreadCreate+0x54>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d01c      	beq.n	800551e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685c      	ldr	r4, [r3, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691e      	ldr	r6, [r3, #16]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7ff ffc8 	bl	800548c <makeFreeRtosPriority>
 80054fc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005506:	9202      	str	r2, [sp, #8]
 8005508:	9301      	str	r3, [sp, #4]
 800550a:	9100      	str	r1, [sp, #0]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	4632      	mov	r2, r6
 8005510:	4629      	mov	r1, r5
 8005512:	4620      	mov	r0, r4
 8005514:	f000 f8ed 	bl	80056f2 <xTaskCreateStatic>
 8005518:	4603      	mov	r3, r0
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	e01c      	b.n	8005558 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685c      	ldr	r4, [r3, #4]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800552a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005532:	4618      	mov	r0, r3
 8005534:	f7ff ffaa 	bl	800548c <makeFreeRtosPriority>
 8005538:	4602      	mov	r2, r0
 800553a:	f107 030c 	add.w	r3, r7, #12
 800553e:	9301      	str	r3, [sp, #4]
 8005540:	9200      	str	r2, [sp, #0]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	4632      	mov	r2, r6
 8005546:	4629      	mov	r1, r5
 8005548:	4620      	mov	r0, r4
 800554a:	f000 f92f 	bl	80057ac <xTaskCreate>
 800554e:	4603      	mov	r3, r0
 8005550:	2b01      	cmp	r3, #1
 8005552:	d001      	beq.n	8005558 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005554:	2300      	movs	r3, #0
 8005556:	e000      	b.n	800555a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005558:	68fb      	ldr	r3, [r7, #12]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005562 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b084      	sub	sp, #16
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <osDelay+0x16>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	e000      	b.n	800557a <osDelay+0x18>
 8005578:	2301      	movs	r3, #1
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fa4c 	bl	8005a18 <vTaskDelay>
  
  return osOK;
 8005580:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005582:	4618      	mov	r0, r3
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f103 0208 	add.w	r2, r3, #8
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f04f 32ff 	mov.w	r2, #4294967295
 80055a2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f103 0208 	add.w	r2, r3, #8
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f103 0208 	add.w	r2, r3, #8
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055ca:	b480      	push	{r7}
 80055cc:	b083      	sub	sp, #12
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	601a      	str	r2, [r3, #0]
}
 8005620:	bf00      	nop
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005642:	d103      	bne.n	800564c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	e00c      	b.n	8005666 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3308      	adds	r3, #8
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	e002      	b.n	800565a <vListInsert+0x2e>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	60fb      	str	r3, [r7, #12]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	429a      	cmp	r2, r3
 8005664:	d2f6      	bcs.n	8005654 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	1c5a      	adds	r2, r3, #1
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	601a      	str	r2, [r3, #0]
}
 8005692:	bf00      	nop
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800569e:	b480      	push	{r7}
 80056a0:	b085      	sub	sp, #20
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	6892      	ldr	r2, [r2, #8]
 80056b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6852      	ldr	r2, [r2, #4]
 80056be:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d103      	bne.n	80056d2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	1e5a      	subs	r2, r3, #1
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b08e      	sub	sp, #56	; 0x38
 80056f6:	af04      	add	r7, sp, #16
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	607a      	str	r2, [r7, #4]
 80056fe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10a      	bne.n	800571c <xTaskCreateStatic+0x2a>
	__asm volatile
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	623b      	str	r3, [r7, #32]
}
 8005718:	bf00      	nop
 800571a:	e7fe      	b.n	800571a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800571c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10a      	bne.n	8005738 <xTaskCreateStatic+0x46>
	__asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	61fb      	str	r3, [r7, #28]
}
 8005734:	bf00      	nop
 8005736:	e7fe      	b.n	8005736 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005738:	2354      	movs	r3, #84	; 0x54
 800573a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	2b54      	cmp	r3, #84	; 0x54
 8005740:	d00a      	beq.n	8005758 <xTaskCreateStatic+0x66>
	__asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	61bb      	str	r3, [r7, #24]
}
 8005754:	bf00      	nop
 8005756:	e7fe      	b.n	8005756 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005758:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800575a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575c:	2b00      	cmp	r3, #0
 800575e:	d01e      	beq.n	800579e <xTaskCreateStatic+0xac>
 8005760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005762:	2b00      	cmp	r3, #0
 8005764:	d01b      	beq.n	800579e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005768:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800576e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	2202      	movs	r2, #2
 8005774:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005778:	2300      	movs	r3, #0
 800577a:	9303      	str	r3, [sp, #12]
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	9302      	str	r3, [sp, #8]
 8005780:	f107 0314 	add.w	r3, r7, #20
 8005784:	9301      	str	r3, [sp, #4]
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	68b9      	ldr	r1, [r7, #8]
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 f850 	bl	8005836 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005796:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005798:	f000 f8d4 	bl	8005944 <prvAddNewTaskToReadyList>
 800579c:	e001      	b.n	80057a2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800579e:	2300      	movs	r3, #0
 80057a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057a2:	697b      	ldr	r3, [r7, #20]
	}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3728      	adds	r7, #40	; 0x28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b08c      	sub	sp, #48	; 0x30
 80057b0:	af04      	add	r7, sp, #16
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	603b      	str	r3, [r7, #0]
 80057b8:	4613      	mov	r3, r2
 80057ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80057bc:	88fb      	ldrh	r3, [r7, #6]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 fec9 	bl	8006558 <pvPortMalloc>
 80057c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00e      	beq.n	80057ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80057ce:	2054      	movs	r0, #84	; 0x54
 80057d0:	f000 fec2 	bl	8006558 <pvPortMalloc>
 80057d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	631a      	str	r2, [r3, #48]	; 0x30
 80057e2:	e005      	b.n	80057f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80057e4:	6978      	ldr	r0, [r7, #20]
 80057e6:	f000 ff83 	bl	80066f0 <vPortFree>
 80057ea:	e001      	b.n	80057f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80057ec:	2300      	movs	r3, #0
 80057ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d017      	beq.n	8005826 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80057fe:	88fa      	ldrh	r2, [r7, #6]
 8005800:	2300      	movs	r3, #0
 8005802:	9303      	str	r3, [sp, #12]
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	9302      	str	r3, [sp, #8]
 8005808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580a:	9301      	str	r3, [sp, #4]
 800580c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	68b9      	ldr	r1, [r7, #8]
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 f80e 	bl	8005836 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800581a:	69f8      	ldr	r0, [r7, #28]
 800581c:	f000 f892 	bl	8005944 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005820:	2301      	movs	r3, #1
 8005822:	61bb      	str	r3, [r7, #24]
 8005824:	e002      	b.n	800582c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005826:	f04f 33ff 	mov.w	r3, #4294967295
 800582a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800582c:	69bb      	ldr	r3, [r7, #24]
	}
 800582e:	4618      	mov	r0, r3
 8005830:	3720      	adds	r7, #32
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b088      	sub	sp, #32
 800583a:	af00      	add	r7, sp, #0
 800583c:	60f8      	str	r0, [r7, #12]
 800583e:	60b9      	str	r1, [r7, #8]
 8005840:	607a      	str	r2, [r7, #4]
 8005842:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800584e:	3b01      	subs	r3, #1
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	f023 0307 	bic.w	r3, r3, #7
 800585c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	f003 0307 	and.w	r3, r3, #7
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00a      	beq.n	800587e <prvInitialiseNewTask+0x48>
	__asm volatile
 8005868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	617b      	str	r3, [r7, #20]
}
 800587a:	bf00      	nop
 800587c:	e7fe      	b.n	800587c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01f      	beq.n	80058c4 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005884:	2300      	movs	r3, #0
 8005886:	61fb      	str	r3, [r7, #28]
 8005888:	e012      	b.n	80058b0 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	4413      	add	r3, r2
 8005890:	7819      	ldrb	r1, [r3, #0]
 8005892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	4413      	add	r3, r2
 8005898:	3334      	adds	r3, #52	; 0x34
 800589a:	460a      	mov	r2, r1
 800589c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	4413      	add	r3, r2
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d006      	beq.n	80058b8 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	3301      	adds	r3, #1
 80058ae:	61fb      	str	r3, [r7, #28]
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	2b0f      	cmp	r3, #15
 80058b4:	d9e9      	bls.n	800588a <prvInitialiseNewTask+0x54>
 80058b6:	e000      	b.n	80058ba <prvInitialiseNewTask+0x84>
			{
				break;
 80058b8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058c2:	e003      	b.n	80058cc <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80058c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ce:	2b06      	cmp	r3, #6
 80058d0:	d901      	bls.n	80058d6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058d2:	2306      	movs	r3, #6
 80058d4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80058d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058da:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80058dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058e0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	2200      	movs	r2, #0
 80058e6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80058e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ea:	3304      	adds	r3, #4
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7ff fe6c 	bl	80055ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80058f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f4:	3318      	adds	r3, #24
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff fe67 	bl	80055ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80058fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005900:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005904:	f1c3 0207 	rsb	r2, r3, #7
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800590c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005910:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005914:	2200      	movs	r2, #0
 8005916:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	68f9      	ldr	r1, [r7, #12]
 8005924:	69b8      	ldr	r0, [r7, #24]
 8005926:	f000 fc05 	bl	8006134 <pxPortInitialiseStack>
 800592a:	4602      	mov	r2, r0
 800592c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800593a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800593c:	bf00      	nop
 800593e:	3720      	adds	r7, #32
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800594c:	f000 fd22 	bl	8006394 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005950:	4b2a      	ldr	r3, [pc, #168]	; (80059fc <prvAddNewTaskToReadyList+0xb8>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3301      	adds	r3, #1
 8005956:	4a29      	ldr	r2, [pc, #164]	; (80059fc <prvAddNewTaskToReadyList+0xb8>)
 8005958:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800595a:	4b29      	ldr	r3, [pc, #164]	; (8005a00 <prvAddNewTaskToReadyList+0xbc>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d109      	bne.n	8005976 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005962:	4a27      	ldr	r2, [pc, #156]	; (8005a00 <prvAddNewTaskToReadyList+0xbc>)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005968:	4b24      	ldr	r3, [pc, #144]	; (80059fc <prvAddNewTaskToReadyList+0xb8>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d110      	bne.n	8005992 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005970:	f000 fabc 	bl	8005eec <prvInitialiseTaskLists>
 8005974:	e00d      	b.n	8005992 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005976:	4b23      	ldr	r3, [pc, #140]	; (8005a04 <prvAddNewTaskToReadyList+0xc0>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d109      	bne.n	8005992 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800597e:	4b20      	ldr	r3, [pc, #128]	; (8005a00 <prvAddNewTaskToReadyList+0xbc>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	429a      	cmp	r2, r3
 800598a:	d802      	bhi.n	8005992 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800598c:	4a1c      	ldr	r2, [pc, #112]	; (8005a00 <prvAddNewTaskToReadyList+0xbc>)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005992:	4b1d      	ldr	r3, [pc, #116]	; (8005a08 <prvAddNewTaskToReadyList+0xc4>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3301      	adds	r3, #1
 8005998:	4a1b      	ldr	r2, [pc, #108]	; (8005a08 <prvAddNewTaskToReadyList+0xc4>)
 800599a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	2201      	movs	r2, #1
 80059a2:	409a      	lsls	r2, r3
 80059a4:	4b19      	ldr	r3, [pc, #100]	; (8005a0c <prvAddNewTaskToReadyList+0xc8>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	4a18      	ldr	r2, [pc, #96]	; (8005a0c <prvAddNewTaskToReadyList+0xc8>)
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b2:	4613      	mov	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4413      	add	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4a15      	ldr	r2, [pc, #84]	; (8005a10 <prvAddNewTaskToReadyList+0xcc>)
 80059bc:	441a      	add	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	3304      	adds	r3, #4
 80059c2:	4619      	mov	r1, r3
 80059c4:	4610      	mov	r0, r2
 80059c6:	f7ff fe0d 	bl	80055e4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80059ca:	f000 fd13 	bl	80063f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80059ce:	4b0d      	ldr	r3, [pc, #52]	; (8005a04 <prvAddNewTaskToReadyList+0xc0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00e      	beq.n	80059f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059d6:	4b0a      	ldr	r3, [pc, #40]	; (8005a00 <prvAddNewTaskToReadyList+0xbc>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d207      	bcs.n	80059f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80059e4:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <prvAddNewTaskToReadyList+0xd0>)
 80059e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059f4:	bf00      	nop
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	20001124 	.word	0x20001124
 8005a00:	20001024 	.word	0x20001024
 8005a04:	20001130 	.word	0x20001130
 8005a08:	20001140 	.word	0x20001140
 8005a0c:	2000112c 	.word	0x2000112c
 8005a10:	20001028 	.word	0x20001028
 8005a14:	e000ed04 	.word	0xe000ed04

08005a18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a20:	2300      	movs	r3, #0
 8005a22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d017      	beq.n	8005a5a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a2a:	4b13      	ldr	r3, [pc, #76]	; (8005a78 <vTaskDelay+0x60>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <vTaskDelay+0x30>
	__asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	60bb      	str	r3, [r7, #8]
}
 8005a44:	bf00      	nop
 8005a46:	e7fe      	b.n	8005a46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005a48:	f000 f87a 	bl	8005b40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fb0a 	bl	8006068 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a54:	f000 f882 	bl	8005b5c <xTaskResumeAll>
 8005a58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d107      	bne.n	8005a70 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005a60:	4b06      	ldr	r3, [pc, #24]	; (8005a7c <vTaskDelay+0x64>)
 8005a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a70:	bf00      	nop
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	2000114c 	.word	0x2000114c
 8005a7c:	e000ed04 	.word	0xe000ed04

08005a80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b08a      	sub	sp, #40	; 0x28
 8005a84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a86:	2300      	movs	r3, #0
 8005a88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a8e:	463a      	mov	r2, r7
 8005a90:	1d39      	adds	r1, r7, #4
 8005a92:	f107 0308 	add.w	r3, r7, #8
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fa fd80 	bl	800059c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a9c:	6839      	ldr	r1, [r7, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	9202      	str	r2, [sp, #8]
 8005aa4:	9301      	str	r3, [sp, #4]
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	2300      	movs	r3, #0
 8005aac:	460a      	mov	r2, r1
 8005aae:	491e      	ldr	r1, [pc, #120]	; (8005b28 <vTaskStartScheduler+0xa8>)
 8005ab0:	481e      	ldr	r0, [pc, #120]	; (8005b2c <vTaskStartScheduler+0xac>)
 8005ab2:	f7ff fe1e 	bl	80056f2 <xTaskCreateStatic>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	4a1d      	ldr	r2, [pc, #116]	; (8005b30 <vTaskStartScheduler+0xb0>)
 8005aba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005abc:	4b1c      	ldr	r3, [pc, #112]	; (8005b30 <vTaskStartScheduler+0xb0>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	617b      	str	r3, [r7, #20]
 8005ac8:	e001      	b.n	8005ace <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d116      	bne.n	8005b02 <vTaskStartScheduler+0x82>
	__asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	613b      	str	r3, [r7, #16]
}
 8005ae6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ae8:	4b12      	ldr	r3, [pc, #72]	; (8005b34 <vTaskStartScheduler+0xb4>)
 8005aea:	f04f 32ff 	mov.w	r2, #4294967295
 8005aee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005af0:	4b11      	ldr	r3, [pc, #68]	; (8005b38 <vTaskStartScheduler+0xb8>)
 8005af2:	2201      	movs	r2, #1
 8005af4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005af6:	4b11      	ldr	r3, [pc, #68]	; (8005b3c <vTaskStartScheduler+0xbc>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005afc:	f000 fba8 	bl	8006250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b00:	e00e      	b.n	8005b20 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b08:	d10a      	bne.n	8005b20 <vTaskStartScheduler+0xa0>
	__asm volatile
 8005b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	60fb      	str	r3, [r7, #12]
}
 8005b1c:	bf00      	nop
 8005b1e:	e7fe      	b.n	8005b1e <vTaskStartScheduler+0x9e>
}
 8005b20:	bf00      	nop
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	080094a4 	.word	0x080094a4
 8005b2c:	08005ebd 	.word	0x08005ebd
 8005b30:	20001148 	.word	0x20001148
 8005b34:	20001144 	.word	0x20001144
 8005b38:	20001130 	.word	0x20001130
 8005b3c:	20001128 	.word	0x20001128

08005b40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b44:	4b04      	ldr	r3, [pc, #16]	; (8005b58 <vTaskSuspendAll+0x18>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	4a03      	ldr	r2, [pc, #12]	; (8005b58 <vTaskSuspendAll+0x18>)
 8005b4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b4e:	bf00      	nop
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	2000114c 	.word	0x2000114c

08005b5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b66:	2300      	movs	r3, #0
 8005b68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b6a:	4b41      	ldr	r3, [pc, #260]	; (8005c70 <xTaskResumeAll+0x114>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10a      	bne.n	8005b88 <xTaskResumeAll+0x2c>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	603b      	str	r3, [r7, #0]
}
 8005b84:	bf00      	nop
 8005b86:	e7fe      	b.n	8005b86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b88:	f000 fc04 	bl	8006394 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b8c:	4b38      	ldr	r3, [pc, #224]	; (8005c70 <xTaskResumeAll+0x114>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3b01      	subs	r3, #1
 8005b92:	4a37      	ldr	r2, [pc, #220]	; (8005c70 <xTaskResumeAll+0x114>)
 8005b94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b96:	4b36      	ldr	r3, [pc, #216]	; (8005c70 <xTaskResumeAll+0x114>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d161      	bne.n	8005c62 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b9e:	4b35      	ldr	r3, [pc, #212]	; (8005c74 <xTaskResumeAll+0x118>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d05d      	beq.n	8005c62 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ba6:	e02e      	b.n	8005c06 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ba8:	4b33      	ldr	r3, [pc, #204]	; (8005c78 <xTaskResumeAll+0x11c>)
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	3318      	adds	r3, #24
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7ff fd72 	bl	800569e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7ff fd6d 	bl	800569e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	2201      	movs	r2, #1
 8005bca:	409a      	lsls	r2, r3
 8005bcc:	4b2b      	ldr	r3, [pc, #172]	; (8005c7c <xTaskResumeAll+0x120>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	4a2a      	ldr	r2, [pc, #168]	; (8005c7c <xTaskResumeAll+0x120>)
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4a27      	ldr	r2, [pc, #156]	; (8005c80 <xTaskResumeAll+0x124>)
 8005be4:	441a      	add	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	3304      	adds	r3, #4
 8005bea:	4619      	mov	r1, r3
 8005bec:	4610      	mov	r0, r2
 8005bee:	f7ff fcf9 	bl	80055e4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf6:	4b23      	ldr	r3, [pc, #140]	; (8005c84 <xTaskResumeAll+0x128>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d302      	bcc.n	8005c06 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005c00:	4b21      	ldr	r3, [pc, #132]	; (8005c88 <xTaskResumeAll+0x12c>)
 8005c02:	2201      	movs	r2, #1
 8005c04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c06:	4b1c      	ldr	r3, [pc, #112]	; (8005c78 <xTaskResumeAll+0x11c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1cc      	bne.n	8005ba8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c14:	f000 fa08 	bl	8006028 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c18:	4b1c      	ldr	r3, [pc, #112]	; (8005c8c <xTaskResumeAll+0x130>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d010      	beq.n	8005c46 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c24:	f000 f836 	bl	8005c94 <xTaskIncrementTick>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d002      	beq.n	8005c34 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005c2e:	4b16      	ldr	r3, [pc, #88]	; (8005c88 <xTaskResumeAll+0x12c>)
 8005c30:	2201      	movs	r2, #1
 8005c32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	3b01      	subs	r3, #1
 8005c38:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1f1      	bne.n	8005c24 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005c40:	4b12      	ldr	r3, [pc, #72]	; (8005c8c <xTaskResumeAll+0x130>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c46:	4b10      	ldr	r3, [pc, #64]	; (8005c88 <xTaskResumeAll+0x12c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d009      	beq.n	8005c62 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c52:	4b0f      	ldr	r3, [pc, #60]	; (8005c90 <xTaskResumeAll+0x134>)
 8005c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c62:	f000 fbc7 	bl	80063f4 <vPortExitCritical>

	return xAlreadyYielded;
 8005c66:	68bb      	ldr	r3, [r7, #8]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	2000114c 	.word	0x2000114c
 8005c74:	20001124 	.word	0x20001124
 8005c78:	200010e4 	.word	0x200010e4
 8005c7c:	2000112c 	.word	0x2000112c
 8005c80:	20001028 	.word	0x20001028
 8005c84:	20001024 	.word	0x20001024
 8005c88:	20001138 	.word	0x20001138
 8005c8c:	20001134 	.word	0x20001134
 8005c90:	e000ed04 	.word	0xe000ed04

08005c94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c9e:	4b4e      	ldr	r3, [pc, #312]	; (8005dd8 <xTaskIncrementTick+0x144>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f040 808e 	bne.w	8005dc4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ca8:	4b4c      	ldr	r3, [pc, #304]	; (8005ddc <xTaskIncrementTick+0x148>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3301      	adds	r3, #1
 8005cae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005cb0:	4a4a      	ldr	r2, [pc, #296]	; (8005ddc <xTaskIncrementTick+0x148>)
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d120      	bne.n	8005cfe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005cbc:	4b48      	ldr	r3, [pc, #288]	; (8005de0 <xTaskIncrementTick+0x14c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00a      	beq.n	8005cdc <xTaskIncrementTick+0x48>
	__asm volatile
 8005cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	603b      	str	r3, [r7, #0]
}
 8005cd8:	bf00      	nop
 8005cda:	e7fe      	b.n	8005cda <xTaskIncrementTick+0x46>
 8005cdc:	4b40      	ldr	r3, [pc, #256]	; (8005de0 <xTaskIncrementTick+0x14c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	4b40      	ldr	r3, [pc, #256]	; (8005de4 <xTaskIncrementTick+0x150>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a3e      	ldr	r2, [pc, #248]	; (8005de0 <xTaskIncrementTick+0x14c>)
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	4a3e      	ldr	r2, [pc, #248]	; (8005de4 <xTaskIncrementTick+0x150>)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	4b3d      	ldr	r3, [pc, #244]	; (8005de8 <xTaskIncrementTick+0x154>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	4a3c      	ldr	r2, [pc, #240]	; (8005de8 <xTaskIncrementTick+0x154>)
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	f000 f995 	bl	8006028 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005cfe:	4b3b      	ldr	r3, [pc, #236]	; (8005dec <xTaskIncrementTick+0x158>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d348      	bcc.n	8005d9a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d08:	4b35      	ldr	r3, [pc, #212]	; (8005de0 <xTaskIncrementTick+0x14c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d104      	bne.n	8005d1c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d12:	4b36      	ldr	r3, [pc, #216]	; (8005dec <xTaskIncrementTick+0x158>)
 8005d14:	f04f 32ff 	mov.w	r2, #4294967295
 8005d18:	601a      	str	r2, [r3, #0]
					break;
 8005d1a:	e03e      	b.n	8005d9a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d1c:	4b30      	ldr	r3, [pc, #192]	; (8005de0 <xTaskIncrementTick+0x14c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d203      	bcs.n	8005d3c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d34:	4a2d      	ldr	r2, [pc, #180]	; (8005dec <xTaskIncrementTick+0x158>)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d3a:	e02e      	b.n	8005d9a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	3304      	adds	r3, #4
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7ff fcac 	bl	800569e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d004      	beq.n	8005d58 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	3318      	adds	r3, #24
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff fca3 	bl	800569e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	409a      	lsls	r2, r3
 8005d60:	4b23      	ldr	r3, [pc, #140]	; (8005df0 <xTaskIncrementTick+0x15c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	4a22      	ldr	r2, [pc, #136]	; (8005df0 <xTaskIncrementTick+0x15c>)
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d6e:	4613      	mov	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4a1f      	ldr	r2, [pc, #124]	; (8005df4 <xTaskIncrementTick+0x160>)
 8005d78:	441a      	add	r2, r3
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	4619      	mov	r1, r3
 8005d80:	4610      	mov	r0, r2
 8005d82:	f7ff fc2f 	bl	80055e4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d8a:	4b1b      	ldr	r3, [pc, #108]	; (8005df8 <xTaskIncrementTick+0x164>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d3b9      	bcc.n	8005d08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005d94:	2301      	movs	r3, #1
 8005d96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d98:	e7b6      	b.n	8005d08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d9a:	4b17      	ldr	r3, [pc, #92]	; (8005df8 <xTaskIncrementTick+0x164>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da0:	4914      	ldr	r1, [pc, #80]	; (8005df4 <xTaskIncrementTick+0x160>)
 8005da2:	4613      	mov	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	440b      	add	r3, r1
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d901      	bls.n	8005db6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005db2:	2301      	movs	r3, #1
 8005db4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005db6:	4b11      	ldr	r3, [pc, #68]	; (8005dfc <xTaskIncrementTick+0x168>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d007      	beq.n	8005dce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	617b      	str	r3, [r7, #20]
 8005dc2:	e004      	b.n	8005dce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005dc4:	4b0e      	ldr	r3, [pc, #56]	; (8005e00 <xTaskIncrementTick+0x16c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	4a0d      	ldr	r2, [pc, #52]	; (8005e00 <xTaskIncrementTick+0x16c>)
 8005dcc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005dce:	697b      	ldr	r3, [r7, #20]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3718      	adds	r7, #24
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	2000114c 	.word	0x2000114c
 8005ddc:	20001128 	.word	0x20001128
 8005de0:	200010dc 	.word	0x200010dc
 8005de4:	200010e0 	.word	0x200010e0
 8005de8:	2000113c 	.word	0x2000113c
 8005dec:	20001144 	.word	0x20001144
 8005df0:	2000112c 	.word	0x2000112c
 8005df4:	20001028 	.word	0x20001028
 8005df8:	20001024 	.word	0x20001024
 8005dfc:	20001138 	.word	0x20001138
 8005e00:	20001134 	.word	0x20001134

08005e04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e0a:	4b27      	ldr	r3, [pc, #156]	; (8005ea8 <vTaskSwitchContext+0xa4>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e12:	4b26      	ldr	r3, [pc, #152]	; (8005eac <vTaskSwitchContext+0xa8>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e18:	e03f      	b.n	8005e9a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005e1a:	4b24      	ldr	r3, [pc, #144]	; (8005eac <vTaskSwitchContext+0xa8>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e20:	4b23      	ldr	r3, [pc, #140]	; (8005eb0 <vTaskSwitchContext+0xac>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	fab3 f383 	clz	r3, r3
 8005e2c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005e2e:	7afb      	ldrb	r3, [r7, #11]
 8005e30:	f1c3 031f 	rsb	r3, r3, #31
 8005e34:	617b      	str	r3, [r7, #20]
 8005e36:	491f      	ldr	r1, [pc, #124]	; (8005eb4 <vTaskSwitchContext+0xb0>)
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	440b      	add	r3, r1
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10a      	bne.n	8005e60 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4e:	f383 8811 	msr	BASEPRI, r3
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	607b      	str	r3, [r7, #4]
}
 8005e5c:	bf00      	nop
 8005e5e:	e7fe      	b.n	8005e5e <vTaskSwitchContext+0x5a>
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	4613      	mov	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4a12      	ldr	r2, [pc, #72]	; (8005eb4 <vTaskSwitchContext+0xb0>)
 8005e6c:	4413      	add	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	605a      	str	r2, [r3, #4]
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	3308      	adds	r3, #8
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d104      	bne.n	8005e90 <vTaskSwitchContext+0x8c>
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	605a      	str	r2, [r3, #4]
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	4a08      	ldr	r2, [pc, #32]	; (8005eb8 <vTaskSwitchContext+0xb4>)
 8005e98:	6013      	str	r3, [r2, #0]
}
 8005e9a:	bf00      	nop
 8005e9c:	371c      	adds	r7, #28
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	2000114c 	.word	0x2000114c
 8005eac:	20001138 	.word	0x20001138
 8005eb0:	2000112c 	.word	0x2000112c
 8005eb4:	20001028 	.word	0x20001028
 8005eb8:	20001024 	.word	0x20001024

08005ebc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ec4:	f000 f852 	bl	8005f6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ec8:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <prvIdleTask+0x28>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d9f9      	bls.n	8005ec4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ed0:	4b05      	ldr	r3, [pc, #20]	; (8005ee8 <prvIdleTask+0x2c>)
 8005ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed6:	601a      	str	r2, [r3, #0]
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ee0:	e7f0      	b.n	8005ec4 <prvIdleTask+0x8>
 8005ee2:	bf00      	nop
 8005ee4:	20001028 	.word	0x20001028
 8005ee8:	e000ed04 	.word	0xe000ed04

08005eec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	607b      	str	r3, [r7, #4]
 8005ef6:	e00c      	b.n	8005f12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	4613      	mov	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4a12      	ldr	r2, [pc, #72]	; (8005f4c <prvInitialiseTaskLists+0x60>)
 8005f04:	4413      	add	r3, r2
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff fb3f 	bl	800558a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	607b      	str	r3, [r7, #4]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b06      	cmp	r3, #6
 8005f16:	d9ef      	bls.n	8005ef8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f18:	480d      	ldr	r0, [pc, #52]	; (8005f50 <prvInitialiseTaskLists+0x64>)
 8005f1a:	f7ff fb36 	bl	800558a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f1e:	480d      	ldr	r0, [pc, #52]	; (8005f54 <prvInitialiseTaskLists+0x68>)
 8005f20:	f7ff fb33 	bl	800558a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f24:	480c      	ldr	r0, [pc, #48]	; (8005f58 <prvInitialiseTaskLists+0x6c>)
 8005f26:	f7ff fb30 	bl	800558a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f2a:	480c      	ldr	r0, [pc, #48]	; (8005f5c <prvInitialiseTaskLists+0x70>)
 8005f2c:	f7ff fb2d 	bl	800558a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f30:	480b      	ldr	r0, [pc, #44]	; (8005f60 <prvInitialiseTaskLists+0x74>)
 8005f32:	f7ff fb2a 	bl	800558a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f36:	4b0b      	ldr	r3, [pc, #44]	; (8005f64 <prvInitialiseTaskLists+0x78>)
 8005f38:	4a05      	ldr	r2, [pc, #20]	; (8005f50 <prvInitialiseTaskLists+0x64>)
 8005f3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f3c:	4b0a      	ldr	r3, [pc, #40]	; (8005f68 <prvInitialiseTaskLists+0x7c>)
 8005f3e:	4a05      	ldr	r2, [pc, #20]	; (8005f54 <prvInitialiseTaskLists+0x68>)
 8005f40:	601a      	str	r2, [r3, #0]
}
 8005f42:	bf00      	nop
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20001028 	.word	0x20001028
 8005f50:	200010b4 	.word	0x200010b4
 8005f54:	200010c8 	.word	0x200010c8
 8005f58:	200010e4 	.word	0x200010e4
 8005f5c:	200010f8 	.word	0x200010f8
 8005f60:	20001110 	.word	0x20001110
 8005f64:	200010dc 	.word	0x200010dc
 8005f68:	200010e0 	.word	0x200010e0

08005f6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f72:	e019      	b.n	8005fa8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f74:	f000 fa0e 	bl	8006394 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f78:	4b10      	ldr	r3, [pc, #64]	; (8005fbc <prvCheckTasksWaitingTermination+0x50>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3304      	adds	r3, #4
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7ff fb8a 	bl	800569e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f8a:	4b0d      	ldr	r3, [pc, #52]	; (8005fc0 <prvCheckTasksWaitingTermination+0x54>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	4a0b      	ldr	r2, [pc, #44]	; (8005fc0 <prvCheckTasksWaitingTermination+0x54>)
 8005f92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f94:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <prvCheckTasksWaitingTermination+0x58>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	4a0a      	ldr	r2, [pc, #40]	; (8005fc4 <prvCheckTasksWaitingTermination+0x58>)
 8005f9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f9e:	f000 fa29 	bl	80063f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f810 	bl	8005fc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fa8:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <prvCheckTasksWaitingTermination+0x58>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1e1      	bne.n	8005f74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005fb0:	bf00      	nop
 8005fb2:	bf00      	nop
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	200010f8 	.word	0x200010f8
 8005fc0:	20001124 	.word	0x20001124
 8005fc4:	2000110c 	.word	0x2000110c

08005fc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d108      	bne.n	8005fec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f000 fb86 	bl	80066f0 <vPortFree>
				vPortFree( pxTCB );
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fb83 	bl	80066f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005fea:	e018      	b.n	800601e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d103      	bne.n	8005ffe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fb7a 	bl	80066f0 <vPortFree>
	}
 8005ffc:	e00f      	b.n	800601e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006004:	2b02      	cmp	r3, #2
 8006006:	d00a      	beq.n	800601e <prvDeleteTCB+0x56>
	__asm volatile
 8006008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600c:	f383 8811 	msr	BASEPRI, r3
 8006010:	f3bf 8f6f 	isb	sy
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	60fb      	str	r3, [r7, #12]
}
 800601a:	bf00      	nop
 800601c:	e7fe      	b.n	800601c <prvDeleteTCB+0x54>
	}
 800601e:	bf00      	nop
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
	...

08006028 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800602e:	4b0c      	ldr	r3, [pc, #48]	; (8006060 <prvResetNextTaskUnblockTime+0x38>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d104      	bne.n	8006042 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006038:	4b0a      	ldr	r3, [pc, #40]	; (8006064 <prvResetNextTaskUnblockTime+0x3c>)
 800603a:	f04f 32ff 	mov.w	r2, #4294967295
 800603e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006040:	e008      	b.n	8006054 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006042:	4b07      	ldr	r3, [pc, #28]	; (8006060 <prvResetNextTaskUnblockTime+0x38>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	4a04      	ldr	r2, [pc, #16]	; (8006064 <prvResetNextTaskUnblockTime+0x3c>)
 8006052:	6013      	str	r3, [r2, #0]
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	200010dc 	.word	0x200010dc
 8006064:	20001144 	.word	0x20001144

08006068 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006072:	4b29      	ldr	r3, [pc, #164]	; (8006118 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006078:	4b28      	ldr	r3, [pc, #160]	; (800611c <prvAddCurrentTaskToDelayedList+0xb4>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	3304      	adds	r3, #4
 800607e:	4618      	mov	r0, r3
 8006080:	f7ff fb0d 	bl	800569e <uxListRemove>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10b      	bne.n	80060a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800608a:	4b24      	ldr	r3, [pc, #144]	; (800611c <prvAddCurrentTaskToDelayedList+0xb4>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	2201      	movs	r2, #1
 8006092:	fa02 f303 	lsl.w	r3, r2, r3
 8006096:	43da      	mvns	r2, r3
 8006098:	4b21      	ldr	r3, [pc, #132]	; (8006120 <prvAddCurrentTaskToDelayedList+0xb8>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4013      	ands	r3, r2
 800609e:	4a20      	ldr	r2, [pc, #128]	; (8006120 <prvAddCurrentTaskToDelayedList+0xb8>)
 80060a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a8:	d10a      	bne.n	80060c0 <prvAddCurrentTaskToDelayedList+0x58>
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d007      	beq.n	80060c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060b0:	4b1a      	ldr	r3, [pc, #104]	; (800611c <prvAddCurrentTaskToDelayedList+0xb4>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3304      	adds	r3, #4
 80060b6:	4619      	mov	r1, r3
 80060b8:	481a      	ldr	r0, [pc, #104]	; (8006124 <prvAddCurrentTaskToDelayedList+0xbc>)
 80060ba:	f7ff fa93 	bl	80055e4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060be:	e026      	b.n	800610e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4413      	add	r3, r2
 80060c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060c8:	4b14      	ldr	r3, [pc, #80]	; (800611c <prvAddCurrentTaskToDelayedList+0xb4>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d209      	bcs.n	80060ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060d8:	4b13      	ldr	r3, [pc, #76]	; (8006128 <prvAddCurrentTaskToDelayedList+0xc0>)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	4b0f      	ldr	r3, [pc, #60]	; (800611c <prvAddCurrentTaskToDelayedList+0xb4>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	3304      	adds	r3, #4
 80060e2:	4619      	mov	r1, r3
 80060e4:	4610      	mov	r0, r2
 80060e6:	f7ff faa1 	bl	800562c <vListInsert>
}
 80060ea:	e010      	b.n	800610e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060ec:	4b0f      	ldr	r3, [pc, #60]	; (800612c <prvAddCurrentTaskToDelayedList+0xc4>)
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	4b0a      	ldr	r3, [pc, #40]	; (800611c <prvAddCurrentTaskToDelayedList+0xb4>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3304      	adds	r3, #4
 80060f6:	4619      	mov	r1, r3
 80060f8:	4610      	mov	r0, r2
 80060fa:	f7ff fa97 	bl	800562c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060fe:	4b0c      	ldr	r3, [pc, #48]	; (8006130 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	429a      	cmp	r2, r3
 8006106:	d202      	bcs.n	800610e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006108:	4a09      	ldr	r2, [pc, #36]	; (8006130 <prvAddCurrentTaskToDelayedList+0xc8>)
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	6013      	str	r3, [r2, #0]
}
 800610e:	bf00      	nop
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20001128 	.word	0x20001128
 800611c:	20001024 	.word	0x20001024
 8006120:	2000112c 	.word	0x2000112c
 8006124:	20001110 	.word	0x20001110
 8006128:	200010e0 	.word	0x200010e0
 800612c:	200010dc 	.word	0x200010dc
 8006130:	20001144 	.word	0x20001144

08006134 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	3b04      	subs	r3, #4
 8006144:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800614c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3b04      	subs	r3, #4
 8006152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	f023 0201 	bic.w	r2, r3, #1
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	3b04      	subs	r3, #4
 8006162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006164:	4a0c      	ldr	r2, [pc, #48]	; (8006198 <pxPortInitialiseStack+0x64>)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	3b14      	subs	r3, #20
 800616e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	3b04      	subs	r3, #4
 800617a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f06f 0202 	mvn.w	r2, #2
 8006182:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3b20      	subs	r3, #32
 8006188:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800618a:	68fb      	ldr	r3, [r7, #12]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	0800619d 	.word	0x0800619d

0800619c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80061a2:	2300      	movs	r3, #0
 80061a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80061a6:	4b12      	ldr	r3, [pc, #72]	; (80061f0 <prvTaskExitError+0x54>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ae:	d00a      	beq.n	80061c6 <prvTaskExitError+0x2a>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	60fb      	str	r3, [r7, #12]
}
 80061c2:	bf00      	nop
 80061c4:	e7fe      	b.n	80061c4 <prvTaskExitError+0x28>
	__asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	60bb      	str	r3, [r7, #8]
}
 80061d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061da:	bf00      	nop
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d0fc      	beq.n	80061dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061e2:	bf00      	nop
 80061e4:	bf00      	nop
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	2000000c 	.word	0x2000000c
	...

08006200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006200:	4b07      	ldr	r3, [pc, #28]	; (8006220 <pxCurrentTCBConst2>)
 8006202:	6819      	ldr	r1, [r3, #0]
 8006204:	6808      	ldr	r0, [r1, #0]
 8006206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800620a:	f380 8809 	msr	PSP, r0
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f04f 0000 	mov.w	r0, #0
 8006216:	f380 8811 	msr	BASEPRI, r0
 800621a:	4770      	bx	lr
 800621c:	f3af 8000 	nop.w

08006220 <pxCurrentTCBConst2>:
 8006220:	20001024 	.word	0x20001024
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop

08006228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006228:	4808      	ldr	r0, [pc, #32]	; (800624c <prvPortStartFirstTask+0x24>)
 800622a:	6800      	ldr	r0, [r0, #0]
 800622c:	6800      	ldr	r0, [r0, #0]
 800622e:	f380 8808 	msr	MSP, r0
 8006232:	f04f 0000 	mov.w	r0, #0
 8006236:	f380 8814 	msr	CONTROL, r0
 800623a:	b662      	cpsie	i
 800623c:	b661      	cpsie	f
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	df00      	svc	0
 8006248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800624a:	bf00      	nop
 800624c:	e000ed08 	.word	0xe000ed08

08006250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006256:	4b46      	ldr	r3, [pc, #280]	; (8006370 <xPortStartScheduler+0x120>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a46      	ldr	r2, [pc, #280]	; (8006374 <xPortStartScheduler+0x124>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d10a      	bne.n	8006276 <xPortStartScheduler+0x26>
	__asm volatile
 8006260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	613b      	str	r3, [r7, #16]
}
 8006272:	bf00      	nop
 8006274:	e7fe      	b.n	8006274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006276:	4b3e      	ldr	r3, [pc, #248]	; (8006370 <xPortStartScheduler+0x120>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a3f      	ldr	r2, [pc, #252]	; (8006378 <xPortStartScheduler+0x128>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d10a      	bne.n	8006296 <xPortStartScheduler+0x46>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	60fb      	str	r3, [r7, #12]
}
 8006292:	bf00      	nop
 8006294:	e7fe      	b.n	8006294 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006296:	4b39      	ldr	r3, [pc, #228]	; (800637c <xPortStartScheduler+0x12c>)
 8006298:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	22ff      	movs	r2, #255	; 0xff
 80062a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80062b0:	78fb      	ldrb	r3, [r7, #3]
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	4b31      	ldr	r3, [pc, #196]	; (8006380 <xPortStartScheduler+0x130>)
 80062bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80062be:	4b31      	ldr	r3, [pc, #196]	; (8006384 <xPortStartScheduler+0x134>)
 80062c0:	2207      	movs	r2, #7
 80062c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062c4:	e009      	b.n	80062da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80062c6:	4b2f      	ldr	r3, [pc, #188]	; (8006384 <xPortStartScheduler+0x134>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	4a2d      	ldr	r2, [pc, #180]	; (8006384 <xPortStartScheduler+0x134>)
 80062ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80062d0:	78fb      	ldrb	r3, [r7, #3]
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062da:	78fb      	ldrb	r3, [r7, #3]
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e2:	2b80      	cmp	r3, #128	; 0x80
 80062e4:	d0ef      	beq.n	80062c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80062e6:	4b27      	ldr	r3, [pc, #156]	; (8006384 <xPortStartScheduler+0x134>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f1c3 0307 	rsb	r3, r3, #7
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d00a      	beq.n	8006308 <xPortStartScheduler+0xb8>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	60bb      	str	r3, [r7, #8]
}
 8006304:	bf00      	nop
 8006306:	e7fe      	b.n	8006306 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006308:	4b1e      	ldr	r3, [pc, #120]	; (8006384 <xPortStartScheduler+0x134>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	021b      	lsls	r3, r3, #8
 800630e:	4a1d      	ldr	r2, [pc, #116]	; (8006384 <xPortStartScheduler+0x134>)
 8006310:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006312:	4b1c      	ldr	r3, [pc, #112]	; (8006384 <xPortStartScheduler+0x134>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800631a:	4a1a      	ldr	r2, [pc, #104]	; (8006384 <xPortStartScheduler+0x134>)
 800631c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	b2da      	uxtb	r2, r3
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006326:	4b18      	ldr	r3, [pc, #96]	; (8006388 <xPortStartScheduler+0x138>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a17      	ldr	r2, [pc, #92]	; (8006388 <xPortStartScheduler+0x138>)
 800632c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006330:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006332:	4b15      	ldr	r3, [pc, #84]	; (8006388 <xPortStartScheduler+0x138>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a14      	ldr	r2, [pc, #80]	; (8006388 <xPortStartScheduler+0x138>)
 8006338:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800633c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800633e:	f000 f8dd 	bl	80064fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006342:	4b12      	ldr	r3, [pc, #72]	; (800638c <xPortStartScheduler+0x13c>)
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006348:	f000 f8fc 	bl	8006544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800634c:	4b10      	ldr	r3, [pc, #64]	; (8006390 <xPortStartScheduler+0x140>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a0f      	ldr	r2, [pc, #60]	; (8006390 <xPortStartScheduler+0x140>)
 8006352:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006356:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006358:	f7ff ff66 	bl	8006228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800635c:	f7ff fd52 	bl	8005e04 <vTaskSwitchContext>
	prvTaskExitError();
 8006360:	f7ff ff1c 	bl	800619c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3718      	adds	r7, #24
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	e000ed00 	.word	0xe000ed00
 8006374:	410fc271 	.word	0x410fc271
 8006378:	410fc270 	.word	0x410fc270
 800637c:	e000e400 	.word	0xe000e400
 8006380:	20001150 	.word	0x20001150
 8006384:	20001154 	.word	0x20001154
 8006388:	e000ed20 	.word	0xe000ed20
 800638c:	2000000c 	.word	0x2000000c
 8006390:	e000ef34 	.word	0xe000ef34

08006394 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
	__asm volatile
 800639a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639e:	f383 8811 	msr	BASEPRI, r3
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	607b      	str	r3, [r7, #4]
}
 80063ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80063ae:	4b0f      	ldr	r3, [pc, #60]	; (80063ec <vPortEnterCritical+0x58>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	3301      	adds	r3, #1
 80063b4:	4a0d      	ldr	r2, [pc, #52]	; (80063ec <vPortEnterCritical+0x58>)
 80063b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80063b8:	4b0c      	ldr	r3, [pc, #48]	; (80063ec <vPortEnterCritical+0x58>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d10f      	bne.n	80063e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80063c0:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <vPortEnterCritical+0x5c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	603b      	str	r3, [r7, #0]
}
 80063dc:	bf00      	nop
 80063de:	e7fe      	b.n	80063de <vPortEnterCritical+0x4a>
	}
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	2000000c 	.word	0x2000000c
 80063f0:	e000ed04 	.word	0xe000ed04

080063f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80063fa:	4b12      	ldr	r3, [pc, #72]	; (8006444 <vPortExitCritical+0x50>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10a      	bne.n	8006418 <vPortExitCritical+0x24>
	__asm volatile
 8006402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	607b      	str	r3, [r7, #4]
}
 8006414:	bf00      	nop
 8006416:	e7fe      	b.n	8006416 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006418:	4b0a      	ldr	r3, [pc, #40]	; (8006444 <vPortExitCritical+0x50>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3b01      	subs	r3, #1
 800641e:	4a09      	ldr	r2, [pc, #36]	; (8006444 <vPortExitCritical+0x50>)
 8006420:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006422:	4b08      	ldr	r3, [pc, #32]	; (8006444 <vPortExitCritical+0x50>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d105      	bne.n	8006436 <vPortExitCritical+0x42>
 800642a:	2300      	movs	r3, #0
 800642c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006434:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	2000000c 	.word	0x2000000c
	...

08006450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006450:	f3ef 8009 	mrs	r0, PSP
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	4b15      	ldr	r3, [pc, #84]	; (80064b0 <pxCurrentTCBConst>)
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	f01e 0f10 	tst.w	lr, #16
 8006460:	bf08      	it	eq
 8006462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646a:	6010      	str	r0, [r2, #0]
 800646c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006470:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006474:	f380 8811 	msr	BASEPRI, r0
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f7ff fcc0 	bl	8005e04 <vTaskSwitchContext>
 8006484:	f04f 0000 	mov.w	r0, #0
 8006488:	f380 8811 	msr	BASEPRI, r0
 800648c:	bc09      	pop	{r0, r3}
 800648e:	6819      	ldr	r1, [r3, #0]
 8006490:	6808      	ldr	r0, [r1, #0]
 8006492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006496:	f01e 0f10 	tst.w	lr, #16
 800649a:	bf08      	it	eq
 800649c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80064a0:	f380 8809 	msr	PSP, r0
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	f3af 8000 	nop.w

080064b0 <pxCurrentTCBConst>:
 80064b0:	20001024 	.word	0x20001024
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop

080064b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	607b      	str	r3, [r7, #4]
}
 80064d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80064d2:	f7ff fbdf 	bl	8005c94 <xTaskIncrementTick>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d003      	beq.n	80064e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80064dc:	4b06      	ldr	r3, [pc, #24]	; (80064f8 <SysTick_Handler+0x40>)
 80064de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	2300      	movs	r3, #0
 80064e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	f383 8811 	msr	BASEPRI, r3
}
 80064ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80064f0:	bf00      	nop
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	e000ed04 	.word	0xe000ed04

080064fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006500:	4b0b      	ldr	r3, [pc, #44]	; (8006530 <vPortSetupTimerInterrupt+0x34>)
 8006502:	2200      	movs	r2, #0
 8006504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006506:	4b0b      	ldr	r3, [pc, #44]	; (8006534 <vPortSetupTimerInterrupt+0x38>)
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800650c:	4b0a      	ldr	r3, [pc, #40]	; (8006538 <vPortSetupTimerInterrupt+0x3c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a0a      	ldr	r2, [pc, #40]	; (800653c <vPortSetupTimerInterrupt+0x40>)
 8006512:	fba2 2303 	umull	r2, r3, r2, r3
 8006516:	099b      	lsrs	r3, r3, #6
 8006518:	4a09      	ldr	r2, [pc, #36]	; (8006540 <vPortSetupTimerInterrupt+0x44>)
 800651a:	3b01      	subs	r3, #1
 800651c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800651e:	4b04      	ldr	r3, [pc, #16]	; (8006530 <vPortSetupTimerInterrupt+0x34>)
 8006520:	2207      	movs	r2, #7
 8006522:	601a      	str	r2, [r3, #0]
}
 8006524:	bf00      	nop
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	e000e010 	.word	0xe000e010
 8006534:	e000e018 	.word	0xe000e018
 8006538:	20000000 	.word	0x20000000
 800653c:	10624dd3 	.word	0x10624dd3
 8006540:	e000e014 	.word	0xe000e014

08006544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006544:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006554 <vPortEnableVFP+0x10>
 8006548:	6801      	ldr	r1, [r0, #0]
 800654a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800654e:	6001      	str	r1, [r0, #0]
 8006550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006552:	bf00      	nop
 8006554:	e000ed88 	.word	0xe000ed88

08006558 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b08a      	sub	sp, #40	; 0x28
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006560:	2300      	movs	r3, #0
 8006562:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006564:	f7ff faec 	bl	8005b40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006568:	4b5b      	ldr	r3, [pc, #364]	; (80066d8 <pvPortMalloc+0x180>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006570:	f000 f920 	bl	80067b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006574:	4b59      	ldr	r3, [pc, #356]	; (80066dc <pvPortMalloc+0x184>)
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4013      	ands	r3, r2
 800657c:	2b00      	cmp	r3, #0
 800657e:	f040 8093 	bne.w	80066a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d01d      	beq.n	80065c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006588:	2208      	movs	r2, #8
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4413      	add	r3, r2
 800658e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f003 0307 	and.w	r3, r3, #7
 8006596:	2b00      	cmp	r3, #0
 8006598:	d014      	beq.n	80065c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f023 0307 	bic.w	r3, r3, #7
 80065a0:	3308      	adds	r3, #8
 80065a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f003 0307 	and.w	r3, r3, #7
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <pvPortMalloc+0x6c>
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	617b      	str	r3, [r7, #20]
}
 80065c0:	bf00      	nop
 80065c2:	e7fe      	b.n	80065c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d06e      	beq.n	80066a8 <pvPortMalloc+0x150>
 80065ca:	4b45      	ldr	r3, [pc, #276]	; (80066e0 <pvPortMalloc+0x188>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d869      	bhi.n	80066a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80065d4:	4b43      	ldr	r3, [pc, #268]	; (80066e4 <pvPortMalloc+0x18c>)
 80065d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80065d8:	4b42      	ldr	r3, [pc, #264]	; (80066e4 <pvPortMalloc+0x18c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065de:	e004      	b.n	80065ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d903      	bls.n	80065fc <pvPortMalloc+0xa4>
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1f1      	bne.n	80065e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80065fc:	4b36      	ldr	r3, [pc, #216]	; (80066d8 <pvPortMalloc+0x180>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006602:	429a      	cmp	r2, r3
 8006604:	d050      	beq.n	80066a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2208      	movs	r2, #8
 800660c:	4413      	add	r3, r2
 800660e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	1ad2      	subs	r2, r2, r3
 8006620:	2308      	movs	r3, #8
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	429a      	cmp	r2, r3
 8006626:	d91f      	bls.n	8006668 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4413      	add	r3, r2
 800662e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	f003 0307 	and.w	r3, r3, #7
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00a      	beq.n	8006650 <pvPortMalloc+0xf8>
	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	613b      	str	r3, [r7, #16]
}
 800664c:	bf00      	nop
 800664e:	e7fe      	b.n	800664e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	1ad2      	subs	r2, r2, r3
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006662:	69b8      	ldr	r0, [r7, #24]
 8006664:	f000 f908 	bl	8006878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006668:	4b1d      	ldr	r3, [pc, #116]	; (80066e0 <pvPortMalloc+0x188>)
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	4a1b      	ldr	r2, [pc, #108]	; (80066e0 <pvPortMalloc+0x188>)
 8006674:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006676:	4b1a      	ldr	r3, [pc, #104]	; (80066e0 <pvPortMalloc+0x188>)
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	4b1b      	ldr	r3, [pc, #108]	; (80066e8 <pvPortMalloc+0x190>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	429a      	cmp	r2, r3
 8006680:	d203      	bcs.n	800668a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006682:	4b17      	ldr	r3, [pc, #92]	; (80066e0 <pvPortMalloc+0x188>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a18      	ldr	r2, [pc, #96]	; (80066e8 <pvPortMalloc+0x190>)
 8006688:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	4b13      	ldr	r3, [pc, #76]	; (80066dc <pvPortMalloc+0x184>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	431a      	orrs	r2, r3
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	2200      	movs	r2, #0
 800669c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800669e:	4b13      	ldr	r3, [pc, #76]	; (80066ec <pvPortMalloc+0x194>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	3301      	adds	r3, #1
 80066a4:	4a11      	ldr	r2, [pc, #68]	; (80066ec <pvPortMalloc+0x194>)
 80066a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80066a8:	f7ff fa58 	bl	8005b5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00a      	beq.n	80066cc <pvPortMalloc+0x174>
	__asm volatile
 80066b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	60fb      	str	r3, [r7, #12]
}
 80066c8:	bf00      	nop
 80066ca:	e7fe      	b.n	80066ca <pvPortMalloc+0x172>
	return pvReturn;
 80066cc:	69fb      	ldr	r3, [r7, #28]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3728      	adds	r7, #40	; 0x28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	20004d60 	.word	0x20004d60
 80066dc:	20004d74 	.word	0x20004d74
 80066e0:	20004d64 	.word	0x20004d64
 80066e4:	20004d58 	.word	0x20004d58
 80066e8:	20004d68 	.word	0x20004d68
 80066ec:	20004d6c 	.word	0x20004d6c

080066f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d04d      	beq.n	800679e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006702:	2308      	movs	r3, #8
 8006704:	425b      	negs	r3, r3
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	4413      	add	r3, r2
 800670a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	4b24      	ldr	r3, [pc, #144]	; (80067a8 <vPortFree+0xb8>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4013      	ands	r3, r2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10a      	bne.n	8006734 <vPortFree+0x44>
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	60fb      	str	r3, [r7, #12]
}
 8006730:	bf00      	nop
 8006732:	e7fe      	b.n	8006732 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00a      	beq.n	8006752 <vPortFree+0x62>
	__asm volatile
 800673c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	60bb      	str	r3, [r7, #8]
}
 800674e:	bf00      	nop
 8006750:	e7fe      	b.n	8006750 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	4b14      	ldr	r3, [pc, #80]	; (80067a8 <vPortFree+0xb8>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4013      	ands	r3, r2
 800675c:	2b00      	cmp	r3, #0
 800675e:	d01e      	beq.n	800679e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d11a      	bne.n	800679e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	4b0e      	ldr	r3, [pc, #56]	; (80067a8 <vPortFree+0xb8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	43db      	mvns	r3, r3
 8006772:	401a      	ands	r2, r3
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006778:	f7ff f9e2 	bl	8005b40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	4b0a      	ldr	r3, [pc, #40]	; (80067ac <vPortFree+0xbc>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4413      	add	r3, r2
 8006786:	4a09      	ldr	r2, [pc, #36]	; (80067ac <vPortFree+0xbc>)
 8006788:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800678a:	6938      	ldr	r0, [r7, #16]
 800678c:	f000 f874 	bl	8006878 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006790:	4b07      	ldr	r3, [pc, #28]	; (80067b0 <vPortFree+0xc0>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3301      	adds	r3, #1
 8006796:	4a06      	ldr	r2, [pc, #24]	; (80067b0 <vPortFree+0xc0>)
 8006798:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800679a:	f7ff f9df 	bl	8005b5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800679e:	bf00      	nop
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	20004d74 	.word	0x20004d74
 80067ac:	20004d64 	.word	0x20004d64
 80067b0:	20004d70 	.word	0x20004d70

080067b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80067ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80067be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80067c0:	4b27      	ldr	r3, [pc, #156]	; (8006860 <prvHeapInit+0xac>)
 80067c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f003 0307 	and.w	r3, r3, #7
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00c      	beq.n	80067e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3307      	adds	r3, #7
 80067d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f023 0307 	bic.w	r3, r3, #7
 80067da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	4a1f      	ldr	r2, [pc, #124]	; (8006860 <prvHeapInit+0xac>)
 80067e4:	4413      	add	r3, r2
 80067e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80067ec:	4a1d      	ldr	r2, [pc, #116]	; (8006864 <prvHeapInit+0xb0>)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80067f2:	4b1c      	ldr	r3, [pc, #112]	; (8006864 <prvHeapInit+0xb0>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	4413      	add	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006800:	2208      	movs	r2, #8
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	1a9b      	subs	r3, r3, r2
 8006806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 0307 	bic.w	r3, r3, #7
 800680e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4a15      	ldr	r2, [pc, #84]	; (8006868 <prvHeapInit+0xb4>)
 8006814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006816:	4b14      	ldr	r3, [pc, #80]	; (8006868 <prvHeapInit+0xb4>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2200      	movs	r2, #0
 800681c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800681e:	4b12      	ldr	r3, [pc, #72]	; (8006868 <prvHeapInit+0xb4>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2200      	movs	r2, #0
 8006824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	1ad2      	subs	r2, r2, r3
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006834:	4b0c      	ldr	r3, [pc, #48]	; (8006868 <prvHeapInit+0xb4>)
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	4a0a      	ldr	r2, [pc, #40]	; (800686c <prvHeapInit+0xb8>)
 8006842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	4a09      	ldr	r2, [pc, #36]	; (8006870 <prvHeapInit+0xbc>)
 800684a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800684c:	4b09      	ldr	r3, [pc, #36]	; (8006874 <prvHeapInit+0xc0>)
 800684e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006852:	601a      	str	r2, [r3, #0]
}
 8006854:	bf00      	nop
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	20001158 	.word	0x20001158
 8006864:	20004d58 	.word	0x20004d58
 8006868:	20004d60 	.word	0x20004d60
 800686c:	20004d68 	.word	0x20004d68
 8006870:	20004d64 	.word	0x20004d64
 8006874:	20004d74 	.word	0x20004d74

08006878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006880:	4b28      	ldr	r3, [pc, #160]	; (8006924 <prvInsertBlockIntoFreeList+0xac>)
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	e002      	b.n	800688c <prvInsertBlockIntoFreeList+0x14>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	429a      	cmp	r2, r3
 8006894:	d8f7      	bhi.n	8006886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	4413      	add	r3, r2
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d108      	bne.n	80068ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	441a      	add	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	441a      	add	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d118      	bne.n	8006900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	4b15      	ldr	r3, [pc, #84]	; (8006928 <prvInsertBlockIntoFreeList+0xb0>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d00d      	beq.n	80068f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	441a      	add	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	e008      	b.n	8006908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068f6:	4b0c      	ldr	r3, [pc, #48]	; (8006928 <prvInsertBlockIntoFreeList+0xb0>)
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	e003      	b.n	8006908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	429a      	cmp	r2, r3
 800690e:	d002      	beq.n	8006916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006916:	bf00      	nop
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	20004d58 	.word	0x20004d58
 8006928:	20004d60 	.word	0x20004d60

0800692c <atoi>:
 800692c:	220a      	movs	r2, #10
 800692e:	2100      	movs	r1, #0
 8006930:	f000 b938 	b.w	8006ba4 <strtol>

08006934 <malloc>:
 8006934:	4b02      	ldr	r3, [pc, #8]	; (8006940 <malloc+0xc>)
 8006936:	4601      	mov	r1, r0
 8006938:	6818      	ldr	r0, [r3, #0]
 800693a:	f000 b823 	b.w	8006984 <_malloc_r>
 800693e:	bf00      	nop
 8006940:	20000068 	.word	0x20000068

08006944 <sbrk_aligned>:
 8006944:	b570      	push	{r4, r5, r6, lr}
 8006946:	4e0e      	ldr	r6, [pc, #56]	; (8006980 <sbrk_aligned+0x3c>)
 8006948:	460c      	mov	r4, r1
 800694a:	6831      	ldr	r1, [r6, #0]
 800694c:	4605      	mov	r5, r0
 800694e:	b911      	cbnz	r1, 8006956 <sbrk_aligned+0x12>
 8006950:	f000 fc56 	bl	8007200 <_sbrk_r>
 8006954:	6030      	str	r0, [r6, #0]
 8006956:	4621      	mov	r1, r4
 8006958:	4628      	mov	r0, r5
 800695a:	f000 fc51 	bl	8007200 <_sbrk_r>
 800695e:	1c43      	adds	r3, r0, #1
 8006960:	d00a      	beq.n	8006978 <sbrk_aligned+0x34>
 8006962:	1cc4      	adds	r4, r0, #3
 8006964:	f024 0403 	bic.w	r4, r4, #3
 8006968:	42a0      	cmp	r0, r4
 800696a:	d007      	beq.n	800697c <sbrk_aligned+0x38>
 800696c:	1a21      	subs	r1, r4, r0
 800696e:	4628      	mov	r0, r5
 8006970:	f000 fc46 	bl	8007200 <_sbrk_r>
 8006974:	3001      	adds	r0, #1
 8006976:	d101      	bne.n	800697c <sbrk_aligned+0x38>
 8006978:	f04f 34ff 	mov.w	r4, #4294967295
 800697c:	4620      	mov	r0, r4
 800697e:	bd70      	pop	{r4, r5, r6, pc}
 8006980:	20004d7c 	.word	0x20004d7c

08006984 <_malloc_r>:
 8006984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006988:	1ccd      	adds	r5, r1, #3
 800698a:	f025 0503 	bic.w	r5, r5, #3
 800698e:	3508      	adds	r5, #8
 8006990:	2d0c      	cmp	r5, #12
 8006992:	bf38      	it	cc
 8006994:	250c      	movcc	r5, #12
 8006996:	2d00      	cmp	r5, #0
 8006998:	4607      	mov	r7, r0
 800699a:	db01      	blt.n	80069a0 <_malloc_r+0x1c>
 800699c:	42a9      	cmp	r1, r5
 800699e:	d905      	bls.n	80069ac <_malloc_r+0x28>
 80069a0:	230c      	movs	r3, #12
 80069a2:	603b      	str	r3, [r7, #0]
 80069a4:	2600      	movs	r6, #0
 80069a6:	4630      	mov	r0, r6
 80069a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a80 <_malloc_r+0xfc>
 80069b0:	f000 f868 	bl	8006a84 <__malloc_lock>
 80069b4:	f8d8 3000 	ldr.w	r3, [r8]
 80069b8:	461c      	mov	r4, r3
 80069ba:	bb5c      	cbnz	r4, 8006a14 <_malloc_r+0x90>
 80069bc:	4629      	mov	r1, r5
 80069be:	4638      	mov	r0, r7
 80069c0:	f7ff ffc0 	bl	8006944 <sbrk_aligned>
 80069c4:	1c43      	adds	r3, r0, #1
 80069c6:	4604      	mov	r4, r0
 80069c8:	d155      	bne.n	8006a76 <_malloc_r+0xf2>
 80069ca:	f8d8 4000 	ldr.w	r4, [r8]
 80069ce:	4626      	mov	r6, r4
 80069d0:	2e00      	cmp	r6, #0
 80069d2:	d145      	bne.n	8006a60 <_malloc_r+0xdc>
 80069d4:	2c00      	cmp	r4, #0
 80069d6:	d048      	beq.n	8006a6a <_malloc_r+0xe6>
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	4631      	mov	r1, r6
 80069dc:	4638      	mov	r0, r7
 80069de:	eb04 0903 	add.w	r9, r4, r3
 80069e2:	f000 fc0d 	bl	8007200 <_sbrk_r>
 80069e6:	4581      	cmp	r9, r0
 80069e8:	d13f      	bne.n	8006a6a <_malloc_r+0xe6>
 80069ea:	6821      	ldr	r1, [r4, #0]
 80069ec:	1a6d      	subs	r5, r5, r1
 80069ee:	4629      	mov	r1, r5
 80069f0:	4638      	mov	r0, r7
 80069f2:	f7ff ffa7 	bl	8006944 <sbrk_aligned>
 80069f6:	3001      	adds	r0, #1
 80069f8:	d037      	beq.n	8006a6a <_malloc_r+0xe6>
 80069fa:	6823      	ldr	r3, [r4, #0]
 80069fc:	442b      	add	r3, r5
 80069fe:	6023      	str	r3, [r4, #0]
 8006a00:	f8d8 3000 	ldr.w	r3, [r8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d038      	beq.n	8006a7a <_malloc_r+0xf6>
 8006a08:	685a      	ldr	r2, [r3, #4]
 8006a0a:	42a2      	cmp	r2, r4
 8006a0c:	d12b      	bne.n	8006a66 <_malloc_r+0xe2>
 8006a0e:	2200      	movs	r2, #0
 8006a10:	605a      	str	r2, [r3, #4]
 8006a12:	e00f      	b.n	8006a34 <_malloc_r+0xb0>
 8006a14:	6822      	ldr	r2, [r4, #0]
 8006a16:	1b52      	subs	r2, r2, r5
 8006a18:	d41f      	bmi.n	8006a5a <_malloc_r+0xd6>
 8006a1a:	2a0b      	cmp	r2, #11
 8006a1c:	d917      	bls.n	8006a4e <_malloc_r+0xca>
 8006a1e:	1961      	adds	r1, r4, r5
 8006a20:	42a3      	cmp	r3, r4
 8006a22:	6025      	str	r5, [r4, #0]
 8006a24:	bf18      	it	ne
 8006a26:	6059      	strne	r1, [r3, #4]
 8006a28:	6863      	ldr	r3, [r4, #4]
 8006a2a:	bf08      	it	eq
 8006a2c:	f8c8 1000 	streq.w	r1, [r8]
 8006a30:	5162      	str	r2, [r4, r5]
 8006a32:	604b      	str	r3, [r1, #4]
 8006a34:	4638      	mov	r0, r7
 8006a36:	f104 060b 	add.w	r6, r4, #11
 8006a3a:	f000 f829 	bl	8006a90 <__malloc_unlock>
 8006a3e:	f026 0607 	bic.w	r6, r6, #7
 8006a42:	1d23      	adds	r3, r4, #4
 8006a44:	1af2      	subs	r2, r6, r3
 8006a46:	d0ae      	beq.n	80069a6 <_malloc_r+0x22>
 8006a48:	1b9b      	subs	r3, r3, r6
 8006a4a:	50a3      	str	r3, [r4, r2]
 8006a4c:	e7ab      	b.n	80069a6 <_malloc_r+0x22>
 8006a4e:	42a3      	cmp	r3, r4
 8006a50:	6862      	ldr	r2, [r4, #4]
 8006a52:	d1dd      	bne.n	8006a10 <_malloc_r+0x8c>
 8006a54:	f8c8 2000 	str.w	r2, [r8]
 8006a58:	e7ec      	b.n	8006a34 <_malloc_r+0xb0>
 8006a5a:	4623      	mov	r3, r4
 8006a5c:	6864      	ldr	r4, [r4, #4]
 8006a5e:	e7ac      	b.n	80069ba <_malloc_r+0x36>
 8006a60:	4634      	mov	r4, r6
 8006a62:	6876      	ldr	r6, [r6, #4]
 8006a64:	e7b4      	b.n	80069d0 <_malloc_r+0x4c>
 8006a66:	4613      	mov	r3, r2
 8006a68:	e7cc      	b.n	8006a04 <_malloc_r+0x80>
 8006a6a:	230c      	movs	r3, #12
 8006a6c:	603b      	str	r3, [r7, #0]
 8006a6e:	4638      	mov	r0, r7
 8006a70:	f000 f80e 	bl	8006a90 <__malloc_unlock>
 8006a74:	e797      	b.n	80069a6 <_malloc_r+0x22>
 8006a76:	6025      	str	r5, [r4, #0]
 8006a78:	e7dc      	b.n	8006a34 <_malloc_r+0xb0>
 8006a7a:	605b      	str	r3, [r3, #4]
 8006a7c:	deff      	udf	#255	; 0xff
 8006a7e:	bf00      	nop
 8006a80:	20004d78 	.word	0x20004d78

08006a84 <__malloc_lock>:
 8006a84:	4801      	ldr	r0, [pc, #4]	; (8006a8c <__malloc_lock+0x8>)
 8006a86:	f000 bc08 	b.w	800729a <__retarget_lock_acquire_recursive>
 8006a8a:	bf00      	nop
 8006a8c:	20004ec0 	.word	0x20004ec0

08006a90 <__malloc_unlock>:
 8006a90:	4801      	ldr	r0, [pc, #4]	; (8006a98 <__malloc_unlock+0x8>)
 8006a92:	f000 bc03 	b.w	800729c <__retarget_lock_release_recursive>
 8006a96:	bf00      	nop
 8006a98:	20004ec0 	.word	0x20004ec0

08006a9c <_strtol_l.constprop.0>:
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa2:	d001      	beq.n	8006aa8 <_strtol_l.constprop.0+0xc>
 8006aa4:	2b24      	cmp	r3, #36	; 0x24
 8006aa6:	d906      	bls.n	8006ab6 <_strtol_l.constprop.0+0x1a>
 8006aa8:	f000 fbcc 	bl	8007244 <__errno>
 8006aac:	2316      	movs	r3, #22
 8006aae:	6003      	str	r3, [r0, #0]
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006b9c <_strtol_l.constprop.0+0x100>
 8006aba:	460d      	mov	r5, r1
 8006abc:	462e      	mov	r6, r5
 8006abe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ac2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006ac6:	f017 0708 	ands.w	r7, r7, #8
 8006aca:	d1f7      	bne.n	8006abc <_strtol_l.constprop.0+0x20>
 8006acc:	2c2d      	cmp	r4, #45	; 0x2d
 8006ace:	d132      	bne.n	8006b36 <_strtol_l.constprop.0+0x9a>
 8006ad0:	782c      	ldrb	r4, [r5, #0]
 8006ad2:	2701      	movs	r7, #1
 8006ad4:	1cb5      	adds	r5, r6, #2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d05b      	beq.n	8006b92 <_strtol_l.constprop.0+0xf6>
 8006ada:	2b10      	cmp	r3, #16
 8006adc:	d109      	bne.n	8006af2 <_strtol_l.constprop.0+0x56>
 8006ade:	2c30      	cmp	r4, #48	; 0x30
 8006ae0:	d107      	bne.n	8006af2 <_strtol_l.constprop.0+0x56>
 8006ae2:	782c      	ldrb	r4, [r5, #0]
 8006ae4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006ae8:	2c58      	cmp	r4, #88	; 0x58
 8006aea:	d14d      	bne.n	8006b88 <_strtol_l.constprop.0+0xec>
 8006aec:	786c      	ldrb	r4, [r5, #1]
 8006aee:	2310      	movs	r3, #16
 8006af0:	3502      	adds	r5, #2
 8006af2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006af6:	f108 38ff 	add.w	r8, r8, #4294967295
 8006afa:	f04f 0e00 	mov.w	lr, #0
 8006afe:	fbb8 f9f3 	udiv	r9, r8, r3
 8006b02:	4676      	mov	r6, lr
 8006b04:	fb03 8a19 	mls	sl, r3, r9, r8
 8006b08:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006b0c:	f1bc 0f09 	cmp.w	ip, #9
 8006b10:	d816      	bhi.n	8006b40 <_strtol_l.constprop.0+0xa4>
 8006b12:	4664      	mov	r4, ip
 8006b14:	42a3      	cmp	r3, r4
 8006b16:	dd24      	ble.n	8006b62 <_strtol_l.constprop.0+0xc6>
 8006b18:	f1be 3fff 	cmp.w	lr, #4294967295
 8006b1c:	d008      	beq.n	8006b30 <_strtol_l.constprop.0+0x94>
 8006b1e:	45b1      	cmp	r9, r6
 8006b20:	d31c      	bcc.n	8006b5c <_strtol_l.constprop.0+0xc0>
 8006b22:	d101      	bne.n	8006b28 <_strtol_l.constprop.0+0x8c>
 8006b24:	45a2      	cmp	sl, r4
 8006b26:	db19      	blt.n	8006b5c <_strtol_l.constprop.0+0xc0>
 8006b28:	fb06 4603 	mla	r6, r6, r3, r4
 8006b2c:	f04f 0e01 	mov.w	lr, #1
 8006b30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b34:	e7e8      	b.n	8006b08 <_strtol_l.constprop.0+0x6c>
 8006b36:	2c2b      	cmp	r4, #43	; 0x2b
 8006b38:	bf04      	itt	eq
 8006b3a:	782c      	ldrbeq	r4, [r5, #0]
 8006b3c:	1cb5      	addeq	r5, r6, #2
 8006b3e:	e7ca      	b.n	8006ad6 <_strtol_l.constprop.0+0x3a>
 8006b40:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006b44:	f1bc 0f19 	cmp.w	ip, #25
 8006b48:	d801      	bhi.n	8006b4e <_strtol_l.constprop.0+0xb2>
 8006b4a:	3c37      	subs	r4, #55	; 0x37
 8006b4c:	e7e2      	b.n	8006b14 <_strtol_l.constprop.0+0x78>
 8006b4e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006b52:	f1bc 0f19 	cmp.w	ip, #25
 8006b56:	d804      	bhi.n	8006b62 <_strtol_l.constprop.0+0xc6>
 8006b58:	3c57      	subs	r4, #87	; 0x57
 8006b5a:	e7db      	b.n	8006b14 <_strtol_l.constprop.0+0x78>
 8006b5c:	f04f 3eff 	mov.w	lr, #4294967295
 8006b60:	e7e6      	b.n	8006b30 <_strtol_l.constprop.0+0x94>
 8006b62:	f1be 3fff 	cmp.w	lr, #4294967295
 8006b66:	d105      	bne.n	8006b74 <_strtol_l.constprop.0+0xd8>
 8006b68:	2322      	movs	r3, #34	; 0x22
 8006b6a:	6003      	str	r3, [r0, #0]
 8006b6c:	4646      	mov	r6, r8
 8006b6e:	b942      	cbnz	r2, 8006b82 <_strtol_l.constprop.0+0xe6>
 8006b70:	4630      	mov	r0, r6
 8006b72:	e79e      	b.n	8006ab2 <_strtol_l.constprop.0+0x16>
 8006b74:	b107      	cbz	r7, 8006b78 <_strtol_l.constprop.0+0xdc>
 8006b76:	4276      	negs	r6, r6
 8006b78:	2a00      	cmp	r2, #0
 8006b7a:	d0f9      	beq.n	8006b70 <_strtol_l.constprop.0+0xd4>
 8006b7c:	f1be 0f00 	cmp.w	lr, #0
 8006b80:	d000      	beq.n	8006b84 <_strtol_l.constprop.0+0xe8>
 8006b82:	1e69      	subs	r1, r5, #1
 8006b84:	6011      	str	r1, [r2, #0]
 8006b86:	e7f3      	b.n	8006b70 <_strtol_l.constprop.0+0xd4>
 8006b88:	2430      	movs	r4, #48	; 0x30
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1b1      	bne.n	8006af2 <_strtol_l.constprop.0+0x56>
 8006b8e:	2308      	movs	r3, #8
 8006b90:	e7af      	b.n	8006af2 <_strtol_l.constprop.0+0x56>
 8006b92:	2c30      	cmp	r4, #48	; 0x30
 8006b94:	d0a5      	beq.n	8006ae2 <_strtol_l.constprop.0+0x46>
 8006b96:	230a      	movs	r3, #10
 8006b98:	e7ab      	b.n	8006af2 <_strtol_l.constprop.0+0x56>
 8006b9a:	bf00      	nop
 8006b9c:	08009773 	.word	0x08009773

08006ba0 <_strtol_r>:
 8006ba0:	f7ff bf7c 	b.w	8006a9c <_strtol_l.constprop.0>

08006ba4 <strtol>:
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	460a      	mov	r2, r1
 8006ba8:	4601      	mov	r1, r0
 8006baa:	4802      	ldr	r0, [pc, #8]	; (8006bb4 <strtol+0x10>)
 8006bac:	6800      	ldr	r0, [r0, #0]
 8006bae:	f7ff bf75 	b.w	8006a9c <_strtol_l.constprop.0>
 8006bb2:	bf00      	nop
 8006bb4:	20000068 	.word	0x20000068

08006bb8 <std>:
 8006bb8:	2300      	movs	r3, #0
 8006bba:	b510      	push	{r4, lr}
 8006bbc:	4604      	mov	r4, r0
 8006bbe:	e9c0 3300 	strd	r3, r3, [r0]
 8006bc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bc6:	6083      	str	r3, [r0, #8]
 8006bc8:	8181      	strh	r1, [r0, #12]
 8006bca:	6643      	str	r3, [r0, #100]	; 0x64
 8006bcc:	81c2      	strh	r2, [r0, #14]
 8006bce:	6183      	str	r3, [r0, #24]
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	2208      	movs	r2, #8
 8006bd4:	305c      	adds	r0, #92	; 0x5c
 8006bd6:	f000 fa45 	bl	8007064 <memset>
 8006bda:	4b0d      	ldr	r3, [pc, #52]	; (8006c10 <std+0x58>)
 8006bdc:	6263      	str	r3, [r4, #36]	; 0x24
 8006bde:	4b0d      	ldr	r3, [pc, #52]	; (8006c14 <std+0x5c>)
 8006be0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006be2:	4b0d      	ldr	r3, [pc, #52]	; (8006c18 <std+0x60>)
 8006be4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006be6:	4b0d      	ldr	r3, [pc, #52]	; (8006c1c <std+0x64>)
 8006be8:	6323      	str	r3, [r4, #48]	; 0x30
 8006bea:	4b0d      	ldr	r3, [pc, #52]	; (8006c20 <std+0x68>)
 8006bec:	6224      	str	r4, [r4, #32]
 8006bee:	429c      	cmp	r4, r3
 8006bf0:	d006      	beq.n	8006c00 <std+0x48>
 8006bf2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006bf6:	4294      	cmp	r4, r2
 8006bf8:	d002      	beq.n	8006c00 <std+0x48>
 8006bfa:	33d0      	adds	r3, #208	; 0xd0
 8006bfc:	429c      	cmp	r4, r3
 8006bfe:	d105      	bne.n	8006c0c <std+0x54>
 8006c00:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c08:	f000 bb46 	b.w	8007298 <__retarget_lock_init_recursive>
 8006c0c:	bd10      	pop	{r4, pc}
 8006c0e:	bf00      	nop
 8006c10:	08006eb1 	.word	0x08006eb1
 8006c14:	08006ed7 	.word	0x08006ed7
 8006c18:	08006f0f 	.word	0x08006f0f
 8006c1c:	08006f33 	.word	0x08006f33
 8006c20:	20004d80 	.word	0x20004d80

08006c24 <stdio_exit_handler>:
 8006c24:	4a02      	ldr	r2, [pc, #8]	; (8006c30 <stdio_exit_handler+0xc>)
 8006c26:	4903      	ldr	r1, [pc, #12]	; (8006c34 <stdio_exit_handler+0x10>)
 8006c28:	4803      	ldr	r0, [pc, #12]	; (8006c38 <stdio_exit_handler+0x14>)
 8006c2a:	f000 b869 	b.w	8006d00 <_fwalk_sglue>
 8006c2e:	bf00      	nop
 8006c30:	20000010 	.word	0x20000010
 8006c34:	08008345 	.word	0x08008345
 8006c38:	2000001c 	.word	0x2000001c

08006c3c <cleanup_stdio>:
 8006c3c:	6841      	ldr	r1, [r0, #4]
 8006c3e:	4b0c      	ldr	r3, [pc, #48]	; (8006c70 <cleanup_stdio+0x34>)
 8006c40:	4299      	cmp	r1, r3
 8006c42:	b510      	push	{r4, lr}
 8006c44:	4604      	mov	r4, r0
 8006c46:	d001      	beq.n	8006c4c <cleanup_stdio+0x10>
 8006c48:	f001 fb7c 	bl	8008344 <_fflush_r>
 8006c4c:	68a1      	ldr	r1, [r4, #8]
 8006c4e:	4b09      	ldr	r3, [pc, #36]	; (8006c74 <cleanup_stdio+0x38>)
 8006c50:	4299      	cmp	r1, r3
 8006c52:	d002      	beq.n	8006c5a <cleanup_stdio+0x1e>
 8006c54:	4620      	mov	r0, r4
 8006c56:	f001 fb75 	bl	8008344 <_fflush_r>
 8006c5a:	68e1      	ldr	r1, [r4, #12]
 8006c5c:	4b06      	ldr	r3, [pc, #24]	; (8006c78 <cleanup_stdio+0x3c>)
 8006c5e:	4299      	cmp	r1, r3
 8006c60:	d004      	beq.n	8006c6c <cleanup_stdio+0x30>
 8006c62:	4620      	mov	r0, r4
 8006c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c68:	f001 bb6c 	b.w	8008344 <_fflush_r>
 8006c6c:	bd10      	pop	{r4, pc}
 8006c6e:	bf00      	nop
 8006c70:	20004d80 	.word	0x20004d80
 8006c74:	20004de8 	.word	0x20004de8
 8006c78:	20004e50 	.word	0x20004e50

08006c7c <global_stdio_init.part.0>:
 8006c7c:	b510      	push	{r4, lr}
 8006c7e:	4b0b      	ldr	r3, [pc, #44]	; (8006cac <global_stdio_init.part.0+0x30>)
 8006c80:	4c0b      	ldr	r4, [pc, #44]	; (8006cb0 <global_stdio_init.part.0+0x34>)
 8006c82:	4a0c      	ldr	r2, [pc, #48]	; (8006cb4 <global_stdio_init.part.0+0x38>)
 8006c84:	601a      	str	r2, [r3, #0]
 8006c86:	4620      	mov	r0, r4
 8006c88:	2200      	movs	r2, #0
 8006c8a:	2104      	movs	r1, #4
 8006c8c:	f7ff ff94 	bl	8006bb8 <std>
 8006c90:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006c94:	2201      	movs	r2, #1
 8006c96:	2109      	movs	r1, #9
 8006c98:	f7ff ff8e 	bl	8006bb8 <std>
 8006c9c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ca6:	2112      	movs	r1, #18
 8006ca8:	f7ff bf86 	b.w	8006bb8 <std>
 8006cac:	20004eb8 	.word	0x20004eb8
 8006cb0:	20004d80 	.word	0x20004d80
 8006cb4:	08006c25 	.word	0x08006c25

08006cb8 <__sfp_lock_acquire>:
 8006cb8:	4801      	ldr	r0, [pc, #4]	; (8006cc0 <__sfp_lock_acquire+0x8>)
 8006cba:	f000 baee 	b.w	800729a <__retarget_lock_acquire_recursive>
 8006cbe:	bf00      	nop
 8006cc0:	20004ec1 	.word	0x20004ec1

08006cc4 <__sfp_lock_release>:
 8006cc4:	4801      	ldr	r0, [pc, #4]	; (8006ccc <__sfp_lock_release+0x8>)
 8006cc6:	f000 bae9 	b.w	800729c <__retarget_lock_release_recursive>
 8006cca:	bf00      	nop
 8006ccc:	20004ec1 	.word	0x20004ec1

08006cd0 <__sinit>:
 8006cd0:	b510      	push	{r4, lr}
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	f7ff fff0 	bl	8006cb8 <__sfp_lock_acquire>
 8006cd8:	6a23      	ldr	r3, [r4, #32]
 8006cda:	b11b      	cbz	r3, 8006ce4 <__sinit+0x14>
 8006cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ce0:	f7ff bff0 	b.w	8006cc4 <__sfp_lock_release>
 8006ce4:	4b04      	ldr	r3, [pc, #16]	; (8006cf8 <__sinit+0x28>)
 8006ce6:	6223      	str	r3, [r4, #32]
 8006ce8:	4b04      	ldr	r3, [pc, #16]	; (8006cfc <__sinit+0x2c>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1f5      	bne.n	8006cdc <__sinit+0xc>
 8006cf0:	f7ff ffc4 	bl	8006c7c <global_stdio_init.part.0>
 8006cf4:	e7f2      	b.n	8006cdc <__sinit+0xc>
 8006cf6:	bf00      	nop
 8006cf8:	08006c3d 	.word	0x08006c3d
 8006cfc:	20004eb8 	.word	0x20004eb8

08006d00 <_fwalk_sglue>:
 8006d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d04:	4607      	mov	r7, r0
 8006d06:	4688      	mov	r8, r1
 8006d08:	4614      	mov	r4, r2
 8006d0a:	2600      	movs	r6, #0
 8006d0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d10:	f1b9 0901 	subs.w	r9, r9, #1
 8006d14:	d505      	bpl.n	8006d22 <_fwalk_sglue+0x22>
 8006d16:	6824      	ldr	r4, [r4, #0]
 8006d18:	2c00      	cmp	r4, #0
 8006d1a:	d1f7      	bne.n	8006d0c <_fwalk_sglue+0xc>
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d22:	89ab      	ldrh	r3, [r5, #12]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d907      	bls.n	8006d38 <_fwalk_sglue+0x38>
 8006d28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	d003      	beq.n	8006d38 <_fwalk_sglue+0x38>
 8006d30:	4629      	mov	r1, r5
 8006d32:	4638      	mov	r0, r7
 8006d34:	47c0      	blx	r8
 8006d36:	4306      	orrs	r6, r0
 8006d38:	3568      	adds	r5, #104	; 0x68
 8006d3a:	e7e9      	b.n	8006d10 <_fwalk_sglue+0x10>

08006d3c <iprintf>:
 8006d3c:	b40f      	push	{r0, r1, r2, r3}
 8006d3e:	b507      	push	{r0, r1, r2, lr}
 8006d40:	4906      	ldr	r1, [pc, #24]	; (8006d5c <iprintf+0x20>)
 8006d42:	ab04      	add	r3, sp, #16
 8006d44:	6808      	ldr	r0, [r1, #0]
 8006d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d4a:	6881      	ldr	r1, [r0, #8]
 8006d4c:	9301      	str	r3, [sp, #4]
 8006d4e:	f000 fe7b 	bl	8007a48 <_vfiprintf_r>
 8006d52:	b003      	add	sp, #12
 8006d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d58:	b004      	add	sp, #16
 8006d5a:	4770      	bx	lr
 8006d5c:	20000068 	.word	0x20000068

08006d60 <_puts_r>:
 8006d60:	6a03      	ldr	r3, [r0, #32]
 8006d62:	b570      	push	{r4, r5, r6, lr}
 8006d64:	6884      	ldr	r4, [r0, #8]
 8006d66:	4605      	mov	r5, r0
 8006d68:	460e      	mov	r6, r1
 8006d6a:	b90b      	cbnz	r3, 8006d70 <_puts_r+0x10>
 8006d6c:	f7ff ffb0 	bl	8006cd0 <__sinit>
 8006d70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d72:	07db      	lsls	r3, r3, #31
 8006d74:	d405      	bmi.n	8006d82 <_puts_r+0x22>
 8006d76:	89a3      	ldrh	r3, [r4, #12]
 8006d78:	0598      	lsls	r0, r3, #22
 8006d7a:	d402      	bmi.n	8006d82 <_puts_r+0x22>
 8006d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d7e:	f000 fa8c 	bl	800729a <__retarget_lock_acquire_recursive>
 8006d82:	89a3      	ldrh	r3, [r4, #12]
 8006d84:	0719      	lsls	r1, r3, #28
 8006d86:	d513      	bpl.n	8006db0 <_puts_r+0x50>
 8006d88:	6923      	ldr	r3, [r4, #16]
 8006d8a:	b18b      	cbz	r3, 8006db0 <_puts_r+0x50>
 8006d8c:	3e01      	subs	r6, #1
 8006d8e:	68a3      	ldr	r3, [r4, #8]
 8006d90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d94:	3b01      	subs	r3, #1
 8006d96:	60a3      	str	r3, [r4, #8]
 8006d98:	b9e9      	cbnz	r1, 8006dd6 <_puts_r+0x76>
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	da2e      	bge.n	8006dfc <_puts_r+0x9c>
 8006d9e:	4622      	mov	r2, r4
 8006da0:	210a      	movs	r1, #10
 8006da2:	4628      	mov	r0, r5
 8006da4:	f000 f8c9 	bl	8006f3a <__swbuf_r>
 8006da8:	3001      	adds	r0, #1
 8006daa:	d007      	beq.n	8006dbc <_puts_r+0x5c>
 8006dac:	250a      	movs	r5, #10
 8006dae:	e007      	b.n	8006dc0 <_puts_r+0x60>
 8006db0:	4621      	mov	r1, r4
 8006db2:	4628      	mov	r0, r5
 8006db4:	f000 f8fe 	bl	8006fb4 <__swsetup_r>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	d0e7      	beq.n	8006d8c <_puts_r+0x2c>
 8006dbc:	f04f 35ff 	mov.w	r5, #4294967295
 8006dc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dc2:	07da      	lsls	r2, r3, #31
 8006dc4:	d405      	bmi.n	8006dd2 <_puts_r+0x72>
 8006dc6:	89a3      	ldrh	r3, [r4, #12]
 8006dc8:	059b      	lsls	r3, r3, #22
 8006dca:	d402      	bmi.n	8006dd2 <_puts_r+0x72>
 8006dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dce:	f000 fa65 	bl	800729c <__retarget_lock_release_recursive>
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	bd70      	pop	{r4, r5, r6, pc}
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	da04      	bge.n	8006de4 <_puts_r+0x84>
 8006dda:	69a2      	ldr	r2, [r4, #24]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	dc06      	bgt.n	8006dee <_puts_r+0x8e>
 8006de0:	290a      	cmp	r1, #10
 8006de2:	d004      	beq.n	8006dee <_puts_r+0x8e>
 8006de4:	6823      	ldr	r3, [r4, #0]
 8006de6:	1c5a      	adds	r2, r3, #1
 8006de8:	6022      	str	r2, [r4, #0]
 8006dea:	7019      	strb	r1, [r3, #0]
 8006dec:	e7cf      	b.n	8006d8e <_puts_r+0x2e>
 8006dee:	4622      	mov	r2, r4
 8006df0:	4628      	mov	r0, r5
 8006df2:	f000 f8a2 	bl	8006f3a <__swbuf_r>
 8006df6:	3001      	adds	r0, #1
 8006df8:	d1c9      	bne.n	8006d8e <_puts_r+0x2e>
 8006dfa:	e7df      	b.n	8006dbc <_puts_r+0x5c>
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	250a      	movs	r5, #10
 8006e00:	1c5a      	adds	r2, r3, #1
 8006e02:	6022      	str	r2, [r4, #0]
 8006e04:	701d      	strb	r5, [r3, #0]
 8006e06:	e7db      	b.n	8006dc0 <_puts_r+0x60>

08006e08 <puts>:
 8006e08:	4b02      	ldr	r3, [pc, #8]	; (8006e14 <puts+0xc>)
 8006e0a:	4601      	mov	r1, r0
 8006e0c:	6818      	ldr	r0, [r3, #0]
 8006e0e:	f7ff bfa7 	b.w	8006d60 <_puts_r>
 8006e12:	bf00      	nop
 8006e14:	20000068 	.word	0x20000068

08006e18 <siprintf>:
 8006e18:	b40e      	push	{r1, r2, r3}
 8006e1a:	b500      	push	{lr}
 8006e1c:	b09c      	sub	sp, #112	; 0x70
 8006e1e:	ab1d      	add	r3, sp, #116	; 0x74
 8006e20:	9002      	str	r0, [sp, #8]
 8006e22:	9006      	str	r0, [sp, #24]
 8006e24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e28:	4809      	ldr	r0, [pc, #36]	; (8006e50 <siprintf+0x38>)
 8006e2a:	9107      	str	r1, [sp, #28]
 8006e2c:	9104      	str	r1, [sp, #16]
 8006e2e:	4909      	ldr	r1, [pc, #36]	; (8006e54 <siprintf+0x3c>)
 8006e30:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e34:	9105      	str	r1, [sp, #20]
 8006e36:	6800      	ldr	r0, [r0, #0]
 8006e38:	9301      	str	r3, [sp, #4]
 8006e3a:	a902      	add	r1, sp, #8
 8006e3c:	f000 fb0a 	bl	8007454 <_svfiprintf_r>
 8006e40:	9b02      	ldr	r3, [sp, #8]
 8006e42:	2200      	movs	r2, #0
 8006e44:	701a      	strb	r2, [r3, #0]
 8006e46:	b01c      	add	sp, #112	; 0x70
 8006e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e4c:	b003      	add	sp, #12
 8006e4e:	4770      	bx	lr
 8006e50:	20000068 	.word	0x20000068
 8006e54:	ffff0208 	.word	0xffff0208

08006e58 <siscanf>:
 8006e58:	b40e      	push	{r1, r2, r3}
 8006e5a:	b510      	push	{r4, lr}
 8006e5c:	b09f      	sub	sp, #124	; 0x7c
 8006e5e:	ac21      	add	r4, sp, #132	; 0x84
 8006e60:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006e64:	f854 2b04 	ldr.w	r2, [r4], #4
 8006e68:	9201      	str	r2, [sp, #4]
 8006e6a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006e6e:	9004      	str	r0, [sp, #16]
 8006e70:	9008      	str	r0, [sp, #32]
 8006e72:	f7f9 f9b7 	bl	80001e4 <strlen>
 8006e76:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <siscanf+0x50>)
 8006e78:	9005      	str	r0, [sp, #20]
 8006e7a:	9009      	str	r0, [sp, #36]	; 0x24
 8006e7c:	930d      	str	r3, [sp, #52]	; 0x34
 8006e7e:	480b      	ldr	r0, [pc, #44]	; (8006eac <siscanf+0x54>)
 8006e80:	9a01      	ldr	r2, [sp, #4]
 8006e82:	6800      	ldr	r0, [r0, #0]
 8006e84:	9403      	str	r4, [sp, #12]
 8006e86:	2300      	movs	r3, #0
 8006e88:	9311      	str	r3, [sp, #68]	; 0x44
 8006e8a:	9316      	str	r3, [sp, #88]	; 0x58
 8006e8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e90:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006e94:	a904      	add	r1, sp, #16
 8006e96:	4623      	mov	r3, r4
 8006e98:	f000 fc34 	bl	8007704 <__ssvfiscanf_r>
 8006e9c:	b01f      	add	sp, #124	; 0x7c
 8006e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea2:	b003      	add	sp, #12
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	08006ed3 	.word	0x08006ed3
 8006eac:	20000068 	.word	0x20000068

08006eb0 <__sread>:
 8006eb0:	b510      	push	{r4, lr}
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb8:	f000 f990 	bl	80071dc <_read_r>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	bfab      	itete	ge
 8006ec0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ec2:	89a3      	ldrhlt	r3, [r4, #12]
 8006ec4:	181b      	addge	r3, r3, r0
 8006ec6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006eca:	bfac      	ite	ge
 8006ecc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ece:	81a3      	strhlt	r3, [r4, #12]
 8006ed0:	bd10      	pop	{r4, pc}

08006ed2 <__seofread>:
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	4770      	bx	lr

08006ed6 <__swrite>:
 8006ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eda:	461f      	mov	r7, r3
 8006edc:	898b      	ldrh	r3, [r1, #12]
 8006ede:	05db      	lsls	r3, r3, #23
 8006ee0:	4605      	mov	r5, r0
 8006ee2:	460c      	mov	r4, r1
 8006ee4:	4616      	mov	r6, r2
 8006ee6:	d505      	bpl.n	8006ef4 <__swrite+0x1e>
 8006ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eec:	2302      	movs	r3, #2
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f000 f962 	bl	80071b8 <_lseek_r>
 8006ef4:	89a3      	ldrh	r3, [r4, #12]
 8006ef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006efa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006efe:	81a3      	strh	r3, [r4, #12]
 8006f00:	4632      	mov	r2, r6
 8006f02:	463b      	mov	r3, r7
 8006f04:	4628      	mov	r0, r5
 8006f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0a:	f000 b989 	b.w	8007220 <_write_r>

08006f0e <__sseek>:
 8006f0e:	b510      	push	{r4, lr}
 8006f10:	460c      	mov	r4, r1
 8006f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f16:	f000 f94f 	bl	80071b8 <_lseek_r>
 8006f1a:	1c43      	adds	r3, r0, #1
 8006f1c:	89a3      	ldrh	r3, [r4, #12]
 8006f1e:	bf15      	itete	ne
 8006f20:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f2a:	81a3      	strheq	r3, [r4, #12]
 8006f2c:	bf18      	it	ne
 8006f2e:	81a3      	strhne	r3, [r4, #12]
 8006f30:	bd10      	pop	{r4, pc}

08006f32 <__sclose>:
 8006f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f36:	f000 b92f 	b.w	8007198 <_close_r>

08006f3a <__swbuf_r>:
 8006f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3c:	460e      	mov	r6, r1
 8006f3e:	4614      	mov	r4, r2
 8006f40:	4605      	mov	r5, r0
 8006f42:	b118      	cbz	r0, 8006f4c <__swbuf_r+0x12>
 8006f44:	6a03      	ldr	r3, [r0, #32]
 8006f46:	b90b      	cbnz	r3, 8006f4c <__swbuf_r+0x12>
 8006f48:	f7ff fec2 	bl	8006cd0 <__sinit>
 8006f4c:	69a3      	ldr	r3, [r4, #24]
 8006f4e:	60a3      	str	r3, [r4, #8]
 8006f50:	89a3      	ldrh	r3, [r4, #12]
 8006f52:	071a      	lsls	r2, r3, #28
 8006f54:	d525      	bpl.n	8006fa2 <__swbuf_r+0x68>
 8006f56:	6923      	ldr	r3, [r4, #16]
 8006f58:	b31b      	cbz	r3, 8006fa2 <__swbuf_r+0x68>
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	6922      	ldr	r2, [r4, #16]
 8006f5e:	1a98      	subs	r0, r3, r2
 8006f60:	6963      	ldr	r3, [r4, #20]
 8006f62:	b2f6      	uxtb	r6, r6
 8006f64:	4283      	cmp	r3, r0
 8006f66:	4637      	mov	r7, r6
 8006f68:	dc04      	bgt.n	8006f74 <__swbuf_r+0x3a>
 8006f6a:	4621      	mov	r1, r4
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	f001 f9e9 	bl	8008344 <_fflush_r>
 8006f72:	b9e0      	cbnz	r0, 8006fae <__swbuf_r+0x74>
 8006f74:	68a3      	ldr	r3, [r4, #8]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	60a3      	str	r3, [r4, #8]
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	1c5a      	adds	r2, r3, #1
 8006f7e:	6022      	str	r2, [r4, #0]
 8006f80:	701e      	strb	r6, [r3, #0]
 8006f82:	6962      	ldr	r2, [r4, #20]
 8006f84:	1c43      	adds	r3, r0, #1
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d004      	beq.n	8006f94 <__swbuf_r+0x5a>
 8006f8a:	89a3      	ldrh	r3, [r4, #12]
 8006f8c:	07db      	lsls	r3, r3, #31
 8006f8e:	d506      	bpl.n	8006f9e <__swbuf_r+0x64>
 8006f90:	2e0a      	cmp	r6, #10
 8006f92:	d104      	bne.n	8006f9e <__swbuf_r+0x64>
 8006f94:	4621      	mov	r1, r4
 8006f96:	4628      	mov	r0, r5
 8006f98:	f001 f9d4 	bl	8008344 <_fflush_r>
 8006f9c:	b938      	cbnz	r0, 8006fae <__swbuf_r+0x74>
 8006f9e:	4638      	mov	r0, r7
 8006fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fa2:	4621      	mov	r1, r4
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	f000 f805 	bl	8006fb4 <__swsetup_r>
 8006faa:	2800      	cmp	r0, #0
 8006fac:	d0d5      	beq.n	8006f5a <__swbuf_r+0x20>
 8006fae:	f04f 37ff 	mov.w	r7, #4294967295
 8006fb2:	e7f4      	b.n	8006f9e <__swbuf_r+0x64>

08006fb4 <__swsetup_r>:
 8006fb4:	b538      	push	{r3, r4, r5, lr}
 8006fb6:	4b2a      	ldr	r3, [pc, #168]	; (8007060 <__swsetup_r+0xac>)
 8006fb8:	4605      	mov	r5, r0
 8006fba:	6818      	ldr	r0, [r3, #0]
 8006fbc:	460c      	mov	r4, r1
 8006fbe:	b118      	cbz	r0, 8006fc8 <__swsetup_r+0x14>
 8006fc0:	6a03      	ldr	r3, [r0, #32]
 8006fc2:	b90b      	cbnz	r3, 8006fc8 <__swsetup_r+0x14>
 8006fc4:	f7ff fe84 	bl	8006cd0 <__sinit>
 8006fc8:	89a3      	ldrh	r3, [r4, #12]
 8006fca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fce:	0718      	lsls	r0, r3, #28
 8006fd0:	d422      	bmi.n	8007018 <__swsetup_r+0x64>
 8006fd2:	06d9      	lsls	r1, r3, #27
 8006fd4:	d407      	bmi.n	8006fe6 <__swsetup_r+0x32>
 8006fd6:	2309      	movs	r3, #9
 8006fd8:	602b      	str	r3, [r5, #0]
 8006fda:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006fde:	81a3      	strh	r3, [r4, #12]
 8006fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe4:	e034      	b.n	8007050 <__swsetup_r+0x9c>
 8006fe6:	0758      	lsls	r0, r3, #29
 8006fe8:	d512      	bpl.n	8007010 <__swsetup_r+0x5c>
 8006fea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fec:	b141      	cbz	r1, 8007000 <__swsetup_r+0x4c>
 8006fee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ff2:	4299      	cmp	r1, r3
 8006ff4:	d002      	beq.n	8006ffc <__swsetup_r+0x48>
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	f000 f986 	bl	8007308 <_free_r>
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	6363      	str	r3, [r4, #52]	; 0x34
 8007000:	89a3      	ldrh	r3, [r4, #12]
 8007002:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007006:	81a3      	strh	r3, [r4, #12]
 8007008:	2300      	movs	r3, #0
 800700a:	6063      	str	r3, [r4, #4]
 800700c:	6923      	ldr	r3, [r4, #16]
 800700e:	6023      	str	r3, [r4, #0]
 8007010:	89a3      	ldrh	r3, [r4, #12]
 8007012:	f043 0308 	orr.w	r3, r3, #8
 8007016:	81a3      	strh	r3, [r4, #12]
 8007018:	6923      	ldr	r3, [r4, #16]
 800701a:	b94b      	cbnz	r3, 8007030 <__swsetup_r+0x7c>
 800701c:	89a3      	ldrh	r3, [r4, #12]
 800701e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007022:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007026:	d003      	beq.n	8007030 <__swsetup_r+0x7c>
 8007028:	4621      	mov	r1, r4
 800702a:	4628      	mov	r0, r5
 800702c:	f001 f9ea 	bl	8008404 <__smakebuf_r>
 8007030:	89a0      	ldrh	r0, [r4, #12]
 8007032:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007036:	f010 0301 	ands.w	r3, r0, #1
 800703a:	d00a      	beq.n	8007052 <__swsetup_r+0x9e>
 800703c:	2300      	movs	r3, #0
 800703e:	60a3      	str	r3, [r4, #8]
 8007040:	6963      	ldr	r3, [r4, #20]
 8007042:	425b      	negs	r3, r3
 8007044:	61a3      	str	r3, [r4, #24]
 8007046:	6923      	ldr	r3, [r4, #16]
 8007048:	b943      	cbnz	r3, 800705c <__swsetup_r+0xa8>
 800704a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800704e:	d1c4      	bne.n	8006fda <__swsetup_r+0x26>
 8007050:	bd38      	pop	{r3, r4, r5, pc}
 8007052:	0781      	lsls	r1, r0, #30
 8007054:	bf58      	it	pl
 8007056:	6963      	ldrpl	r3, [r4, #20]
 8007058:	60a3      	str	r3, [r4, #8]
 800705a:	e7f4      	b.n	8007046 <__swsetup_r+0x92>
 800705c:	2000      	movs	r0, #0
 800705e:	e7f7      	b.n	8007050 <__swsetup_r+0x9c>
 8007060:	20000068 	.word	0x20000068

08007064 <memset>:
 8007064:	4402      	add	r2, r0
 8007066:	4603      	mov	r3, r0
 8007068:	4293      	cmp	r3, r2
 800706a:	d100      	bne.n	800706e <memset+0xa>
 800706c:	4770      	bx	lr
 800706e:	f803 1b01 	strb.w	r1, [r3], #1
 8007072:	e7f9      	b.n	8007068 <memset+0x4>

08007074 <strchr>:
 8007074:	b2c9      	uxtb	r1, r1
 8007076:	4603      	mov	r3, r0
 8007078:	f810 2b01 	ldrb.w	r2, [r0], #1
 800707c:	b11a      	cbz	r2, 8007086 <strchr+0x12>
 800707e:	428a      	cmp	r2, r1
 8007080:	d1f9      	bne.n	8007076 <strchr+0x2>
 8007082:	4618      	mov	r0, r3
 8007084:	4770      	bx	lr
 8007086:	2900      	cmp	r1, #0
 8007088:	bf18      	it	ne
 800708a:	2300      	movne	r3, #0
 800708c:	e7f9      	b.n	8007082 <strchr+0xe>

0800708e <strncpy>:
 800708e:	b510      	push	{r4, lr}
 8007090:	3901      	subs	r1, #1
 8007092:	4603      	mov	r3, r0
 8007094:	b132      	cbz	r2, 80070a4 <strncpy+0x16>
 8007096:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800709a:	f803 4b01 	strb.w	r4, [r3], #1
 800709e:	3a01      	subs	r2, #1
 80070a0:	2c00      	cmp	r4, #0
 80070a2:	d1f7      	bne.n	8007094 <strncpy+0x6>
 80070a4:	441a      	add	r2, r3
 80070a6:	2100      	movs	r1, #0
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d100      	bne.n	80070ae <strncpy+0x20>
 80070ac:	bd10      	pop	{r4, pc}
 80070ae:	f803 1b01 	strb.w	r1, [r3], #1
 80070b2:	e7f9      	b.n	80070a8 <strncpy+0x1a>

080070b4 <strtok>:
 80070b4:	4b16      	ldr	r3, [pc, #88]	; (8007110 <strtok+0x5c>)
 80070b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070b8:	681e      	ldr	r6, [r3, #0]
 80070ba:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80070bc:	4605      	mov	r5, r0
 80070be:	b9fc      	cbnz	r4, 8007100 <strtok+0x4c>
 80070c0:	2050      	movs	r0, #80	; 0x50
 80070c2:	9101      	str	r1, [sp, #4]
 80070c4:	f7ff fc36 	bl	8006934 <malloc>
 80070c8:	9901      	ldr	r1, [sp, #4]
 80070ca:	6470      	str	r0, [r6, #68]	; 0x44
 80070cc:	4602      	mov	r2, r0
 80070ce:	b920      	cbnz	r0, 80070da <strtok+0x26>
 80070d0:	4b10      	ldr	r3, [pc, #64]	; (8007114 <strtok+0x60>)
 80070d2:	4811      	ldr	r0, [pc, #68]	; (8007118 <strtok+0x64>)
 80070d4:	215b      	movs	r1, #91	; 0x5b
 80070d6:	f000 f8f9 	bl	80072cc <__assert_func>
 80070da:	e9c0 4400 	strd	r4, r4, [r0]
 80070de:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80070e2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80070e6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80070ea:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80070ee:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80070f2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80070f6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80070fa:	6184      	str	r4, [r0, #24]
 80070fc:	7704      	strb	r4, [r0, #28]
 80070fe:	6244      	str	r4, [r0, #36]	; 0x24
 8007100:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8007102:	2301      	movs	r3, #1
 8007104:	4628      	mov	r0, r5
 8007106:	b002      	add	sp, #8
 8007108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800710c:	f000 b806 	b.w	800711c <__strtok_r>
 8007110:	20000068 	.word	0x20000068
 8007114:	08009873 	.word	0x08009873
 8007118:	0800988a 	.word	0x0800988a

0800711c <__strtok_r>:
 800711c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800711e:	b908      	cbnz	r0, 8007124 <__strtok_r+0x8>
 8007120:	6810      	ldr	r0, [r2, #0]
 8007122:	b188      	cbz	r0, 8007148 <__strtok_r+0x2c>
 8007124:	4604      	mov	r4, r0
 8007126:	4620      	mov	r0, r4
 8007128:	f814 5b01 	ldrb.w	r5, [r4], #1
 800712c:	460f      	mov	r7, r1
 800712e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007132:	b91e      	cbnz	r6, 800713c <__strtok_r+0x20>
 8007134:	b965      	cbnz	r5, 8007150 <__strtok_r+0x34>
 8007136:	6015      	str	r5, [r2, #0]
 8007138:	4628      	mov	r0, r5
 800713a:	e005      	b.n	8007148 <__strtok_r+0x2c>
 800713c:	42b5      	cmp	r5, r6
 800713e:	d1f6      	bne.n	800712e <__strtok_r+0x12>
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1f0      	bne.n	8007126 <__strtok_r+0xa>
 8007144:	6014      	str	r4, [r2, #0]
 8007146:	7003      	strb	r3, [r0, #0]
 8007148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800714a:	461c      	mov	r4, r3
 800714c:	e00c      	b.n	8007168 <__strtok_r+0x4c>
 800714e:	b915      	cbnz	r5, 8007156 <__strtok_r+0x3a>
 8007150:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007154:	460e      	mov	r6, r1
 8007156:	f816 5b01 	ldrb.w	r5, [r6], #1
 800715a:	42ab      	cmp	r3, r5
 800715c:	d1f7      	bne.n	800714e <__strtok_r+0x32>
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0f3      	beq.n	800714a <__strtok_r+0x2e>
 8007162:	2300      	movs	r3, #0
 8007164:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007168:	6014      	str	r4, [r2, #0]
 800716a:	e7ed      	b.n	8007148 <__strtok_r+0x2c>

0800716c <strstr>:
 800716c:	780a      	ldrb	r2, [r1, #0]
 800716e:	b570      	push	{r4, r5, r6, lr}
 8007170:	b96a      	cbnz	r2, 800718e <strstr+0x22>
 8007172:	bd70      	pop	{r4, r5, r6, pc}
 8007174:	429a      	cmp	r2, r3
 8007176:	d109      	bne.n	800718c <strstr+0x20>
 8007178:	460c      	mov	r4, r1
 800717a:	4605      	mov	r5, r0
 800717c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007180:	2b00      	cmp	r3, #0
 8007182:	d0f6      	beq.n	8007172 <strstr+0x6>
 8007184:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007188:	429e      	cmp	r6, r3
 800718a:	d0f7      	beq.n	800717c <strstr+0x10>
 800718c:	3001      	adds	r0, #1
 800718e:	7803      	ldrb	r3, [r0, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1ef      	bne.n	8007174 <strstr+0x8>
 8007194:	4618      	mov	r0, r3
 8007196:	e7ec      	b.n	8007172 <strstr+0x6>

08007198 <_close_r>:
 8007198:	b538      	push	{r3, r4, r5, lr}
 800719a:	4d06      	ldr	r5, [pc, #24]	; (80071b4 <_close_r+0x1c>)
 800719c:	2300      	movs	r3, #0
 800719e:	4604      	mov	r4, r0
 80071a0:	4608      	mov	r0, r1
 80071a2:	602b      	str	r3, [r5, #0]
 80071a4:	f7f9 fee7 	bl	8000f76 <_close>
 80071a8:	1c43      	adds	r3, r0, #1
 80071aa:	d102      	bne.n	80071b2 <_close_r+0x1a>
 80071ac:	682b      	ldr	r3, [r5, #0]
 80071ae:	b103      	cbz	r3, 80071b2 <_close_r+0x1a>
 80071b0:	6023      	str	r3, [r4, #0]
 80071b2:	bd38      	pop	{r3, r4, r5, pc}
 80071b4:	20004ebc 	.word	0x20004ebc

080071b8 <_lseek_r>:
 80071b8:	b538      	push	{r3, r4, r5, lr}
 80071ba:	4d07      	ldr	r5, [pc, #28]	; (80071d8 <_lseek_r+0x20>)
 80071bc:	4604      	mov	r4, r0
 80071be:	4608      	mov	r0, r1
 80071c0:	4611      	mov	r1, r2
 80071c2:	2200      	movs	r2, #0
 80071c4:	602a      	str	r2, [r5, #0]
 80071c6:	461a      	mov	r2, r3
 80071c8:	f7f9 fefc 	bl	8000fc4 <_lseek>
 80071cc:	1c43      	adds	r3, r0, #1
 80071ce:	d102      	bne.n	80071d6 <_lseek_r+0x1e>
 80071d0:	682b      	ldr	r3, [r5, #0]
 80071d2:	b103      	cbz	r3, 80071d6 <_lseek_r+0x1e>
 80071d4:	6023      	str	r3, [r4, #0]
 80071d6:	bd38      	pop	{r3, r4, r5, pc}
 80071d8:	20004ebc 	.word	0x20004ebc

080071dc <_read_r>:
 80071dc:	b538      	push	{r3, r4, r5, lr}
 80071de:	4d07      	ldr	r5, [pc, #28]	; (80071fc <_read_r+0x20>)
 80071e0:	4604      	mov	r4, r0
 80071e2:	4608      	mov	r0, r1
 80071e4:	4611      	mov	r1, r2
 80071e6:	2200      	movs	r2, #0
 80071e8:	602a      	str	r2, [r5, #0]
 80071ea:	461a      	mov	r2, r3
 80071ec:	f7f9 fe8a 	bl	8000f04 <_read>
 80071f0:	1c43      	adds	r3, r0, #1
 80071f2:	d102      	bne.n	80071fa <_read_r+0x1e>
 80071f4:	682b      	ldr	r3, [r5, #0]
 80071f6:	b103      	cbz	r3, 80071fa <_read_r+0x1e>
 80071f8:	6023      	str	r3, [r4, #0]
 80071fa:	bd38      	pop	{r3, r4, r5, pc}
 80071fc:	20004ebc 	.word	0x20004ebc

08007200 <_sbrk_r>:
 8007200:	b538      	push	{r3, r4, r5, lr}
 8007202:	4d06      	ldr	r5, [pc, #24]	; (800721c <_sbrk_r+0x1c>)
 8007204:	2300      	movs	r3, #0
 8007206:	4604      	mov	r4, r0
 8007208:	4608      	mov	r0, r1
 800720a:	602b      	str	r3, [r5, #0]
 800720c:	f7f9 fee8 	bl	8000fe0 <_sbrk>
 8007210:	1c43      	adds	r3, r0, #1
 8007212:	d102      	bne.n	800721a <_sbrk_r+0x1a>
 8007214:	682b      	ldr	r3, [r5, #0]
 8007216:	b103      	cbz	r3, 800721a <_sbrk_r+0x1a>
 8007218:	6023      	str	r3, [r4, #0]
 800721a:	bd38      	pop	{r3, r4, r5, pc}
 800721c:	20004ebc 	.word	0x20004ebc

08007220 <_write_r>:
 8007220:	b538      	push	{r3, r4, r5, lr}
 8007222:	4d07      	ldr	r5, [pc, #28]	; (8007240 <_write_r+0x20>)
 8007224:	4604      	mov	r4, r0
 8007226:	4608      	mov	r0, r1
 8007228:	4611      	mov	r1, r2
 800722a:	2200      	movs	r2, #0
 800722c:	602a      	str	r2, [r5, #0]
 800722e:	461a      	mov	r2, r3
 8007230:	f7f9 fe85 	bl	8000f3e <_write>
 8007234:	1c43      	adds	r3, r0, #1
 8007236:	d102      	bne.n	800723e <_write_r+0x1e>
 8007238:	682b      	ldr	r3, [r5, #0]
 800723a:	b103      	cbz	r3, 800723e <_write_r+0x1e>
 800723c:	6023      	str	r3, [r4, #0]
 800723e:	bd38      	pop	{r3, r4, r5, pc}
 8007240:	20004ebc 	.word	0x20004ebc

08007244 <__errno>:
 8007244:	4b01      	ldr	r3, [pc, #4]	; (800724c <__errno+0x8>)
 8007246:	6818      	ldr	r0, [r3, #0]
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	20000068 	.word	0x20000068

08007250 <__libc_init_array>:
 8007250:	b570      	push	{r4, r5, r6, lr}
 8007252:	4d0d      	ldr	r5, [pc, #52]	; (8007288 <__libc_init_array+0x38>)
 8007254:	4c0d      	ldr	r4, [pc, #52]	; (800728c <__libc_init_array+0x3c>)
 8007256:	1b64      	subs	r4, r4, r5
 8007258:	10a4      	asrs	r4, r4, #2
 800725a:	2600      	movs	r6, #0
 800725c:	42a6      	cmp	r6, r4
 800725e:	d109      	bne.n	8007274 <__libc_init_array+0x24>
 8007260:	4d0b      	ldr	r5, [pc, #44]	; (8007290 <__libc_init_array+0x40>)
 8007262:	4c0c      	ldr	r4, [pc, #48]	; (8007294 <__libc_init_array+0x44>)
 8007264:	f001 fab0 	bl	80087c8 <_init>
 8007268:	1b64      	subs	r4, r4, r5
 800726a:	10a4      	asrs	r4, r4, #2
 800726c:	2600      	movs	r6, #0
 800726e:	42a6      	cmp	r6, r4
 8007270:	d105      	bne.n	800727e <__libc_init_array+0x2e>
 8007272:	bd70      	pop	{r4, r5, r6, pc}
 8007274:	f855 3b04 	ldr.w	r3, [r5], #4
 8007278:	4798      	blx	r3
 800727a:	3601      	adds	r6, #1
 800727c:	e7ee      	b.n	800725c <__libc_init_array+0xc>
 800727e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007282:	4798      	blx	r3
 8007284:	3601      	adds	r6, #1
 8007286:	e7f2      	b.n	800726e <__libc_init_array+0x1e>
 8007288:	08009978 	.word	0x08009978
 800728c:	08009978 	.word	0x08009978
 8007290:	08009978 	.word	0x08009978
 8007294:	0800997c 	.word	0x0800997c

08007298 <__retarget_lock_init_recursive>:
 8007298:	4770      	bx	lr

0800729a <__retarget_lock_acquire_recursive>:
 800729a:	4770      	bx	lr

0800729c <__retarget_lock_release_recursive>:
 800729c:	4770      	bx	lr

0800729e <strcpy>:
 800729e:	4603      	mov	r3, r0
 80072a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072a4:	f803 2b01 	strb.w	r2, [r3], #1
 80072a8:	2a00      	cmp	r2, #0
 80072aa:	d1f9      	bne.n	80072a0 <strcpy+0x2>
 80072ac:	4770      	bx	lr

080072ae <memcpy>:
 80072ae:	440a      	add	r2, r1
 80072b0:	4291      	cmp	r1, r2
 80072b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80072b6:	d100      	bne.n	80072ba <memcpy+0xc>
 80072b8:	4770      	bx	lr
 80072ba:	b510      	push	{r4, lr}
 80072bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072c4:	4291      	cmp	r1, r2
 80072c6:	d1f9      	bne.n	80072bc <memcpy+0xe>
 80072c8:	bd10      	pop	{r4, pc}
	...

080072cc <__assert_func>:
 80072cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072ce:	4614      	mov	r4, r2
 80072d0:	461a      	mov	r2, r3
 80072d2:	4b09      	ldr	r3, [pc, #36]	; (80072f8 <__assert_func+0x2c>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4605      	mov	r5, r0
 80072d8:	68d8      	ldr	r0, [r3, #12]
 80072da:	b14c      	cbz	r4, 80072f0 <__assert_func+0x24>
 80072dc:	4b07      	ldr	r3, [pc, #28]	; (80072fc <__assert_func+0x30>)
 80072de:	9100      	str	r1, [sp, #0]
 80072e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80072e4:	4906      	ldr	r1, [pc, #24]	; (8007300 <__assert_func+0x34>)
 80072e6:	462b      	mov	r3, r5
 80072e8:	f001 f854 	bl	8008394 <fiprintf>
 80072ec:	f001 f976 	bl	80085dc <abort>
 80072f0:	4b04      	ldr	r3, [pc, #16]	; (8007304 <__assert_func+0x38>)
 80072f2:	461c      	mov	r4, r3
 80072f4:	e7f3      	b.n	80072de <__assert_func+0x12>
 80072f6:	bf00      	nop
 80072f8:	20000068 	.word	0x20000068
 80072fc:	080098e4 	.word	0x080098e4
 8007300:	080098f1 	.word	0x080098f1
 8007304:	0800991f 	.word	0x0800991f

08007308 <_free_r>:
 8007308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800730a:	2900      	cmp	r1, #0
 800730c:	d044      	beq.n	8007398 <_free_r+0x90>
 800730e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007312:	9001      	str	r0, [sp, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	f1a1 0404 	sub.w	r4, r1, #4
 800731a:	bfb8      	it	lt
 800731c:	18e4      	addlt	r4, r4, r3
 800731e:	f7ff fbb1 	bl	8006a84 <__malloc_lock>
 8007322:	4a1e      	ldr	r2, [pc, #120]	; (800739c <_free_r+0x94>)
 8007324:	9801      	ldr	r0, [sp, #4]
 8007326:	6813      	ldr	r3, [r2, #0]
 8007328:	b933      	cbnz	r3, 8007338 <_free_r+0x30>
 800732a:	6063      	str	r3, [r4, #4]
 800732c:	6014      	str	r4, [r2, #0]
 800732e:	b003      	add	sp, #12
 8007330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007334:	f7ff bbac 	b.w	8006a90 <__malloc_unlock>
 8007338:	42a3      	cmp	r3, r4
 800733a:	d908      	bls.n	800734e <_free_r+0x46>
 800733c:	6825      	ldr	r5, [r4, #0]
 800733e:	1961      	adds	r1, r4, r5
 8007340:	428b      	cmp	r3, r1
 8007342:	bf01      	itttt	eq
 8007344:	6819      	ldreq	r1, [r3, #0]
 8007346:	685b      	ldreq	r3, [r3, #4]
 8007348:	1949      	addeq	r1, r1, r5
 800734a:	6021      	streq	r1, [r4, #0]
 800734c:	e7ed      	b.n	800732a <_free_r+0x22>
 800734e:	461a      	mov	r2, r3
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	b10b      	cbz	r3, 8007358 <_free_r+0x50>
 8007354:	42a3      	cmp	r3, r4
 8007356:	d9fa      	bls.n	800734e <_free_r+0x46>
 8007358:	6811      	ldr	r1, [r2, #0]
 800735a:	1855      	adds	r5, r2, r1
 800735c:	42a5      	cmp	r5, r4
 800735e:	d10b      	bne.n	8007378 <_free_r+0x70>
 8007360:	6824      	ldr	r4, [r4, #0]
 8007362:	4421      	add	r1, r4
 8007364:	1854      	adds	r4, r2, r1
 8007366:	42a3      	cmp	r3, r4
 8007368:	6011      	str	r1, [r2, #0]
 800736a:	d1e0      	bne.n	800732e <_free_r+0x26>
 800736c:	681c      	ldr	r4, [r3, #0]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	6053      	str	r3, [r2, #4]
 8007372:	440c      	add	r4, r1
 8007374:	6014      	str	r4, [r2, #0]
 8007376:	e7da      	b.n	800732e <_free_r+0x26>
 8007378:	d902      	bls.n	8007380 <_free_r+0x78>
 800737a:	230c      	movs	r3, #12
 800737c:	6003      	str	r3, [r0, #0]
 800737e:	e7d6      	b.n	800732e <_free_r+0x26>
 8007380:	6825      	ldr	r5, [r4, #0]
 8007382:	1961      	adds	r1, r4, r5
 8007384:	428b      	cmp	r3, r1
 8007386:	bf04      	itt	eq
 8007388:	6819      	ldreq	r1, [r3, #0]
 800738a:	685b      	ldreq	r3, [r3, #4]
 800738c:	6063      	str	r3, [r4, #4]
 800738e:	bf04      	itt	eq
 8007390:	1949      	addeq	r1, r1, r5
 8007392:	6021      	streq	r1, [r4, #0]
 8007394:	6054      	str	r4, [r2, #4]
 8007396:	e7ca      	b.n	800732e <_free_r+0x26>
 8007398:	b003      	add	sp, #12
 800739a:	bd30      	pop	{r4, r5, pc}
 800739c:	20004d78 	.word	0x20004d78

080073a0 <__ssputs_r>:
 80073a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073a4:	688e      	ldr	r6, [r1, #8]
 80073a6:	461f      	mov	r7, r3
 80073a8:	42be      	cmp	r6, r7
 80073aa:	680b      	ldr	r3, [r1, #0]
 80073ac:	4682      	mov	sl, r0
 80073ae:	460c      	mov	r4, r1
 80073b0:	4690      	mov	r8, r2
 80073b2:	d82c      	bhi.n	800740e <__ssputs_r+0x6e>
 80073b4:	898a      	ldrh	r2, [r1, #12]
 80073b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073ba:	d026      	beq.n	800740a <__ssputs_r+0x6a>
 80073bc:	6965      	ldr	r5, [r4, #20]
 80073be:	6909      	ldr	r1, [r1, #16]
 80073c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073c4:	eba3 0901 	sub.w	r9, r3, r1
 80073c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073cc:	1c7b      	adds	r3, r7, #1
 80073ce:	444b      	add	r3, r9
 80073d0:	106d      	asrs	r5, r5, #1
 80073d2:	429d      	cmp	r5, r3
 80073d4:	bf38      	it	cc
 80073d6:	461d      	movcc	r5, r3
 80073d8:	0553      	lsls	r3, r2, #21
 80073da:	d527      	bpl.n	800742c <__ssputs_r+0x8c>
 80073dc:	4629      	mov	r1, r5
 80073de:	f7ff fad1 	bl	8006984 <_malloc_r>
 80073e2:	4606      	mov	r6, r0
 80073e4:	b360      	cbz	r0, 8007440 <__ssputs_r+0xa0>
 80073e6:	6921      	ldr	r1, [r4, #16]
 80073e8:	464a      	mov	r2, r9
 80073ea:	f7ff ff60 	bl	80072ae <memcpy>
 80073ee:	89a3      	ldrh	r3, [r4, #12]
 80073f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80073f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073f8:	81a3      	strh	r3, [r4, #12]
 80073fa:	6126      	str	r6, [r4, #16]
 80073fc:	6165      	str	r5, [r4, #20]
 80073fe:	444e      	add	r6, r9
 8007400:	eba5 0509 	sub.w	r5, r5, r9
 8007404:	6026      	str	r6, [r4, #0]
 8007406:	60a5      	str	r5, [r4, #8]
 8007408:	463e      	mov	r6, r7
 800740a:	42be      	cmp	r6, r7
 800740c:	d900      	bls.n	8007410 <__ssputs_r+0x70>
 800740e:	463e      	mov	r6, r7
 8007410:	6820      	ldr	r0, [r4, #0]
 8007412:	4632      	mov	r2, r6
 8007414:	4641      	mov	r1, r8
 8007416:	f001 f8a4 	bl	8008562 <memmove>
 800741a:	68a3      	ldr	r3, [r4, #8]
 800741c:	1b9b      	subs	r3, r3, r6
 800741e:	60a3      	str	r3, [r4, #8]
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	4433      	add	r3, r6
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	2000      	movs	r0, #0
 8007428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800742c:	462a      	mov	r2, r5
 800742e:	f001 f8dc 	bl	80085ea <_realloc_r>
 8007432:	4606      	mov	r6, r0
 8007434:	2800      	cmp	r0, #0
 8007436:	d1e0      	bne.n	80073fa <__ssputs_r+0x5a>
 8007438:	6921      	ldr	r1, [r4, #16]
 800743a:	4650      	mov	r0, sl
 800743c:	f7ff ff64 	bl	8007308 <_free_r>
 8007440:	230c      	movs	r3, #12
 8007442:	f8ca 3000 	str.w	r3, [sl]
 8007446:	89a3      	ldrh	r3, [r4, #12]
 8007448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800744c:	81a3      	strh	r3, [r4, #12]
 800744e:	f04f 30ff 	mov.w	r0, #4294967295
 8007452:	e7e9      	b.n	8007428 <__ssputs_r+0x88>

08007454 <_svfiprintf_r>:
 8007454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007458:	4698      	mov	r8, r3
 800745a:	898b      	ldrh	r3, [r1, #12]
 800745c:	061b      	lsls	r3, r3, #24
 800745e:	b09d      	sub	sp, #116	; 0x74
 8007460:	4607      	mov	r7, r0
 8007462:	460d      	mov	r5, r1
 8007464:	4614      	mov	r4, r2
 8007466:	d50e      	bpl.n	8007486 <_svfiprintf_r+0x32>
 8007468:	690b      	ldr	r3, [r1, #16]
 800746a:	b963      	cbnz	r3, 8007486 <_svfiprintf_r+0x32>
 800746c:	2140      	movs	r1, #64	; 0x40
 800746e:	f7ff fa89 	bl	8006984 <_malloc_r>
 8007472:	6028      	str	r0, [r5, #0]
 8007474:	6128      	str	r0, [r5, #16]
 8007476:	b920      	cbnz	r0, 8007482 <_svfiprintf_r+0x2e>
 8007478:	230c      	movs	r3, #12
 800747a:	603b      	str	r3, [r7, #0]
 800747c:	f04f 30ff 	mov.w	r0, #4294967295
 8007480:	e0d0      	b.n	8007624 <_svfiprintf_r+0x1d0>
 8007482:	2340      	movs	r3, #64	; 0x40
 8007484:	616b      	str	r3, [r5, #20]
 8007486:	2300      	movs	r3, #0
 8007488:	9309      	str	r3, [sp, #36]	; 0x24
 800748a:	2320      	movs	r3, #32
 800748c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007490:	f8cd 800c 	str.w	r8, [sp, #12]
 8007494:	2330      	movs	r3, #48	; 0x30
 8007496:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800763c <_svfiprintf_r+0x1e8>
 800749a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800749e:	f04f 0901 	mov.w	r9, #1
 80074a2:	4623      	mov	r3, r4
 80074a4:	469a      	mov	sl, r3
 80074a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074aa:	b10a      	cbz	r2, 80074b0 <_svfiprintf_r+0x5c>
 80074ac:	2a25      	cmp	r2, #37	; 0x25
 80074ae:	d1f9      	bne.n	80074a4 <_svfiprintf_r+0x50>
 80074b0:	ebba 0b04 	subs.w	fp, sl, r4
 80074b4:	d00b      	beq.n	80074ce <_svfiprintf_r+0x7a>
 80074b6:	465b      	mov	r3, fp
 80074b8:	4622      	mov	r2, r4
 80074ba:	4629      	mov	r1, r5
 80074bc:	4638      	mov	r0, r7
 80074be:	f7ff ff6f 	bl	80073a0 <__ssputs_r>
 80074c2:	3001      	adds	r0, #1
 80074c4:	f000 80a9 	beq.w	800761a <_svfiprintf_r+0x1c6>
 80074c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074ca:	445a      	add	r2, fp
 80074cc:	9209      	str	r2, [sp, #36]	; 0x24
 80074ce:	f89a 3000 	ldrb.w	r3, [sl]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f000 80a1 	beq.w	800761a <_svfiprintf_r+0x1c6>
 80074d8:	2300      	movs	r3, #0
 80074da:	f04f 32ff 	mov.w	r2, #4294967295
 80074de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074e2:	f10a 0a01 	add.w	sl, sl, #1
 80074e6:	9304      	str	r3, [sp, #16]
 80074e8:	9307      	str	r3, [sp, #28]
 80074ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074ee:	931a      	str	r3, [sp, #104]	; 0x68
 80074f0:	4654      	mov	r4, sl
 80074f2:	2205      	movs	r2, #5
 80074f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074f8:	4850      	ldr	r0, [pc, #320]	; (800763c <_svfiprintf_r+0x1e8>)
 80074fa:	f7f8 fe81 	bl	8000200 <memchr>
 80074fe:	9a04      	ldr	r2, [sp, #16]
 8007500:	b9d8      	cbnz	r0, 800753a <_svfiprintf_r+0xe6>
 8007502:	06d0      	lsls	r0, r2, #27
 8007504:	bf44      	itt	mi
 8007506:	2320      	movmi	r3, #32
 8007508:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800750c:	0711      	lsls	r1, r2, #28
 800750e:	bf44      	itt	mi
 8007510:	232b      	movmi	r3, #43	; 0x2b
 8007512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007516:	f89a 3000 	ldrb.w	r3, [sl]
 800751a:	2b2a      	cmp	r3, #42	; 0x2a
 800751c:	d015      	beq.n	800754a <_svfiprintf_r+0xf6>
 800751e:	9a07      	ldr	r2, [sp, #28]
 8007520:	4654      	mov	r4, sl
 8007522:	2000      	movs	r0, #0
 8007524:	f04f 0c0a 	mov.w	ip, #10
 8007528:	4621      	mov	r1, r4
 800752a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800752e:	3b30      	subs	r3, #48	; 0x30
 8007530:	2b09      	cmp	r3, #9
 8007532:	d94d      	bls.n	80075d0 <_svfiprintf_r+0x17c>
 8007534:	b1b0      	cbz	r0, 8007564 <_svfiprintf_r+0x110>
 8007536:	9207      	str	r2, [sp, #28]
 8007538:	e014      	b.n	8007564 <_svfiprintf_r+0x110>
 800753a:	eba0 0308 	sub.w	r3, r0, r8
 800753e:	fa09 f303 	lsl.w	r3, r9, r3
 8007542:	4313      	orrs	r3, r2
 8007544:	9304      	str	r3, [sp, #16]
 8007546:	46a2      	mov	sl, r4
 8007548:	e7d2      	b.n	80074f0 <_svfiprintf_r+0x9c>
 800754a:	9b03      	ldr	r3, [sp, #12]
 800754c:	1d19      	adds	r1, r3, #4
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	9103      	str	r1, [sp, #12]
 8007552:	2b00      	cmp	r3, #0
 8007554:	bfbb      	ittet	lt
 8007556:	425b      	neglt	r3, r3
 8007558:	f042 0202 	orrlt.w	r2, r2, #2
 800755c:	9307      	strge	r3, [sp, #28]
 800755e:	9307      	strlt	r3, [sp, #28]
 8007560:	bfb8      	it	lt
 8007562:	9204      	strlt	r2, [sp, #16]
 8007564:	7823      	ldrb	r3, [r4, #0]
 8007566:	2b2e      	cmp	r3, #46	; 0x2e
 8007568:	d10c      	bne.n	8007584 <_svfiprintf_r+0x130>
 800756a:	7863      	ldrb	r3, [r4, #1]
 800756c:	2b2a      	cmp	r3, #42	; 0x2a
 800756e:	d134      	bne.n	80075da <_svfiprintf_r+0x186>
 8007570:	9b03      	ldr	r3, [sp, #12]
 8007572:	1d1a      	adds	r2, r3, #4
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	9203      	str	r2, [sp, #12]
 8007578:	2b00      	cmp	r3, #0
 800757a:	bfb8      	it	lt
 800757c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007580:	3402      	adds	r4, #2
 8007582:	9305      	str	r3, [sp, #20]
 8007584:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800764c <_svfiprintf_r+0x1f8>
 8007588:	7821      	ldrb	r1, [r4, #0]
 800758a:	2203      	movs	r2, #3
 800758c:	4650      	mov	r0, sl
 800758e:	f7f8 fe37 	bl	8000200 <memchr>
 8007592:	b138      	cbz	r0, 80075a4 <_svfiprintf_r+0x150>
 8007594:	9b04      	ldr	r3, [sp, #16]
 8007596:	eba0 000a 	sub.w	r0, r0, sl
 800759a:	2240      	movs	r2, #64	; 0x40
 800759c:	4082      	lsls	r2, r0
 800759e:	4313      	orrs	r3, r2
 80075a0:	3401      	adds	r4, #1
 80075a2:	9304      	str	r3, [sp, #16]
 80075a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075a8:	4825      	ldr	r0, [pc, #148]	; (8007640 <_svfiprintf_r+0x1ec>)
 80075aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075ae:	2206      	movs	r2, #6
 80075b0:	f7f8 fe26 	bl	8000200 <memchr>
 80075b4:	2800      	cmp	r0, #0
 80075b6:	d038      	beq.n	800762a <_svfiprintf_r+0x1d6>
 80075b8:	4b22      	ldr	r3, [pc, #136]	; (8007644 <_svfiprintf_r+0x1f0>)
 80075ba:	bb1b      	cbnz	r3, 8007604 <_svfiprintf_r+0x1b0>
 80075bc:	9b03      	ldr	r3, [sp, #12]
 80075be:	3307      	adds	r3, #7
 80075c0:	f023 0307 	bic.w	r3, r3, #7
 80075c4:	3308      	adds	r3, #8
 80075c6:	9303      	str	r3, [sp, #12]
 80075c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ca:	4433      	add	r3, r6
 80075cc:	9309      	str	r3, [sp, #36]	; 0x24
 80075ce:	e768      	b.n	80074a2 <_svfiprintf_r+0x4e>
 80075d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80075d4:	460c      	mov	r4, r1
 80075d6:	2001      	movs	r0, #1
 80075d8:	e7a6      	b.n	8007528 <_svfiprintf_r+0xd4>
 80075da:	2300      	movs	r3, #0
 80075dc:	3401      	adds	r4, #1
 80075de:	9305      	str	r3, [sp, #20]
 80075e0:	4619      	mov	r1, r3
 80075e2:	f04f 0c0a 	mov.w	ip, #10
 80075e6:	4620      	mov	r0, r4
 80075e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075ec:	3a30      	subs	r2, #48	; 0x30
 80075ee:	2a09      	cmp	r2, #9
 80075f0:	d903      	bls.n	80075fa <_svfiprintf_r+0x1a6>
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0c6      	beq.n	8007584 <_svfiprintf_r+0x130>
 80075f6:	9105      	str	r1, [sp, #20]
 80075f8:	e7c4      	b.n	8007584 <_svfiprintf_r+0x130>
 80075fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80075fe:	4604      	mov	r4, r0
 8007600:	2301      	movs	r3, #1
 8007602:	e7f0      	b.n	80075e6 <_svfiprintf_r+0x192>
 8007604:	ab03      	add	r3, sp, #12
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	462a      	mov	r2, r5
 800760a:	4b0f      	ldr	r3, [pc, #60]	; (8007648 <_svfiprintf_r+0x1f4>)
 800760c:	a904      	add	r1, sp, #16
 800760e:	4638      	mov	r0, r7
 8007610:	f3af 8000 	nop.w
 8007614:	1c42      	adds	r2, r0, #1
 8007616:	4606      	mov	r6, r0
 8007618:	d1d6      	bne.n	80075c8 <_svfiprintf_r+0x174>
 800761a:	89ab      	ldrh	r3, [r5, #12]
 800761c:	065b      	lsls	r3, r3, #25
 800761e:	f53f af2d 	bmi.w	800747c <_svfiprintf_r+0x28>
 8007622:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007624:	b01d      	add	sp, #116	; 0x74
 8007626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800762a:	ab03      	add	r3, sp, #12
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	462a      	mov	r2, r5
 8007630:	4b05      	ldr	r3, [pc, #20]	; (8007648 <_svfiprintf_r+0x1f4>)
 8007632:	a904      	add	r1, sp, #16
 8007634:	4638      	mov	r0, r7
 8007636:	f000 fb8f 	bl	8007d58 <_printf_i>
 800763a:	e7eb      	b.n	8007614 <_svfiprintf_r+0x1c0>
 800763c:	08009920 	.word	0x08009920
 8007640:	0800992a 	.word	0x0800992a
 8007644:	00000000 	.word	0x00000000
 8007648:	080073a1 	.word	0x080073a1
 800764c:	08009926 	.word	0x08009926

08007650 <_sungetc_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	1c4b      	adds	r3, r1, #1
 8007654:	4614      	mov	r4, r2
 8007656:	d103      	bne.n	8007660 <_sungetc_r+0x10>
 8007658:	f04f 35ff 	mov.w	r5, #4294967295
 800765c:	4628      	mov	r0, r5
 800765e:	bd38      	pop	{r3, r4, r5, pc}
 8007660:	8993      	ldrh	r3, [r2, #12]
 8007662:	f023 0320 	bic.w	r3, r3, #32
 8007666:	8193      	strh	r3, [r2, #12]
 8007668:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800766a:	6852      	ldr	r2, [r2, #4]
 800766c:	b2cd      	uxtb	r5, r1
 800766e:	b18b      	cbz	r3, 8007694 <_sungetc_r+0x44>
 8007670:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007672:	4293      	cmp	r3, r2
 8007674:	dd08      	ble.n	8007688 <_sungetc_r+0x38>
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	1e5a      	subs	r2, r3, #1
 800767a:	6022      	str	r2, [r4, #0]
 800767c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007680:	6863      	ldr	r3, [r4, #4]
 8007682:	3301      	adds	r3, #1
 8007684:	6063      	str	r3, [r4, #4]
 8007686:	e7e9      	b.n	800765c <_sungetc_r+0xc>
 8007688:	4621      	mov	r1, r4
 800768a:	f000 ff30 	bl	80084ee <__submore>
 800768e:	2800      	cmp	r0, #0
 8007690:	d0f1      	beq.n	8007676 <_sungetc_r+0x26>
 8007692:	e7e1      	b.n	8007658 <_sungetc_r+0x8>
 8007694:	6921      	ldr	r1, [r4, #16]
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	b151      	cbz	r1, 80076b0 <_sungetc_r+0x60>
 800769a:	4299      	cmp	r1, r3
 800769c:	d208      	bcs.n	80076b0 <_sungetc_r+0x60>
 800769e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80076a2:	42a9      	cmp	r1, r5
 80076a4:	d104      	bne.n	80076b0 <_sungetc_r+0x60>
 80076a6:	3b01      	subs	r3, #1
 80076a8:	3201      	adds	r2, #1
 80076aa:	6023      	str	r3, [r4, #0]
 80076ac:	6062      	str	r2, [r4, #4]
 80076ae:	e7d5      	b.n	800765c <_sungetc_r+0xc>
 80076b0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80076b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076b8:	6363      	str	r3, [r4, #52]	; 0x34
 80076ba:	2303      	movs	r3, #3
 80076bc:	63a3      	str	r3, [r4, #56]	; 0x38
 80076be:	4623      	mov	r3, r4
 80076c0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80076c4:	6023      	str	r3, [r4, #0]
 80076c6:	2301      	movs	r3, #1
 80076c8:	e7dc      	b.n	8007684 <_sungetc_r+0x34>

080076ca <__ssrefill_r>:
 80076ca:	b510      	push	{r4, lr}
 80076cc:	460c      	mov	r4, r1
 80076ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80076d0:	b169      	cbz	r1, 80076ee <__ssrefill_r+0x24>
 80076d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076d6:	4299      	cmp	r1, r3
 80076d8:	d001      	beq.n	80076de <__ssrefill_r+0x14>
 80076da:	f7ff fe15 	bl	8007308 <_free_r>
 80076de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076e0:	6063      	str	r3, [r4, #4]
 80076e2:	2000      	movs	r0, #0
 80076e4:	6360      	str	r0, [r4, #52]	; 0x34
 80076e6:	b113      	cbz	r3, 80076ee <__ssrefill_r+0x24>
 80076e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80076ea:	6023      	str	r3, [r4, #0]
 80076ec:	bd10      	pop	{r4, pc}
 80076ee:	6923      	ldr	r3, [r4, #16]
 80076f0:	6023      	str	r3, [r4, #0]
 80076f2:	2300      	movs	r3, #0
 80076f4:	6063      	str	r3, [r4, #4]
 80076f6:	89a3      	ldrh	r3, [r4, #12]
 80076f8:	f043 0320 	orr.w	r3, r3, #32
 80076fc:	81a3      	strh	r3, [r4, #12]
 80076fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007702:	e7f3      	b.n	80076ec <__ssrefill_r+0x22>

08007704 <__ssvfiscanf_r>:
 8007704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007708:	460c      	mov	r4, r1
 800770a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800770e:	2100      	movs	r1, #0
 8007710:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007714:	49a6      	ldr	r1, [pc, #664]	; (80079b0 <__ssvfiscanf_r+0x2ac>)
 8007716:	91a0      	str	r1, [sp, #640]	; 0x280
 8007718:	f10d 0804 	add.w	r8, sp, #4
 800771c:	49a5      	ldr	r1, [pc, #660]	; (80079b4 <__ssvfiscanf_r+0x2b0>)
 800771e:	4fa6      	ldr	r7, [pc, #664]	; (80079b8 <__ssvfiscanf_r+0x2b4>)
 8007720:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80079bc <__ssvfiscanf_r+0x2b8>
 8007724:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007728:	4606      	mov	r6, r0
 800772a:	91a1      	str	r1, [sp, #644]	; 0x284
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	7813      	ldrb	r3, [r2, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	f000 815a 	beq.w	80079ea <__ssvfiscanf_r+0x2e6>
 8007736:	5cf9      	ldrb	r1, [r7, r3]
 8007738:	f011 0108 	ands.w	r1, r1, #8
 800773c:	f102 0501 	add.w	r5, r2, #1
 8007740:	d019      	beq.n	8007776 <__ssvfiscanf_r+0x72>
 8007742:	6863      	ldr	r3, [r4, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	dd0f      	ble.n	8007768 <__ssvfiscanf_r+0x64>
 8007748:	6823      	ldr	r3, [r4, #0]
 800774a:	781a      	ldrb	r2, [r3, #0]
 800774c:	5cba      	ldrb	r2, [r7, r2]
 800774e:	0712      	lsls	r2, r2, #28
 8007750:	d401      	bmi.n	8007756 <__ssvfiscanf_r+0x52>
 8007752:	462a      	mov	r2, r5
 8007754:	e7eb      	b.n	800772e <__ssvfiscanf_r+0x2a>
 8007756:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007758:	3201      	adds	r2, #1
 800775a:	9245      	str	r2, [sp, #276]	; 0x114
 800775c:	6862      	ldr	r2, [r4, #4]
 800775e:	3301      	adds	r3, #1
 8007760:	3a01      	subs	r2, #1
 8007762:	6062      	str	r2, [r4, #4]
 8007764:	6023      	str	r3, [r4, #0]
 8007766:	e7ec      	b.n	8007742 <__ssvfiscanf_r+0x3e>
 8007768:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800776a:	4621      	mov	r1, r4
 800776c:	4630      	mov	r0, r6
 800776e:	4798      	blx	r3
 8007770:	2800      	cmp	r0, #0
 8007772:	d0e9      	beq.n	8007748 <__ssvfiscanf_r+0x44>
 8007774:	e7ed      	b.n	8007752 <__ssvfiscanf_r+0x4e>
 8007776:	2b25      	cmp	r3, #37	; 0x25
 8007778:	d012      	beq.n	80077a0 <__ssvfiscanf_r+0x9c>
 800777a:	469a      	mov	sl, r3
 800777c:	6863      	ldr	r3, [r4, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	f340 8091 	ble.w	80078a6 <__ssvfiscanf_r+0x1a2>
 8007784:	6822      	ldr	r2, [r4, #0]
 8007786:	7813      	ldrb	r3, [r2, #0]
 8007788:	4553      	cmp	r3, sl
 800778a:	f040 812e 	bne.w	80079ea <__ssvfiscanf_r+0x2e6>
 800778e:	6863      	ldr	r3, [r4, #4]
 8007790:	3b01      	subs	r3, #1
 8007792:	6063      	str	r3, [r4, #4]
 8007794:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007796:	3201      	adds	r2, #1
 8007798:	3301      	adds	r3, #1
 800779a:	6022      	str	r2, [r4, #0]
 800779c:	9345      	str	r3, [sp, #276]	; 0x114
 800779e:	e7d8      	b.n	8007752 <__ssvfiscanf_r+0x4e>
 80077a0:	9141      	str	r1, [sp, #260]	; 0x104
 80077a2:	9143      	str	r1, [sp, #268]	; 0x10c
 80077a4:	7853      	ldrb	r3, [r2, #1]
 80077a6:	2b2a      	cmp	r3, #42	; 0x2a
 80077a8:	bf02      	ittt	eq
 80077aa:	2310      	moveq	r3, #16
 80077ac:	1c95      	addeq	r5, r2, #2
 80077ae:	9341      	streq	r3, [sp, #260]	; 0x104
 80077b0:	220a      	movs	r2, #10
 80077b2:	46aa      	mov	sl, r5
 80077b4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80077b8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80077bc:	2b09      	cmp	r3, #9
 80077be:	d91c      	bls.n	80077fa <__ssvfiscanf_r+0xf6>
 80077c0:	487e      	ldr	r0, [pc, #504]	; (80079bc <__ssvfiscanf_r+0x2b8>)
 80077c2:	2203      	movs	r2, #3
 80077c4:	f7f8 fd1c 	bl	8000200 <memchr>
 80077c8:	b138      	cbz	r0, 80077da <__ssvfiscanf_r+0xd6>
 80077ca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80077cc:	eba0 0009 	sub.w	r0, r0, r9
 80077d0:	2301      	movs	r3, #1
 80077d2:	4083      	lsls	r3, r0
 80077d4:	4313      	orrs	r3, r2
 80077d6:	9341      	str	r3, [sp, #260]	; 0x104
 80077d8:	4655      	mov	r5, sl
 80077da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80077de:	2b78      	cmp	r3, #120	; 0x78
 80077e0:	d806      	bhi.n	80077f0 <__ssvfiscanf_r+0xec>
 80077e2:	2b57      	cmp	r3, #87	; 0x57
 80077e4:	d810      	bhi.n	8007808 <__ssvfiscanf_r+0x104>
 80077e6:	2b25      	cmp	r3, #37	; 0x25
 80077e8:	d0c7      	beq.n	800777a <__ssvfiscanf_r+0x76>
 80077ea:	d857      	bhi.n	800789c <__ssvfiscanf_r+0x198>
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d065      	beq.n	80078bc <__ssvfiscanf_r+0x1b8>
 80077f0:	2303      	movs	r3, #3
 80077f2:	9347      	str	r3, [sp, #284]	; 0x11c
 80077f4:	230a      	movs	r3, #10
 80077f6:	9342      	str	r3, [sp, #264]	; 0x108
 80077f8:	e076      	b.n	80078e8 <__ssvfiscanf_r+0x1e4>
 80077fa:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80077fc:	fb02 1103 	mla	r1, r2, r3, r1
 8007800:	3930      	subs	r1, #48	; 0x30
 8007802:	9143      	str	r1, [sp, #268]	; 0x10c
 8007804:	4655      	mov	r5, sl
 8007806:	e7d4      	b.n	80077b2 <__ssvfiscanf_r+0xae>
 8007808:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800780c:	2a20      	cmp	r2, #32
 800780e:	d8ef      	bhi.n	80077f0 <__ssvfiscanf_r+0xec>
 8007810:	a101      	add	r1, pc, #4	; (adr r1, 8007818 <__ssvfiscanf_r+0x114>)
 8007812:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007816:	bf00      	nop
 8007818:	080078cb 	.word	0x080078cb
 800781c:	080077f1 	.word	0x080077f1
 8007820:	080077f1 	.word	0x080077f1
 8007824:	08007929 	.word	0x08007929
 8007828:	080077f1 	.word	0x080077f1
 800782c:	080077f1 	.word	0x080077f1
 8007830:	080077f1 	.word	0x080077f1
 8007834:	080077f1 	.word	0x080077f1
 8007838:	080077f1 	.word	0x080077f1
 800783c:	080077f1 	.word	0x080077f1
 8007840:	080077f1 	.word	0x080077f1
 8007844:	0800793f 	.word	0x0800793f
 8007848:	08007925 	.word	0x08007925
 800784c:	080078a3 	.word	0x080078a3
 8007850:	080078a3 	.word	0x080078a3
 8007854:	080078a3 	.word	0x080078a3
 8007858:	080077f1 	.word	0x080077f1
 800785c:	080078e1 	.word	0x080078e1
 8007860:	080077f1 	.word	0x080077f1
 8007864:	080077f1 	.word	0x080077f1
 8007868:	080077f1 	.word	0x080077f1
 800786c:	080077f1 	.word	0x080077f1
 8007870:	0800794f 	.word	0x0800794f
 8007874:	0800791d 	.word	0x0800791d
 8007878:	080078c3 	.word	0x080078c3
 800787c:	080077f1 	.word	0x080077f1
 8007880:	080077f1 	.word	0x080077f1
 8007884:	0800794b 	.word	0x0800794b
 8007888:	080077f1 	.word	0x080077f1
 800788c:	08007925 	.word	0x08007925
 8007890:	080077f1 	.word	0x080077f1
 8007894:	080077f1 	.word	0x080077f1
 8007898:	080078cb 	.word	0x080078cb
 800789c:	3b45      	subs	r3, #69	; 0x45
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d8a6      	bhi.n	80077f0 <__ssvfiscanf_r+0xec>
 80078a2:	2305      	movs	r3, #5
 80078a4:	e01f      	b.n	80078e6 <__ssvfiscanf_r+0x1e2>
 80078a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80078a8:	4621      	mov	r1, r4
 80078aa:	4630      	mov	r0, r6
 80078ac:	4798      	blx	r3
 80078ae:	2800      	cmp	r0, #0
 80078b0:	f43f af68 	beq.w	8007784 <__ssvfiscanf_r+0x80>
 80078b4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80078b6:	2800      	cmp	r0, #0
 80078b8:	f040 808d 	bne.w	80079d6 <__ssvfiscanf_r+0x2d2>
 80078bc:	f04f 30ff 	mov.w	r0, #4294967295
 80078c0:	e08f      	b.n	80079e2 <__ssvfiscanf_r+0x2de>
 80078c2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80078c4:	f042 0220 	orr.w	r2, r2, #32
 80078c8:	9241      	str	r2, [sp, #260]	; 0x104
 80078ca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80078cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078d0:	9241      	str	r2, [sp, #260]	; 0x104
 80078d2:	2210      	movs	r2, #16
 80078d4:	2b6f      	cmp	r3, #111	; 0x6f
 80078d6:	9242      	str	r2, [sp, #264]	; 0x108
 80078d8:	bf34      	ite	cc
 80078da:	2303      	movcc	r3, #3
 80078dc:	2304      	movcs	r3, #4
 80078de:	e002      	b.n	80078e6 <__ssvfiscanf_r+0x1e2>
 80078e0:	2300      	movs	r3, #0
 80078e2:	9342      	str	r3, [sp, #264]	; 0x108
 80078e4:	2303      	movs	r3, #3
 80078e6:	9347      	str	r3, [sp, #284]	; 0x11c
 80078e8:	6863      	ldr	r3, [r4, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	dd3d      	ble.n	800796a <__ssvfiscanf_r+0x266>
 80078ee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80078f0:	0659      	lsls	r1, r3, #25
 80078f2:	d404      	bmi.n	80078fe <__ssvfiscanf_r+0x1fa>
 80078f4:	6823      	ldr	r3, [r4, #0]
 80078f6:	781a      	ldrb	r2, [r3, #0]
 80078f8:	5cba      	ldrb	r2, [r7, r2]
 80078fa:	0712      	lsls	r2, r2, #28
 80078fc:	d43c      	bmi.n	8007978 <__ssvfiscanf_r+0x274>
 80078fe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007900:	2b02      	cmp	r3, #2
 8007902:	dc4b      	bgt.n	800799c <__ssvfiscanf_r+0x298>
 8007904:	466b      	mov	r3, sp
 8007906:	4622      	mov	r2, r4
 8007908:	a941      	add	r1, sp, #260	; 0x104
 800790a:	4630      	mov	r0, r6
 800790c:	f000 fb46 	bl	8007f9c <_scanf_chars>
 8007910:	2801      	cmp	r0, #1
 8007912:	d06a      	beq.n	80079ea <__ssvfiscanf_r+0x2e6>
 8007914:	2802      	cmp	r0, #2
 8007916:	f47f af1c 	bne.w	8007752 <__ssvfiscanf_r+0x4e>
 800791a:	e7cb      	b.n	80078b4 <__ssvfiscanf_r+0x1b0>
 800791c:	2308      	movs	r3, #8
 800791e:	9342      	str	r3, [sp, #264]	; 0x108
 8007920:	2304      	movs	r3, #4
 8007922:	e7e0      	b.n	80078e6 <__ssvfiscanf_r+0x1e2>
 8007924:	220a      	movs	r2, #10
 8007926:	e7d5      	b.n	80078d4 <__ssvfiscanf_r+0x1d0>
 8007928:	4629      	mov	r1, r5
 800792a:	4640      	mov	r0, r8
 800792c:	f000 fda6 	bl	800847c <__sccl>
 8007930:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007936:	9341      	str	r3, [sp, #260]	; 0x104
 8007938:	4605      	mov	r5, r0
 800793a:	2301      	movs	r3, #1
 800793c:	e7d3      	b.n	80078e6 <__ssvfiscanf_r+0x1e2>
 800793e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007944:	9341      	str	r3, [sp, #260]	; 0x104
 8007946:	2300      	movs	r3, #0
 8007948:	e7cd      	b.n	80078e6 <__ssvfiscanf_r+0x1e2>
 800794a:	2302      	movs	r3, #2
 800794c:	e7cb      	b.n	80078e6 <__ssvfiscanf_r+0x1e2>
 800794e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007950:	06c3      	lsls	r3, r0, #27
 8007952:	f53f aefe 	bmi.w	8007752 <__ssvfiscanf_r+0x4e>
 8007956:	9b00      	ldr	r3, [sp, #0]
 8007958:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800795a:	1d19      	adds	r1, r3, #4
 800795c:	9100      	str	r1, [sp, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	07c0      	lsls	r0, r0, #31
 8007962:	bf4c      	ite	mi
 8007964:	801a      	strhmi	r2, [r3, #0]
 8007966:	601a      	strpl	r2, [r3, #0]
 8007968:	e6f3      	b.n	8007752 <__ssvfiscanf_r+0x4e>
 800796a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800796c:	4621      	mov	r1, r4
 800796e:	4630      	mov	r0, r6
 8007970:	4798      	blx	r3
 8007972:	2800      	cmp	r0, #0
 8007974:	d0bb      	beq.n	80078ee <__ssvfiscanf_r+0x1ea>
 8007976:	e79d      	b.n	80078b4 <__ssvfiscanf_r+0x1b0>
 8007978:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800797a:	3201      	adds	r2, #1
 800797c:	9245      	str	r2, [sp, #276]	; 0x114
 800797e:	6862      	ldr	r2, [r4, #4]
 8007980:	3a01      	subs	r2, #1
 8007982:	2a00      	cmp	r2, #0
 8007984:	6062      	str	r2, [r4, #4]
 8007986:	dd02      	ble.n	800798e <__ssvfiscanf_r+0x28a>
 8007988:	3301      	adds	r3, #1
 800798a:	6023      	str	r3, [r4, #0]
 800798c:	e7b2      	b.n	80078f4 <__ssvfiscanf_r+0x1f0>
 800798e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007990:	4621      	mov	r1, r4
 8007992:	4630      	mov	r0, r6
 8007994:	4798      	blx	r3
 8007996:	2800      	cmp	r0, #0
 8007998:	d0ac      	beq.n	80078f4 <__ssvfiscanf_r+0x1f0>
 800799a:	e78b      	b.n	80078b4 <__ssvfiscanf_r+0x1b0>
 800799c:	2b04      	cmp	r3, #4
 800799e:	dc0f      	bgt.n	80079c0 <__ssvfiscanf_r+0x2bc>
 80079a0:	466b      	mov	r3, sp
 80079a2:	4622      	mov	r2, r4
 80079a4:	a941      	add	r1, sp, #260	; 0x104
 80079a6:	4630      	mov	r0, r6
 80079a8:	f000 fb52 	bl	8008050 <_scanf_i>
 80079ac:	e7b0      	b.n	8007910 <__ssvfiscanf_r+0x20c>
 80079ae:	bf00      	nop
 80079b0:	08007651 	.word	0x08007651
 80079b4:	080076cb 	.word	0x080076cb
 80079b8:	08009773 	.word	0x08009773
 80079bc:	08009926 	.word	0x08009926
 80079c0:	4b0b      	ldr	r3, [pc, #44]	; (80079f0 <__ssvfiscanf_r+0x2ec>)
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f43f aec5 	beq.w	8007752 <__ssvfiscanf_r+0x4e>
 80079c8:	466b      	mov	r3, sp
 80079ca:	4622      	mov	r2, r4
 80079cc:	a941      	add	r1, sp, #260	; 0x104
 80079ce:	4630      	mov	r0, r6
 80079d0:	f3af 8000 	nop.w
 80079d4:	e79c      	b.n	8007910 <__ssvfiscanf_r+0x20c>
 80079d6:	89a3      	ldrh	r3, [r4, #12]
 80079d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80079dc:	bf18      	it	ne
 80079de:	f04f 30ff 	movne.w	r0, #4294967295
 80079e2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80079e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ea:	9844      	ldr	r0, [sp, #272]	; 0x110
 80079ec:	e7f9      	b.n	80079e2 <__ssvfiscanf_r+0x2de>
 80079ee:	bf00      	nop
 80079f0:	00000000 	.word	0x00000000

080079f4 <__sfputc_r>:
 80079f4:	6893      	ldr	r3, [r2, #8]
 80079f6:	3b01      	subs	r3, #1
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	b410      	push	{r4}
 80079fc:	6093      	str	r3, [r2, #8]
 80079fe:	da08      	bge.n	8007a12 <__sfputc_r+0x1e>
 8007a00:	6994      	ldr	r4, [r2, #24]
 8007a02:	42a3      	cmp	r3, r4
 8007a04:	db01      	blt.n	8007a0a <__sfputc_r+0x16>
 8007a06:	290a      	cmp	r1, #10
 8007a08:	d103      	bne.n	8007a12 <__sfputc_r+0x1e>
 8007a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a0e:	f7ff ba94 	b.w	8006f3a <__swbuf_r>
 8007a12:	6813      	ldr	r3, [r2, #0]
 8007a14:	1c58      	adds	r0, r3, #1
 8007a16:	6010      	str	r0, [r2, #0]
 8007a18:	7019      	strb	r1, [r3, #0]
 8007a1a:	4608      	mov	r0, r1
 8007a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <__sfputs_r>:
 8007a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a24:	4606      	mov	r6, r0
 8007a26:	460f      	mov	r7, r1
 8007a28:	4614      	mov	r4, r2
 8007a2a:	18d5      	adds	r5, r2, r3
 8007a2c:	42ac      	cmp	r4, r5
 8007a2e:	d101      	bne.n	8007a34 <__sfputs_r+0x12>
 8007a30:	2000      	movs	r0, #0
 8007a32:	e007      	b.n	8007a44 <__sfputs_r+0x22>
 8007a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a38:	463a      	mov	r2, r7
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	f7ff ffda 	bl	80079f4 <__sfputc_r>
 8007a40:	1c43      	adds	r3, r0, #1
 8007a42:	d1f3      	bne.n	8007a2c <__sfputs_r+0xa>
 8007a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a48 <_vfiprintf_r>:
 8007a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a4c:	460d      	mov	r5, r1
 8007a4e:	b09d      	sub	sp, #116	; 0x74
 8007a50:	4614      	mov	r4, r2
 8007a52:	4698      	mov	r8, r3
 8007a54:	4606      	mov	r6, r0
 8007a56:	b118      	cbz	r0, 8007a60 <_vfiprintf_r+0x18>
 8007a58:	6a03      	ldr	r3, [r0, #32]
 8007a5a:	b90b      	cbnz	r3, 8007a60 <_vfiprintf_r+0x18>
 8007a5c:	f7ff f938 	bl	8006cd0 <__sinit>
 8007a60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a62:	07d9      	lsls	r1, r3, #31
 8007a64:	d405      	bmi.n	8007a72 <_vfiprintf_r+0x2a>
 8007a66:	89ab      	ldrh	r3, [r5, #12]
 8007a68:	059a      	lsls	r2, r3, #22
 8007a6a:	d402      	bmi.n	8007a72 <_vfiprintf_r+0x2a>
 8007a6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a6e:	f7ff fc14 	bl	800729a <__retarget_lock_acquire_recursive>
 8007a72:	89ab      	ldrh	r3, [r5, #12]
 8007a74:	071b      	lsls	r3, r3, #28
 8007a76:	d501      	bpl.n	8007a7c <_vfiprintf_r+0x34>
 8007a78:	692b      	ldr	r3, [r5, #16]
 8007a7a:	b99b      	cbnz	r3, 8007aa4 <_vfiprintf_r+0x5c>
 8007a7c:	4629      	mov	r1, r5
 8007a7e:	4630      	mov	r0, r6
 8007a80:	f7ff fa98 	bl	8006fb4 <__swsetup_r>
 8007a84:	b170      	cbz	r0, 8007aa4 <_vfiprintf_r+0x5c>
 8007a86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a88:	07dc      	lsls	r4, r3, #31
 8007a8a:	d504      	bpl.n	8007a96 <_vfiprintf_r+0x4e>
 8007a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a90:	b01d      	add	sp, #116	; 0x74
 8007a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a96:	89ab      	ldrh	r3, [r5, #12]
 8007a98:	0598      	lsls	r0, r3, #22
 8007a9a:	d4f7      	bmi.n	8007a8c <_vfiprintf_r+0x44>
 8007a9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a9e:	f7ff fbfd 	bl	800729c <__retarget_lock_release_recursive>
 8007aa2:	e7f3      	b.n	8007a8c <_vfiprintf_r+0x44>
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8007aa8:	2320      	movs	r3, #32
 8007aaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007aae:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ab2:	2330      	movs	r3, #48	; 0x30
 8007ab4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007c68 <_vfiprintf_r+0x220>
 8007ab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007abc:	f04f 0901 	mov.w	r9, #1
 8007ac0:	4623      	mov	r3, r4
 8007ac2:	469a      	mov	sl, r3
 8007ac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ac8:	b10a      	cbz	r2, 8007ace <_vfiprintf_r+0x86>
 8007aca:	2a25      	cmp	r2, #37	; 0x25
 8007acc:	d1f9      	bne.n	8007ac2 <_vfiprintf_r+0x7a>
 8007ace:	ebba 0b04 	subs.w	fp, sl, r4
 8007ad2:	d00b      	beq.n	8007aec <_vfiprintf_r+0xa4>
 8007ad4:	465b      	mov	r3, fp
 8007ad6:	4622      	mov	r2, r4
 8007ad8:	4629      	mov	r1, r5
 8007ada:	4630      	mov	r0, r6
 8007adc:	f7ff ffa1 	bl	8007a22 <__sfputs_r>
 8007ae0:	3001      	adds	r0, #1
 8007ae2:	f000 80a9 	beq.w	8007c38 <_vfiprintf_r+0x1f0>
 8007ae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ae8:	445a      	add	r2, fp
 8007aea:	9209      	str	r2, [sp, #36]	; 0x24
 8007aec:	f89a 3000 	ldrb.w	r3, [sl]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f000 80a1 	beq.w	8007c38 <_vfiprintf_r+0x1f0>
 8007af6:	2300      	movs	r3, #0
 8007af8:	f04f 32ff 	mov.w	r2, #4294967295
 8007afc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b00:	f10a 0a01 	add.w	sl, sl, #1
 8007b04:	9304      	str	r3, [sp, #16]
 8007b06:	9307      	str	r3, [sp, #28]
 8007b08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b0c:	931a      	str	r3, [sp, #104]	; 0x68
 8007b0e:	4654      	mov	r4, sl
 8007b10:	2205      	movs	r2, #5
 8007b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b16:	4854      	ldr	r0, [pc, #336]	; (8007c68 <_vfiprintf_r+0x220>)
 8007b18:	f7f8 fb72 	bl	8000200 <memchr>
 8007b1c:	9a04      	ldr	r2, [sp, #16]
 8007b1e:	b9d8      	cbnz	r0, 8007b58 <_vfiprintf_r+0x110>
 8007b20:	06d1      	lsls	r1, r2, #27
 8007b22:	bf44      	itt	mi
 8007b24:	2320      	movmi	r3, #32
 8007b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b2a:	0713      	lsls	r3, r2, #28
 8007b2c:	bf44      	itt	mi
 8007b2e:	232b      	movmi	r3, #43	; 0x2b
 8007b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b34:	f89a 3000 	ldrb.w	r3, [sl]
 8007b38:	2b2a      	cmp	r3, #42	; 0x2a
 8007b3a:	d015      	beq.n	8007b68 <_vfiprintf_r+0x120>
 8007b3c:	9a07      	ldr	r2, [sp, #28]
 8007b3e:	4654      	mov	r4, sl
 8007b40:	2000      	movs	r0, #0
 8007b42:	f04f 0c0a 	mov.w	ip, #10
 8007b46:	4621      	mov	r1, r4
 8007b48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b4c:	3b30      	subs	r3, #48	; 0x30
 8007b4e:	2b09      	cmp	r3, #9
 8007b50:	d94d      	bls.n	8007bee <_vfiprintf_r+0x1a6>
 8007b52:	b1b0      	cbz	r0, 8007b82 <_vfiprintf_r+0x13a>
 8007b54:	9207      	str	r2, [sp, #28]
 8007b56:	e014      	b.n	8007b82 <_vfiprintf_r+0x13a>
 8007b58:	eba0 0308 	sub.w	r3, r0, r8
 8007b5c:	fa09 f303 	lsl.w	r3, r9, r3
 8007b60:	4313      	orrs	r3, r2
 8007b62:	9304      	str	r3, [sp, #16]
 8007b64:	46a2      	mov	sl, r4
 8007b66:	e7d2      	b.n	8007b0e <_vfiprintf_r+0xc6>
 8007b68:	9b03      	ldr	r3, [sp, #12]
 8007b6a:	1d19      	adds	r1, r3, #4
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	9103      	str	r1, [sp, #12]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	bfbb      	ittet	lt
 8007b74:	425b      	neglt	r3, r3
 8007b76:	f042 0202 	orrlt.w	r2, r2, #2
 8007b7a:	9307      	strge	r3, [sp, #28]
 8007b7c:	9307      	strlt	r3, [sp, #28]
 8007b7e:	bfb8      	it	lt
 8007b80:	9204      	strlt	r2, [sp, #16]
 8007b82:	7823      	ldrb	r3, [r4, #0]
 8007b84:	2b2e      	cmp	r3, #46	; 0x2e
 8007b86:	d10c      	bne.n	8007ba2 <_vfiprintf_r+0x15a>
 8007b88:	7863      	ldrb	r3, [r4, #1]
 8007b8a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b8c:	d134      	bne.n	8007bf8 <_vfiprintf_r+0x1b0>
 8007b8e:	9b03      	ldr	r3, [sp, #12]
 8007b90:	1d1a      	adds	r2, r3, #4
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	9203      	str	r2, [sp, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	bfb8      	it	lt
 8007b9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b9e:	3402      	adds	r4, #2
 8007ba0:	9305      	str	r3, [sp, #20]
 8007ba2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007c78 <_vfiprintf_r+0x230>
 8007ba6:	7821      	ldrb	r1, [r4, #0]
 8007ba8:	2203      	movs	r2, #3
 8007baa:	4650      	mov	r0, sl
 8007bac:	f7f8 fb28 	bl	8000200 <memchr>
 8007bb0:	b138      	cbz	r0, 8007bc2 <_vfiprintf_r+0x17a>
 8007bb2:	9b04      	ldr	r3, [sp, #16]
 8007bb4:	eba0 000a 	sub.w	r0, r0, sl
 8007bb8:	2240      	movs	r2, #64	; 0x40
 8007bba:	4082      	lsls	r2, r0
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	3401      	adds	r4, #1
 8007bc0:	9304      	str	r3, [sp, #16]
 8007bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bc6:	4829      	ldr	r0, [pc, #164]	; (8007c6c <_vfiprintf_r+0x224>)
 8007bc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bcc:	2206      	movs	r2, #6
 8007bce:	f7f8 fb17 	bl	8000200 <memchr>
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	d03f      	beq.n	8007c56 <_vfiprintf_r+0x20e>
 8007bd6:	4b26      	ldr	r3, [pc, #152]	; (8007c70 <_vfiprintf_r+0x228>)
 8007bd8:	bb1b      	cbnz	r3, 8007c22 <_vfiprintf_r+0x1da>
 8007bda:	9b03      	ldr	r3, [sp, #12]
 8007bdc:	3307      	adds	r3, #7
 8007bde:	f023 0307 	bic.w	r3, r3, #7
 8007be2:	3308      	adds	r3, #8
 8007be4:	9303      	str	r3, [sp, #12]
 8007be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007be8:	443b      	add	r3, r7
 8007bea:	9309      	str	r3, [sp, #36]	; 0x24
 8007bec:	e768      	b.n	8007ac0 <_vfiprintf_r+0x78>
 8007bee:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bf2:	460c      	mov	r4, r1
 8007bf4:	2001      	movs	r0, #1
 8007bf6:	e7a6      	b.n	8007b46 <_vfiprintf_r+0xfe>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	3401      	adds	r4, #1
 8007bfc:	9305      	str	r3, [sp, #20]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	f04f 0c0a 	mov.w	ip, #10
 8007c04:	4620      	mov	r0, r4
 8007c06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c0a:	3a30      	subs	r2, #48	; 0x30
 8007c0c:	2a09      	cmp	r2, #9
 8007c0e:	d903      	bls.n	8007c18 <_vfiprintf_r+0x1d0>
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d0c6      	beq.n	8007ba2 <_vfiprintf_r+0x15a>
 8007c14:	9105      	str	r1, [sp, #20]
 8007c16:	e7c4      	b.n	8007ba2 <_vfiprintf_r+0x15a>
 8007c18:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e7f0      	b.n	8007c04 <_vfiprintf_r+0x1bc>
 8007c22:	ab03      	add	r3, sp, #12
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	462a      	mov	r2, r5
 8007c28:	4b12      	ldr	r3, [pc, #72]	; (8007c74 <_vfiprintf_r+0x22c>)
 8007c2a:	a904      	add	r1, sp, #16
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	f3af 8000 	nop.w
 8007c32:	4607      	mov	r7, r0
 8007c34:	1c78      	adds	r0, r7, #1
 8007c36:	d1d6      	bne.n	8007be6 <_vfiprintf_r+0x19e>
 8007c38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c3a:	07d9      	lsls	r1, r3, #31
 8007c3c:	d405      	bmi.n	8007c4a <_vfiprintf_r+0x202>
 8007c3e:	89ab      	ldrh	r3, [r5, #12]
 8007c40:	059a      	lsls	r2, r3, #22
 8007c42:	d402      	bmi.n	8007c4a <_vfiprintf_r+0x202>
 8007c44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c46:	f7ff fb29 	bl	800729c <__retarget_lock_release_recursive>
 8007c4a:	89ab      	ldrh	r3, [r5, #12]
 8007c4c:	065b      	lsls	r3, r3, #25
 8007c4e:	f53f af1d 	bmi.w	8007a8c <_vfiprintf_r+0x44>
 8007c52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c54:	e71c      	b.n	8007a90 <_vfiprintf_r+0x48>
 8007c56:	ab03      	add	r3, sp, #12
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	462a      	mov	r2, r5
 8007c5c:	4b05      	ldr	r3, [pc, #20]	; (8007c74 <_vfiprintf_r+0x22c>)
 8007c5e:	a904      	add	r1, sp, #16
 8007c60:	4630      	mov	r0, r6
 8007c62:	f000 f879 	bl	8007d58 <_printf_i>
 8007c66:	e7e4      	b.n	8007c32 <_vfiprintf_r+0x1ea>
 8007c68:	08009920 	.word	0x08009920
 8007c6c:	0800992a 	.word	0x0800992a
 8007c70:	00000000 	.word	0x00000000
 8007c74:	08007a23 	.word	0x08007a23
 8007c78:	08009926 	.word	0x08009926

08007c7c <_printf_common>:
 8007c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c80:	4616      	mov	r6, r2
 8007c82:	4699      	mov	r9, r3
 8007c84:	688a      	ldr	r2, [r1, #8]
 8007c86:	690b      	ldr	r3, [r1, #16]
 8007c88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	bfb8      	it	lt
 8007c90:	4613      	movlt	r3, r2
 8007c92:	6033      	str	r3, [r6, #0]
 8007c94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c98:	4607      	mov	r7, r0
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	b10a      	cbz	r2, 8007ca2 <_printf_common+0x26>
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	6033      	str	r3, [r6, #0]
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	0699      	lsls	r1, r3, #26
 8007ca6:	bf42      	ittt	mi
 8007ca8:	6833      	ldrmi	r3, [r6, #0]
 8007caa:	3302      	addmi	r3, #2
 8007cac:	6033      	strmi	r3, [r6, #0]
 8007cae:	6825      	ldr	r5, [r4, #0]
 8007cb0:	f015 0506 	ands.w	r5, r5, #6
 8007cb4:	d106      	bne.n	8007cc4 <_printf_common+0x48>
 8007cb6:	f104 0a19 	add.w	sl, r4, #25
 8007cba:	68e3      	ldr	r3, [r4, #12]
 8007cbc:	6832      	ldr	r2, [r6, #0]
 8007cbe:	1a9b      	subs	r3, r3, r2
 8007cc0:	42ab      	cmp	r3, r5
 8007cc2:	dc26      	bgt.n	8007d12 <_printf_common+0x96>
 8007cc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cc8:	1e13      	subs	r3, r2, #0
 8007cca:	6822      	ldr	r2, [r4, #0]
 8007ccc:	bf18      	it	ne
 8007cce:	2301      	movne	r3, #1
 8007cd0:	0692      	lsls	r2, r2, #26
 8007cd2:	d42b      	bmi.n	8007d2c <_printf_common+0xb0>
 8007cd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cd8:	4649      	mov	r1, r9
 8007cda:	4638      	mov	r0, r7
 8007cdc:	47c0      	blx	r8
 8007cde:	3001      	adds	r0, #1
 8007ce0:	d01e      	beq.n	8007d20 <_printf_common+0xa4>
 8007ce2:	6823      	ldr	r3, [r4, #0]
 8007ce4:	6922      	ldr	r2, [r4, #16]
 8007ce6:	f003 0306 	and.w	r3, r3, #6
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	bf02      	ittt	eq
 8007cee:	68e5      	ldreq	r5, [r4, #12]
 8007cf0:	6833      	ldreq	r3, [r6, #0]
 8007cf2:	1aed      	subeq	r5, r5, r3
 8007cf4:	68a3      	ldr	r3, [r4, #8]
 8007cf6:	bf0c      	ite	eq
 8007cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cfc:	2500      	movne	r5, #0
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	bfc4      	itt	gt
 8007d02:	1a9b      	subgt	r3, r3, r2
 8007d04:	18ed      	addgt	r5, r5, r3
 8007d06:	2600      	movs	r6, #0
 8007d08:	341a      	adds	r4, #26
 8007d0a:	42b5      	cmp	r5, r6
 8007d0c:	d11a      	bne.n	8007d44 <_printf_common+0xc8>
 8007d0e:	2000      	movs	r0, #0
 8007d10:	e008      	b.n	8007d24 <_printf_common+0xa8>
 8007d12:	2301      	movs	r3, #1
 8007d14:	4652      	mov	r2, sl
 8007d16:	4649      	mov	r1, r9
 8007d18:	4638      	mov	r0, r7
 8007d1a:	47c0      	blx	r8
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	d103      	bne.n	8007d28 <_printf_common+0xac>
 8007d20:	f04f 30ff 	mov.w	r0, #4294967295
 8007d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d28:	3501      	adds	r5, #1
 8007d2a:	e7c6      	b.n	8007cba <_printf_common+0x3e>
 8007d2c:	18e1      	adds	r1, r4, r3
 8007d2e:	1c5a      	adds	r2, r3, #1
 8007d30:	2030      	movs	r0, #48	; 0x30
 8007d32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d36:	4422      	add	r2, r4
 8007d38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d40:	3302      	adds	r3, #2
 8007d42:	e7c7      	b.n	8007cd4 <_printf_common+0x58>
 8007d44:	2301      	movs	r3, #1
 8007d46:	4622      	mov	r2, r4
 8007d48:	4649      	mov	r1, r9
 8007d4a:	4638      	mov	r0, r7
 8007d4c:	47c0      	blx	r8
 8007d4e:	3001      	adds	r0, #1
 8007d50:	d0e6      	beq.n	8007d20 <_printf_common+0xa4>
 8007d52:	3601      	adds	r6, #1
 8007d54:	e7d9      	b.n	8007d0a <_printf_common+0x8e>
	...

08007d58 <_printf_i>:
 8007d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d5c:	7e0f      	ldrb	r7, [r1, #24]
 8007d5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d60:	2f78      	cmp	r7, #120	; 0x78
 8007d62:	4691      	mov	r9, r2
 8007d64:	4680      	mov	r8, r0
 8007d66:	460c      	mov	r4, r1
 8007d68:	469a      	mov	sl, r3
 8007d6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d6e:	d807      	bhi.n	8007d80 <_printf_i+0x28>
 8007d70:	2f62      	cmp	r7, #98	; 0x62
 8007d72:	d80a      	bhi.n	8007d8a <_printf_i+0x32>
 8007d74:	2f00      	cmp	r7, #0
 8007d76:	f000 80d4 	beq.w	8007f22 <_printf_i+0x1ca>
 8007d7a:	2f58      	cmp	r7, #88	; 0x58
 8007d7c:	f000 80c0 	beq.w	8007f00 <_printf_i+0x1a8>
 8007d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d88:	e03a      	b.n	8007e00 <_printf_i+0xa8>
 8007d8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d8e:	2b15      	cmp	r3, #21
 8007d90:	d8f6      	bhi.n	8007d80 <_printf_i+0x28>
 8007d92:	a101      	add	r1, pc, #4	; (adr r1, 8007d98 <_printf_i+0x40>)
 8007d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d98:	08007df1 	.word	0x08007df1
 8007d9c:	08007e05 	.word	0x08007e05
 8007da0:	08007d81 	.word	0x08007d81
 8007da4:	08007d81 	.word	0x08007d81
 8007da8:	08007d81 	.word	0x08007d81
 8007dac:	08007d81 	.word	0x08007d81
 8007db0:	08007e05 	.word	0x08007e05
 8007db4:	08007d81 	.word	0x08007d81
 8007db8:	08007d81 	.word	0x08007d81
 8007dbc:	08007d81 	.word	0x08007d81
 8007dc0:	08007d81 	.word	0x08007d81
 8007dc4:	08007f09 	.word	0x08007f09
 8007dc8:	08007e31 	.word	0x08007e31
 8007dcc:	08007ec3 	.word	0x08007ec3
 8007dd0:	08007d81 	.word	0x08007d81
 8007dd4:	08007d81 	.word	0x08007d81
 8007dd8:	08007f2b 	.word	0x08007f2b
 8007ddc:	08007d81 	.word	0x08007d81
 8007de0:	08007e31 	.word	0x08007e31
 8007de4:	08007d81 	.word	0x08007d81
 8007de8:	08007d81 	.word	0x08007d81
 8007dec:	08007ecb 	.word	0x08007ecb
 8007df0:	682b      	ldr	r3, [r5, #0]
 8007df2:	1d1a      	adds	r2, r3, #4
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	602a      	str	r2, [r5, #0]
 8007df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e00:	2301      	movs	r3, #1
 8007e02:	e09f      	b.n	8007f44 <_printf_i+0x1ec>
 8007e04:	6820      	ldr	r0, [r4, #0]
 8007e06:	682b      	ldr	r3, [r5, #0]
 8007e08:	0607      	lsls	r7, r0, #24
 8007e0a:	f103 0104 	add.w	r1, r3, #4
 8007e0e:	6029      	str	r1, [r5, #0]
 8007e10:	d501      	bpl.n	8007e16 <_printf_i+0xbe>
 8007e12:	681e      	ldr	r6, [r3, #0]
 8007e14:	e003      	b.n	8007e1e <_printf_i+0xc6>
 8007e16:	0646      	lsls	r6, r0, #25
 8007e18:	d5fb      	bpl.n	8007e12 <_printf_i+0xba>
 8007e1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007e1e:	2e00      	cmp	r6, #0
 8007e20:	da03      	bge.n	8007e2a <_printf_i+0xd2>
 8007e22:	232d      	movs	r3, #45	; 0x2d
 8007e24:	4276      	negs	r6, r6
 8007e26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e2a:	485a      	ldr	r0, [pc, #360]	; (8007f94 <_printf_i+0x23c>)
 8007e2c:	230a      	movs	r3, #10
 8007e2e:	e012      	b.n	8007e56 <_printf_i+0xfe>
 8007e30:	682b      	ldr	r3, [r5, #0]
 8007e32:	6820      	ldr	r0, [r4, #0]
 8007e34:	1d19      	adds	r1, r3, #4
 8007e36:	6029      	str	r1, [r5, #0]
 8007e38:	0605      	lsls	r5, r0, #24
 8007e3a:	d501      	bpl.n	8007e40 <_printf_i+0xe8>
 8007e3c:	681e      	ldr	r6, [r3, #0]
 8007e3e:	e002      	b.n	8007e46 <_printf_i+0xee>
 8007e40:	0641      	lsls	r1, r0, #25
 8007e42:	d5fb      	bpl.n	8007e3c <_printf_i+0xe4>
 8007e44:	881e      	ldrh	r6, [r3, #0]
 8007e46:	4853      	ldr	r0, [pc, #332]	; (8007f94 <_printf_i+0x23c>)
 8007e48:	2f6f      	cmp	r7, #111	; 0x6f
 8007e4a:	bf0c      	ite	eq
 8007e4c:	2308      	moveq	r3, #8
 8007e4e:	230a      	movne	r3, #10
 8007e50:	2100      	movs	r1, #0
 8007e52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e56:	6865      	ldr	r5, [r4, #4]
 8007e58:	60a5      	str	r5, [r4, #8]
 8007e5a:	2d00      	cmp	r5, #0
 8007e5c:	bfa2      	ittt	ge
 8007e5e:	6821      	ldrge	r1, [r4, #0]
 8007e60:	f021 0104 	bicge.w	r1, r1, #4
 8007e64:	6021      	strge	r1, [r4, #0]
 8007e66:	b90e      	cbnz	r6, 8007e6c <_printf_i+0x114>
 8007e68:	2d00      	cmp	r5, #0
 8007e6a:	d04b      	beq.n	8007f04 <_printf_i+0x1ac>
 8007e6c:	4615      	mov	r5, r2
 8007e6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e72:	fb03 6711 	mls	r7, r3, r1, r6
 8007e76:	5dc7      	ldrb	r7, [r0, r7]
 8007e78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e7c:	4637      	mov	r7, r6
 8007e7e:	42bb      	cmp	r3, r7
 8007e80:	460e      	mov	r6, r1
 8007e82:	d9f4      	bls.n	8007e6e <_printf_i+0x116>
 8007e84:	2b08      	cmp	r3, #8
 8007e86:	d10b      	bne.n	8007ea0 <_printf_i+0x148>
 8007e88:	6823      	ldr	r3, [r4, #0]
 8007e8a:	07de      	lsls	r6, r3, #31
 8007e8c:	d508      	bpl.n	8007ea0 <_printf_i+0x148>
 8007e8e:	6923      	ldr	r3, [r4, #16]
 8007e90:	6861      	ldr	r1, [r4, #4]
 8007e92:	4299      	cmp	r1, r3
 8007e94:	bfde      	ittt	le
 8007e96:	2330      	movle	r3, #48	; 0x30
 8007e98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ea0:	1b52      	subs	r2, r2, r5
 8007ea2:	6122      	str	r2, [r4, #16]
 8007ea4:	f8cd a000 	str.w	sl, [sp]
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	aa03      	add	r2, sp, #12
 8007eac:	4621      	mov	r1, r4
 8007eae:	4640      	mov	r0, r8
 8007eb0:	f7ff fee4 	bl	8007c7c <_printf_common>
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	d14a      	bne.n	8007f4e <_printf_i+0x1f6>
 8007eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ebc:	b004      	add	sp, #16
 8007ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	f043 0320 	orr.w	r3, r3, #32
 8007ec8:	6023      	str	r3, [r4, #0]
 8007eca:	4833      	ldr	r0, [pc, #204]	; (8007f98 <_printf_i+0x240>)
 8007ecc:	2778      	movs	r7, #120	; 0x78
 8007ece:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	6829      	ldr	r1, [r5, #0]
 8007ed6:	061f      	lsls	r7, r3, #24
 8007ed8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007edc:	d402      	bmi.n	8007ee4 <_printf_i+0x18c>
 8007ede:	065f      	lsls	r7, r3, #25
 8007ee0:	bf48      	it	mi
 8007ee2:	b2b6      	uxthmi	r6, r6
 8007ee4:	07df      	lsls	r7, r3, #31
 8007ee6:	bf48      	it	mi
 8007ee8:	f043 0320 	orrmi.w	r3, r3, #32
 8007eec:	6029      	str	r1, [r5, #0]
 8007eee:	bf48      	it	mi
 8007ef0:	6023      	strmi	r3, [r4, #0]
 8007ef2:	b91e      	cbnz	r6, 8007efc <_printf_i+0x1a4>
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	f023 0320 	bic.w	r3, r3, #32
 8007efa:	6023      	str	r3, [r4, #0]
 8007efc:	2310      	movs	r3, #16
 8007efe:	e7a7      	b.n	8007e50 <_printf_i+0xf8>
 8007f00:	4824      	ldr	r0, [pc, #144]	; (8007f94 <_printf_i+0x23c>)
 8007f02:	e7e4      	b.n	8007ece <_printf_i+0x176>
 8007f04:	4615      	mov	r5, r2
 8007f06:	e7bd      	b.n	8007e84 <_printf_i+0x12c>
 8007f08:	682b      	ldr	r3, [r5, #0]
 8007f0a:	6826      	ldr	r6, [r4, #0]
 8007f0c:	6961      	ldr	r1, [r4, #20]
 8007f0e:	1d18      	adds	r0, r3, #4
 8007f10:	6028      	str	r0, [r5, #0]
 8007f12:	0635      	lsls	r5, r6, #24
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	d501      	bpl.n	8007f1c <_printf_i+0x1c4>
 8007f18:	6019      	str	r1, [r3, #0]
 8007f1a:	e002      	b.n	8007f22 <_printf_i+0x1ca>
 8007f1c:	0670      	lsls	r0, r6, #25
 8007f1e:	d5fb      	bpl.n	8007f18 <_printf_i+0x1c0>
 8007f20:	8019      	strh	r1, [r3, #0]
 8007f22:	2300      	movs	r3, #0
 8007f24:	6123      	str	r3, [r4, #16]
 8007f26:	4615      	mov	r5, r2
 8007f28:	e7bc      	b.n	8007ea4 <_printf_i+0x14c>
 8007f2a:	682b      	ldr	r3, [r5, #0]
 8007f2c:	1d1a      	adds	r2, r3, #4
 8007f2e:	602a      	str	r2, [r5, #0]
 8007f30:	681d      	ldr	r5, [r3, #0]
 8007f32:	6862      	ldr	r2, [r4, #4]
 8007f34:	2100      	movs	r1, #0
 8007f36:	4628      	mov	r0, r5
 8007f38:	f7f8 f962 	bl	8000200 <memchr>
 8007f3c:	b108      	cbz	r0, 8007f42 <_printf_i+0x1ea>
 8007f3e:	1b40      	subs	r0, r0, r5
 8007f40:	6060      	str	r0, [r4, #4]
 8007f42:	6863      	ldr	r3, [r4, #4]
 8007f44:	6123      	str	r3, [r4, #16]
 8007f46:	2300      	movs	r3, #0
 8007f48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f4c:	e7aa      	b.n	8007ea4 <_printf_i+0x14c>
 8007f4e:	6923      	ldr	r3, [r4, #16]
 8007f50:	462a      	mov	r2, r5
 8007f52:	4649      	mov	r1, r9
 8007f54:	4640      	mov	r0, r8
 8007f56:	47d0      	blx	sl
 8007f58:	3001      	adds	r0, #1
 8007f5a:	d0ad      	beq.n	8007eb8 <_printf_i+0x160>
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	079b      	lsls	r3, r3, #30
 8007f60:	d413      	bmi.n	8007f8a <_printf_i+0x232>
 8007f62:	68e0      	ldr	r0, [r4, #12]
 8007f64:	9b03      	ldr	r3, [sp, #12]
 8007f66:	4298      	cmp	r0, r3
 8007f68:	bfb8      	it	lt
 8007f6a:	4618      	movlt	r0, r3
 8007f6c:	e7a6      	b.n	8007ebc <_printf_i+0x164>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	4632      	mov	r2, r6
 8007f72:	4649      	mov	r1, r9
 8007f74:	4640      	mov	r0, r8
 8007f76:	47d0      	blx	sl
 8007f78:	3001      	adds	r0, #1
 8007f7a:	d09d      	beq.n	8007eb8 <_printf_i+0x160>
 8007f7c:	3501      	adds	r5, #1
 8007f7e:	68e3      	ldr	r3, [r4, #12]
 8007f80:	9903      	ldr	r1, [sp, #12]
 8007f82:	1a5b      	subs	r3, r3, r1
 8007f84:	42ab      	cmp	r3, r5
 8007f86:	dcf2      	bgt.n	8007f6e <_printf_i+0x216>
 8007f88:	e7eb      	b.n	8007f62 <_printf_i+0x20a>
 8007f8a:	2500      	movs	r5, #0
 8007f8c:	f104 0619 	add.w	r6, r4, #25
 8007f90:	e7f5      	b.n	8007f7e <_printf_i+0x226>
 8007f92:	bf00      	nop
 8007f94:	08009931 	.word	0x08009931
 8007f98:	08009942 	.word	0x08009942

08007f9c <_scanf_chars>:
 8007f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fa0:	4615      	mov	r5, r2
 8007fa2:	688a      	ldr	r2, [r1, #8]
 8007fa4:	4680      	mov	r8, r0
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	b932      	cbnz	r2, 8007fb8 <_scanf_chars+0x1c>
 8007faa:	698a      	ldr	r2, [r1, #24]
 8007fac:	2a00      	cmp	r2, #0
 8007fae:	bf0c      	ite	eq
 8007fb0:	2201      	moveq	r2, #1
 8007fb2:	f04f 32ff 	movne.w	r2, #4294967295
 8007fb6:	608a      	str	r2, [r1, #8]
 8007fb8:	6822      	ldr	r2, [r4, #0]
 8007fba:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800804c <_scanf_chars+0xb0>
 8007fbe:	06d1      	lsls	r1, r2, #27
 8007fc0:	bf5f      	itttt	pl
 8007fc2:	681a      	ldrpl	r2, [r3, #0]
 8007fc4:	1d11      	addpl	r1, r2, #4
 8007fc6:	6019      	strpl	r1, [r3, #0]
 8007fc8:	6816      	ldrpl	r6, [r2, #0]
 8007fca:	2700      	movs	r7, #0
 8007fcc:	69a0      	ldr	r0, [r4, #24]
 8007fce:	b188      	cbz	r0, 8007ff4 <_scanf_chars+0x58>
 8007fd0:	2801      	cmp	r0, #1
 8007fd2:	d107      	bne.n	8007fe4 <_scanf_chars+0x48>
 8007fd4:	682a      	ldr	r2, [r5, #0]
 8007fd6:	7811      	ldrb	r1, [r2, #0]
 8007fd8:	6962      	ldr	r2, [r4, #20]
 8007fda:	5c52      	ldrb	r2, [r2, r1]
 8007fdc:	b952      	cbnz	r2, 8007ff4 <_scanf_chars+0x58>
 8007fde:	2f00      	cmp	r7, #0
 8007fe0:	d031      	beq.n	8008046 <_scanf_chars+0xaa>
 8007fe2:	e022      	b.n	800802a <_scanf_chars+0x8e>
 8007fe4:	2802      	cmp	r0, #2
 8007fe6:	d120      	bne.n	800802a <_scanf_chars+0x8e>
 8007fe8:	682b      	ldr	r3, [r5, #0]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	f819 3003 	ldrb.w	r3, [r9, r3]
 8007ff0:	071b      	lsls	r3, r3, #28
 8007ff2:	d41a      	bmi.n	800802a <_scanf_chars+0x8e>
 8007ff4:	6823      	ldr	r3, [r4, #0]
 8007ff6:	06da      	lsls	r2, r3, #27
 8007ff8:	bf5e      	ittt	pl
 8007ffa:	682b      	ldrpl	r3, [r5, #0]
 8007ffc:	781b      	ldrbpl	r3, [r3, #0]
 8007ffe:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008002:	682a      	ldr	r2, [r5, #0]
 8008004:	686b      	ldr	r3, [r5, #4]
 8008006:	3201      	adds	r2, #1
 8008008:	602a      	str	r2, [r5, #0]
 800800a:	68a2      	ldr	r2, [r4, #8]
 800800c:	3b01      	subs	r3, #1
 800800e:	3a01      	subs	r2, #1
 8008010:	606b      	str	r3, [r5, #4]
 8008012:	3701      	adds	r7, #1
 8008014:	60a2      	str	r2, [r4, #8]
 8008016:	b142      	cbz	r2, 800802a <_scanf_chars+0x8e>
 8008018:	2b00      	cmp	r3, #0
 800801a:	dcd7      	bgt.n	8007fcc <_scanf_chars+0x30>
 800801c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008020:	4629      	mov	r1, r5
 8008022:	4640      	mov	r0, r8
 8008024:	4798      	blx	r3
 8008026:	2800      	cmp	r0, #0
 8008028:	d0d0      	beq.n	8007fcc <_scanf_chars+0x30>
 800802a:	6823      	ldr	r3, [r4, #0]
 800802c:	f013 0310 	ands.w	r3, r3, #16
 8008030:	d105      	bne.n	800803e <_scanf_chars+0xa2>
 8008032:	68e2      	ldr	r2, [r4, #12]
 8008034:	3201      	adds	r2, #1
 8008036:	60e2      	str	r2, [r4, #12]
 8008038:	69a2      	ldr	r2, [r4, #24]
 800803a:	b102      	cbz	r2, 800803e <_scanf_chars+0xa2>
 800803c:	7033      	strb	r3, [r6, #0]
 800803e:	6923      	ldr	r3, [r4, #16]
 8008040:	443b      	add	r3, r7
 8008042:	6123      	str	r3, [r4, #16]
 8008044:	2000      	movs	r0, #0
 8008046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800804a:	bf00      	nop
 800804c:	08009773 	.word	0x08009773

08008050 <_scanf_i>:
 8008050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008054:	4698      	mov	r8, r3
 8008056:	4b74      	ldr	r3, [pc, #464]	; (8008228 <_scanf_i+0x1d8>)
 8008058:	460c      	mov	r4, r1
 800805a:	4682      	mov	sl, r0
 800805c:	4616      	mov	r6, r2
 800805e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008062:	b087      	sub	sp, #28
 8008064:	ab03      	add	r3, sp, #12
 8008066:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800806a:	4b70      	ldr	r3, [pc, #448]	; (800822c <_scanf_i+0x1dc>)
 800806c:	69a1      	ldr	r1, [r4, #24]
 800806e:	4a70      	ldr	r2, [pc, #448]	; (8008230 <_scanf_i+0x1e0>)
 8008070:	2903      	cmp	r1, #3
 8008072:	bf18      	it	ne
 8008074:	461a      	movne	r2, r3
 8008076:	68a3      	ldr	r3, [r4, #8]
 8008078:	9201      	str	r2, [sp, #4]
 800807a:	1e5a      	subs	r2, r3, #1
 800807c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008080:	bf88      	it	hi
 8008082:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008086:	4627      	mov	r7, r4
 8008088:	bf82      	ittt	hi
 800808a:	eb03 0905 	addhi.w	r9, r3, r5
 800808e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008092:	60a3      	strhi	r3, [r4, #8]
 8008094:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008098:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800809c:	bf98      	it	ls
 800809e:	f04f 0900 	movls.w	r9, #0
 80080a2:	6023      	str	r3, [r4, #0]
 80080a4:	463d      	mov	r5, r7
 80080a6:	f04f 0b00 	mov.w	fp, #0
 80080aa:	6831      	ldr	r1, [r6, #0]
 80080ac:	ab03      	add	r3, sp, #12
 80080ae:	7809      	ldrb	r1, [r1, #0]
 80080b0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80080b4:	2202      	movs	r2, #2
 80080b6:	f7f8 f8a3 	bl	8000200 <memchr>
 80080ba:	b328      	cbz	r0, 8008108 <_scanf_i+0xb8>
 80080bc:	f1bb 0f01 	cmp.w	fp, #1
 80080c0:	d159      	bne.n	8008176 <_scanf_i+0x126>
 80080c2:	6862      	ldr	r2, [r4, #4]
 80080c4:	b92a      	cbnz	r2, 80080d2 <_scanf_i+0x82>
 80080c6:	6822      	ldr	r2, [r4, #0]
 80080c8:	2308      	movs	r3, #8
 80080ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080ce:	6063      	str	r3, [r4, #4]
 80080d0:	6022      	str	r2, [r4, #0]
 80080d2:	6822      	ldr	r2, [r4, #0]
 80080d4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80080d8:	6022      	str	r2, [r4, #0]
 80080da:	68a2      	ldr	r2, [r4, #8]
 80080dc:	1e51      	subs	r1, r2, #1
 80080de:	60a1      	str	r1, [r4, #8]
 80080e0:	b192      	cbz	r2, 8008108 <_scanf_i+0xb8>
 80080e2:	6832      	ldr	r2, [r6, #0]
 80080e4:	1c51      	adds	r1, r2, #1
 80080e6:	6031      	str	r1, [r6, #0]
 80080e8:	7812      	ldrb	r2, [r2, #0]
 80080ea:	f805 2b01 	strb.w	r2, [r5], #1
 80080ee:	6872      	ldr	r2, [r6, #4]
 80080f0:	3a01      	subs	r2, #1
 80080f2:	2a00      	cmp	r2, #0
 80080f4:	6072      	str	r2, [r6, #4]
 80080f6:	dc07      	bgt.n	8008108 <_scanf_i+0xb8>
 80080f8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80080fc:	4631      	mov	r1, r6
 80080fe:	4650      	mov	r0, sl
 8008100:	4790      	blx	r2
 8008102:	2800      	cmp	r0, #0
 8008104:	f040 8085 	bne.w	8008212 <_scanf_i+0x1c2>
 8008108:	f10b 0b01 	add.w	fp, fp, #1
 800810c:	f1bb 0f03 	cmp.w	fp, #3
 8008110:	d1cb      	bne.n	80080aa <_scanf_i+0x5a>
 8008112:	6863      	ldr	r3, [r4, #4]
 8008114:	b90b      	cbnz	r3, 800811a <_scanf_i+0xca>
 8008116:	230a      	movs	r3, #10
 8008118:	6063      	str	r3, [r4, #4]
 800811a:	6863      	ldr	r3, [r4, #4]
 800811c:	4945      	ldr	r1, [pc, #276]	; (8008234 <_scanf_i+0x1e4>)
 800811e:	6960      	ldr	r0, [r4, #20]
 8008120:	1ac9      	subs	r1, r1, r3
 8008122:	f000 f9ab 	bl	800847c <__sccl>
 8008126:	f04f 0b00 	mov.w	fp, #0
 800812a:	68a3      	ldr	r3, [r4, #8]
 800812c:	6822      	ldr	r2, [r4, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d03d      	beq.n	80081ae <_scanf_i+0x15e>
 8008132:	6831      	ldr	r1, [r6, #0]
 8008134:	6960      	ldr	r0, [r4, #20]
 8008136:	f891 c000 	ldrb.w	ip, [r1]
 800813a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800813e:	2800      	cmp	r0, #0
 8008140:	d035      	beq.n	80081ae <_scanf_i+0x15e>
 8008142:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008146:	d124      	bne.n	8008192 <_scanf_i+0x142>
 8008148:	0510      	lsls	r0, r2, #20
 800814a:	d522      	bpl.n	8008192 <_scanf_i+0x142>
 800814c:	f10b 0b01 	add.w	fp, fp, #1
 8008150:	f1b9 0f00 	cmp.w	r9, #0
 8008154:	d003      	beq.n	800815e <_scanf_i+0x10e>
 8008156:	3301      	adds	r3, #1
 8008158:	f109 39ff 	add.w	r9, r9, #4294967295
 800815c:	60a3      	str	r3, [r4, #8]
 800815e:	6873      	ldr	r3, [r6, #4]
 8008160:	3b01      	subs	r3, #1
 8008162:	2b00      	cmp	r3, #0
 8008164:	6073      	str	r3, [r6, #4]
 8008166:	dd1b      	ble.n	80081a0 <_scanf_i+0x150>
 8008168:	6833      	ldr	r3, [r6, #0]
 800816a:	3301      	adds	r3, #1
 800816c:	6033      	str	r3, [r6, #0]
 800816e:	68a3      	ldr	r3, [r4, #8]
 8008170:	3b01      	subs	r3, #1
 8008172:	60a3      	str	r3, [r4, #8]
 8008174:	e7d9      	b.n	800812a <_scanf_i+0xda>
 8008176:	f1bb 0f02 	cmp.w	fp, #2
 800817a:	d1ae      	bne.n	80080da <_scanf_i+0x8a>
 800817c:	6822      	ldr	r2, [r4, #0]
 800817e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008182:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008186:	d1bf      	bne.n	8008108 <_scanf_i+0xb8>
 8008188:	2310      	movs	r3, #16
 800818a:	6063      	str	r3, [r4, #4]
 800818c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008190:	e7a2      	b.n	80080d8 <_scanf_i+0x88>
 8008192:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008196:	6022      	str	r2, [r4, #0]
 8008198:	780b      	ldrb	r3, [r1, #0]
 800819a:	f805 3b01 	strb.w	r3, [r5], #1
 800819e:	e7de      	b.n	800815e <_scanf_i+0x10e>
 80081a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80081a4:	4631      	mov	r1, r6
 80081a6:	4650      	mov	r0, sl
 80081a8:	4798      	blx	r3
 80081aa:	2800      	cmp	r0, #0
 80081ac:	d0df      	beq.n	800816e <_scanf_i+0x11e>
 80081ae:	6823      	ldr	r3, [r4, #0]
 80081b0:	05d9      	lsls	r1, r3, #23
 80081b2:	d50d      	bpl.n	80081d0 <_scanf_i+0x180>
 80081b4:	42bd      	cmp	r5, r7
 80081b6:	d909      	bls.n	80081cc <_scanf_i+0x17c>
 80081b8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80081bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081c0:	4632      	mov	r2, r6
 80081c2:	4650      	mov	r0, sl
 80081c4:	4798      	blx	r3
 80081c6:	f105 39ff 	add.w	r9, r5, #4294967295
 80081ca:	464d      	mov	r5, r9
 80081cc:	42bd      	cmp	r5, r7
 80081ce:	d028      	beq.n	8008222 <_scanf_i+0x1d2>
 80081d0:	6822      	ldr	r2, [r4, #0]
 80081d2:	f012 0210 	ands.w	r2, r2, #16
 80081d6:	d113      	bne.n	8008200 <_scanf_i+0x1b0>
 80081d8:	702a      	strb	r2, [r5, #0]
 80081da:	6863      	ldr	r3, [r4, #4]
 80081dc:	9e01      	ldr	r6, [sp, #4]
 80081de:	4639      	mov	r1, r7
 80081e0:	4650      	mov	r0, sl
 80081e2:	47b0      	blx	r6
 80081e4:	f8d8 3000 	ldr.w	r3, [r8]
 80081e8:	6821      	ldr	r1, [r4, #0]
 80081ea:	1d1a      	adds	r2, r3, #4
 80081ec:	f8c8 2000 	str.w	r2, [r8]
 80081f0:	f011 0f20 	tst.w	r1, #32
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	d00f      	beq.n	8008218 <_scanf_i+0x1c8>
 80081f8:	6018      	str	r0, [r3, #0]
 80081fa:	68e3      	ldr	r3, [r4, #12]
 80081fc:	3301      	adds	r3, #1
 80081fe:	60e3      	str	r3, [r4, #12]
 8008200:	6923      	ldr	r3, [r4, #16]
 8008202:	1bed      	subs	r5, r5, r7
 8008204:	445d      	add	r5, fp
 8008206:	442b      	add	r3, r5
 8008208:	6123      	str	r3, [r4, #16]
 800820a:	2000      	movs	r0, #0
 800820c:	b007      	add	sp, #28
 800820e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008212:	f04f 0b00 	mov.w	fp, #0
 8008216:	e7ca      	b.n	80081ae <_scanf_i+0x15e>
 8008218:	07ca      	lsls	r2, r1, #31
 800821a:	bf4c      	ite	mi
 800821c:	8018      	strhmi	r0, [r3, #0]
 800821e:	6018      	strpl	r0, [r3, #0]
 8008220:	e7eb      	b.n	80081fa <_scanf_i+0x1aa>
 8008222:	2001      	movs	r0, #1
 8008224:	e7f2      	b.n	800820c <_scanf_i+0x1bc>
 8008226:	bf00      	nop
 8008228:	080094ac 	.word	0x080094ac
 800822c:	0800872d 	.word	0x0800872d
 8008230:	08006ba1 	.word	0x08006ba1
 8008234:	08009963 	.word	0x08009963

08008238 <__sflush_r>:
 8008238:	898a      	ldrh	r2, [r1, #12]
 800823a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800823e:	4605      	mov	r5, r0
 8008240:	0710      	lsls	r0, r2, #28
 8008242:	460c      	mov	r4, r1
 8008244:	d458      	bmi.n	80082f8 <__sflush_r+0xc0>
 8008246:	684b      	ldr	r3, [r1, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	dc05      	bgt.n	8008258 <__sflush_r+0x20>
 800824c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800824e:	2b00      	cmp	r3, #0
 8008250:	dc02      	bgt.n	8008258 <__sflush_r+0x20>
 8008252:	2000      	movs	r0, #0
 8008254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008258:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800825a:	2e00      	cmp	r6, #0
 800825c:	d0f9      	beq.n	8008252 <__sflush_r+0x1a>
 800825e:	2300      	movs	r3, #0
 8008260:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008264:	682f      	ldr	r7, [r5, #0]
 8008266:	6a21      	ldr	r1, [r4, #32]
 8008268:	602b      	str	r3, [r5, #0]
 800826a:	d032      	beq.n	80082d2 <__sflush_r+0x9a>
 800826c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800826e:	89a3      	ldrh	r3, [r4, #12]
 8008270:	075a      	lsls	r2, r3, #29
 8008272:	d505      	bpl.n	8008280 <__sflush_r+0x48>
 8008274:	6863      	ldr	r3, [r4, #4]
 8008276:	1ac0      	subs	r0, r0, r3
 8008278:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800827a:	b10b      	cbz	r3, 8008280 <__sflush_r+0x48>
 800827c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800827e:	1ac0      	subs	r0, r0, r3
 8008280:	2300      	movs	r3, #0
 8008282:	4602      	mov	r2, r0
 8008284:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008286:	6a21      	ldr	r1, [r4, #32]
 8008288:	4628      	mov	r0, r5
 800828a:	47b0      	blx	r6
 800828c:	1c43      	adds	r3, r0, #1
 800828e:	89a3      	ldrh	r3, [r4, #12]
 8008290:	d106      	bne.n	80082a0 <__sflush_r+0x68>
 8008292:	6829      	ldr	r1, [r5, #0]
 8008294:	291d      	cmp	r1, #29
 8008296:	d82b      	bhi.n	80082f0 <__sflush_r+0xb8>
 8008298:	4a29      	ldr	r2, [pc, #164]	; (8008340 <__sflush_r+0x108>)
 800829a:	410a      	asrs	r2, r1
 800829c:	07d6      	lsls	r6, r2, #31
 800829e:	d427      	bmi.n	80082f0 <__sflush_r+0xb8>
 80082a0:	2200      	movs	r2, #0
 80082a2:	6062      	str	r2, [r4, #4]
 80082a4:	04d9      	lsls	r1, r3, #19
 80082a6:	6922      	ldr	r2, [r4, #16]
 80082a8:	6022      	str	r2, [r4, #0]
 80082aa:	d504      	bpl.n	80082b6 <__sflush_r+0x7e>
 80082ac:	1c42      	adds	r2, r0, #1
 80082ae:	d101      	bne.n	80082b4 <__sflush_r+0x7c>
 80082b0:	682b      	ldr	r3, [r5, #0]
 80082b2:	b903      	cbnz	r3, 80082b6 <__sflush_r+0x7e>
 80082b4:	6560      	str	r0, [r4, #84]	; 0x54
 80082b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082b8:	602f      	str	r7, [r5, #0]
 80082ba:	2900      	cmp	r1, #0
 80082bc:	d0c9      	beq.n	8008252 <__sflush_r+0x1a>
 80082be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082c2:	4299      	cmp	r1, r3
 80082c4:	d002      	beq.n	80082cc <__sflush_r+0x94>
 80082c6:	4628      	mov	r0, r5
 80082c8:	f7ff f81e 	bl	8007308 <_free_r>
 80082cc:	2000      	movs	r0, #0
 80082ce:	6360      	str	r0, [r4, #52]	; 0x34
 80082d0:	e7c0      	b.n	8008254 <__sflush_r+0x1c>
 80082d2:	2301      	movs	r3, #1
 80082d4:	4628      	mov	r0, r5
 80082d6:	47b0      	blx	r6
 80082d8:	1c41      	adds	r1, r0, #1
 80082da:	d1c8      	bne.n	800826e <__sflush_r+0x36>
 80082dc:	682b      	ldr	r3, [r5, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d0c5      	beq.n	800826e <__sflush_r+0x36>
 80082e2:	2b1d      	cmp	r3, #29
 80082e4:	d001      	beq.n	80082ea <__sflush_r+0xb2>
 80082e6:	2b16      	cmp	r3, #22
 80082e8:	d101      	bne.n	80082ee <__sflush_r+0xb6>
 80082ea:	602f      	str	r7, [r5, #0]
 80082ec:	e7b1      	b.n	8008252 <__sflush_r+0x1a>
 80082ee:	89a3      	ldrh	r3, [r4, #12]
 80082f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082f4:	81a3      	strh	r3, [r4, #12]
 80082f6:	e7ad      	b.n	8008254 <__sflush_r+0x1c>
 80082f8:	690f      	ldr	r7, [r1, #16]
 80082fa:	2f00      	cmp	r7, #0
 80082fc:	d0a9      	beq.n	8008252 <__sflush_r+0x1a>
 80082fe:	0793      	lsls	r3, r2, #30
 8008300:	680e      	ldr	r6, [r1, #0]
 8008302:	bf08      	it	eq
 8008304:	694b      	ldreq	r3, [r1, #20]
 8008306:	600f      	str	r7, [r1, #0]
 8008308:	bf18      	it	ne
 800830a:	2300      	movne	r3, #0
 800830c:	eba6 0807 	sub.w	r8, r6, r7
 8008310:	608b      	str	r3, [r1, #8]
 8008312:	f1b8 0f00 	cmp.w	r8, #0
 8008316:	dd9c      	ble.n	8008252 <__sflush_r+0x1a>
 8008318:	6a21      	ldr	r1, [r4, #32]
 800831a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800831c:	4643      	mov	r3, r8
 800831e:	463a      	mov	r2, r7
 8008320:	4628      	mov	r0, r5
 8008322:	47b0      	blx	r6
 8008324:	2800      	cmp	r0, #0
 8008326:	dc06      	bgt.n	8008336 <__sflush_r+0xfe>
 8008328:	89a3      	ldrh	r3, [r4, #12]
 800832a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800832e:	81a3      	strh	r3, [r4, #12]
 8008330:	f04f 30ff 	mov.w	r0, #4294967295
 8008334:	e78e      	b.n	8008254 <__sflush_r+0x1c>
 8008336:	4407      	add	r7, r0
 8008338:	eba8 0800 	sub.w	r8, r8, r0
 800833c:	e7e9      	b.n	8008312 <__sflush_r+0xda>
 800833e:	bf00      	nop
 8008340:	dfbffffe 	.word	0xdfbffffe

08008344 <_fflush_r>:
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	690b      	ldr	r3, [r1, #16]
 8008348:	4605      	mov	r5, r0
 800834a:	460c      	mov	r4, r1
 800834c:	b913      	cbnz	r3, 8008354 <_fflush_r+0x10>
 800834e:	2500      	movs	r5, #0
 8008350:	4628      	mov	r0, r5
 8008352:	bd38      	pop	{r3, r4, r5, pc}
 8008354:	b118      	cbz	r0, 800835e <_fflush_r+0x1a>
 8008356:	6a03      	ldr	r3, [r0, #32]
 8008358:	b90b      	cbnz	r3, 800835e <_fflush_r+0x1a>
 800835a:	f7fe fcb9 	bl	8006cd0 <__sinit>
 800835e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d0f3      	beq.n	800834e <_fflush_r+0xa>
 8008366:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008368:	07d0      	lsls	r0, r2, #31
 800836a:	d404      	bmi.n	8008376 <_fflush_r+0x32>
 800836c:	0599      	lsls	r1, r3, #22
 800836e:	d402      	bmi.n	8008376 <_fflush_r+0x32>
 8008370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008372:	f7fe ff92 	bl	800729a <__retarget_lock_acquire_recursive>
 8008376:	4628      	mov	r0, r5
 8008378:	4621      	mov	r1, r4
 800837a:	f7ff ff5d 	bl	8008238 <__sflush_r>
 800837e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008380:	07da      	lsls	r2, r3, #31
 8008382:	4605      	mov	r5, r0
 8008384:	d4e4      	bmi.n	8008350 <_fflush_r+0xc>
 8008386:	89a3      	ldrh	r3, [r4, #12]
 8008388:	059b      	lsls	r3, r3, #22
 800838a:	d4e1      	bmi.n	8008350 <_fflush_r+0xc>
 800838c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800838e:	f7fe ff85 	bl	800729c <__retarget_lock_release_recursive>
 8008392:	e7dd      	b.n	8008350 <_fflush_r+0xc>

08008394 <fiprintf>:
 8008394:	b40e      	push	{r1, r2, r3}
 8008396:	b503      	push	{r0, r1, lr}
 8008398:	4601      	mov	r1, r0
 800839a:	ab03      	add	r3, sp, #12
 800839c:	4805      	ldr	r0, [pc, #20]	; (80083b4 <fiprintf+0x20>)
 800839e:	f853 2b04 	ldr.w	r2, [r3], #4
 80083a2:	6800      	ldr	r0, [r0, #0]
 80083a4:	9301      	str	r3, [sp, #4]
 80083a6:	f7ff fb4f 	bl	8007a48 <_vfiprintf_r>
 80083aa:	b002      	add	sp, #8
 80083ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80083b0:	b003      	add	sp, #12
 80083b2:	4770      	bx	lr
 80083b4:	20000068 	.word	0x20000068

080083b8 <__swhatbuf_r>:
 80083b8:	b570      	push	{r4, r5, r6, lr}
 80083ba:	460c      	mov	r4, r1
 80083bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c0:	2900      	cmp	r1, #0
 80083c2:	b096      	sub	sp, #88	; 0x58
 80083c4:	4615      	mov	r5, r2
 80083c6:	461e      	mov	r6, r3
 80083c8:	da0d      	bge.n	80083e6 <__swhatbuf_r+0x2e>
 80083ca:	89a3      	ldrh	r3, [r4, #12]
 80083cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80083d0:	f04f 0100 	mov.w	r1, #0
 80083d4:	bf0c      	ite	eq
 80083d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80083da:	2340      	movne	r3, #64	; 0x40
 80083dc:	2000      	movs	r0, #0
 80083de:	6031      	str	r1, [r6, #0]
 80083e0:	602b      	str	r3, [r5, #0]
 80083e2:	b016      	add	sp, #88	; 0x58
 80083e4:	bd70      	pop	{r4, r5, r6, pc}
 80083e6:	466a      	mov	r2, sp
 80083e8:	f000 f8d6 	bl	8008598 <_fstat_r>
 80083ec:	2800      	cmp	r0, #0
 80083ee:	dbec      	blt.n	80083ca <__swhatbuf_r+0x12>
 80083f0:	9901      	ldr	r1, [sp, #4]
 80083f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80083f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80083fa:	4259      	negs	r1, r3
 80083fc:	4159      	adcs	r1, r3
 80083fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008402:	e7eb      	b.n	80083dc <__swhatbuf_r+0x24>

08008404 <__smakebuf_r>:
 8008404:	898b      	ldrh	r3, [r1, #12]
 8008406:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008408:	079d      	lsls	r5, r3, #30
 800840a:	4606      	mov	r6, r0
 800840c:	460c      	mov	r4, r1
 800840e:	d507      	bpl.n	8008420 <__smakebuf_r+0x1c>
 8008410:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	6123      	str	r3, [r4, #16]
 8008418:	2301      	movs	r3, #1
 800841a:	6163      	str	r3, [r4, #20]
 800841c:	b002      	add	sp, #8
 800841e:	bd70      	pop	{r4, r5, r6, pc}
 8008420:	ab01      	add	r3, sp, #4
 8008422:	466a      	mov	r2, sp
 8008424:	f7ff ffc8 	bl	80083b8 <__swhatbuf_r>
 8008428:	9900      	ldr	r1, [sp, #0]
 800842a:	4605      	mov	r5, r0
 800842c:	4630      	mov	r0, r6
 800842e:	f7fe faa9 	bl	8006984 <_malloc_r>
 8008432:	b948      	cbnz	r0, 8008448 <__smakebuf_r+0x44>
 8008434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008438:	059a      	lsls	r2, r3, #22
 800843a:	d4ef      	bmi.n	800841c <__smakebuf_r+0x18>
 800843c:	f023 0303 	bic.w	r3, r3, #3
 8008440:	f043 0302 	orr.w	r3, r3, #2
 8008444:	81a3      	strh	r3, [r4, #12]
 8008446:	e7e3      	b.n	8008410 <__smakebuf_r+0xc>
 8008448:	89a3      	ldrh	r3, [r4, #12]
 800844a:	6020      	str	r0, [r4, #0]
 800844c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008450:	81a3      	strh	r3, [r4, #12]
 8008452:	9b00      	ldr	r3, [sp, #0]
 8008454:	6163      	str	r3, [r4, #20]
 8008456:	9b01      	ldr	r3, [sp, #4]
 8008458:	6120      	str	r0, [r4, #16]
 800845a:	b15b      	cbz	r3, 8008474 <__smakebuf_r+0x70>
 800845c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008460:	4630      	mov	r0, r6
 8008462:	f000 f8ab 	bl	80085bc <_isatty_r>
 8008466:	b128      	cbz	r0, 8008474 <__smakebuf_r+0x70>
 8008468:	89a3      	ldrh	r3, [r4, #12]
 800846a:	f023 0303 	bic.w	r3, r3, #3
 800846e:	f043 0301 	orr.w	r3, r3, #1
 8008472:	81a3      	strh	r3, [r4, #12]
 8008474:	89a3      	ldrh	r3, [r4, #12]
 8008476:	431d      	orrs	r5, r3
 8008478:	81a5      	strh	r5, [r4, #12]
 800847a:	e7cf      	b.n	800841c <__smakebuf_r+0x18>

0800847c <__sccl>:
 800847c:	b570      	push	{r4, r5, r6, lr}
 800847e:	780b      	ldrb	r3, [r1, #0]
 8008480:	4604      	mov	r4, r0
 8008482:	2b5e      	cmp	r3, #94	; 0x5e
 8008484:	bf0b      	itete	eq
 8008486:	784b      	ldrbeq	r3, [r1, #1]
 8008488:	1c4a      	addne	r2, r1, #1
 800848a:	1c8a      	addeq	r2, r1, #2
 800848c:	2100      	movne	r1, #0
 800848e:	bf08      	it	eq
 8008490:	2101      	moveq	r1, #1
 8008492:	3801      	subs	r0, #1
 8008494:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008498:	f800 1f01 	strb.w	r1, [r0, #1]!
 800849c:	42a8      	cmp	r0, r5
 800849e:	d1fb      	bne.n	8008498 <__sccl+0x1c>
 80084a0:	b90b      	cbnz	r3, 80084a6 <__sccl+0x2a>
 80084a2:	1e50      	subs	r0, r2, #1
 80084a4:	bd70      	pop	{r4, r5, r6, pc}
 80084a6:	f081 0101 	eor.w	r1, r1, #1
 80084aa:	54e1      	strb	r1, [r4, r3]
 80084ac:	4610      	mov	r0, r2
 80084ae:	4602      	mov	r2, r0
 80084b0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80084b4:	2d2d      	cmp	r5, #45	; 0x2d
 80084b6:	d005      	beq.n	80084c4 <__sccl+0x48>
 80084b8:	2d5d      	cmp	r5, #93	; 0x5d
 80084ba:	d016      	beq.n	80084ea <__sccl+0x6e>
 80084bc:	2d00      	cmp	r5, #0
 80084be:	d0f1      	beq.n	80084a4 <__sccl+0x28>
 80084c0:	462b      	mov	r3, r5
 80084c2:	e7f2      	b.n	80084aa <__sccl+0x2e>
 80084c4:	7846      	ldrb	r6, [r0, #1]
 80084c6:	2e5d      	cmp	r6, #93	; 0x5d
 80084c8:	d0fa      	beq.n	80084c0 <__sccl+0x44>
 80084ca:	42b3      	cmp	r3, r6
 80084cc:	dcf8      	bgt.n	80084c0 <__sccl+0x44>
 80084ce:	3002      	adds	r0, #2
 80084d0:	461a      	mov	r2, r3
 80084d2:	3201      	adds	r2, #1
 80084d4:	4296      	cmp	r6, r2
 80084d6:	54a1      	strb	r1, [r4, r2]
 80084d8:	dcfb      	bgt.n	80084d2 <__sccl+0x56>
 80084da:	1af2      	subs	r2, r6, r3
 80084dc:	3a01      	subs	r2, #1
 80084de:	1c5d      	adds	r5, r3, #1
 80084e0:	42b3      	cmp	r3, r6
 80084e2:	bfa8      	it	ge
 80084e4:	2200      	movge	r2, #0
 80084e6:	18ab      	adds	r3, r5, r2
 80084e8:	e7e1      	b.n	80084ae <__sccl+0x32>
 80084ea:	4610      	mov	r0, r2
 80084ec:	e7da      	b.n	80084a4 <__sccl+0x28>

080084ee <__submore>:
 80084ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084f2:	460c      	mov	r4, r1
 80084f4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80084f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084fa:	4299      	cmp	r1, r3
 80084fc:	d11d      	bne.n	800853a <__submore+0x4c>
 80084fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008502:	f7fe fa3f 	bl	8006984 <_malloc_r>
 8008506:	b918      	cbnz	r0, 8008510 <__submore+0x22>
 8008508:	f04f 30ff 	mov.w	r0, #4294967295
 800850c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008514:	63a3      	str	r3, [r4, #56]	; 0x38
 8008516:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800851a:	6360      	str	r0, [r4, #52]	; 0x34
 800851c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008520:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008524:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008528:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800852c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008530:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008534:	6020      	str	r0, [r4, #0]
 8008536:	2000      	movs	r0, #0
 8008538:	e7e8      	b.n	800850c <__submore+0x1e>
 800853a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800853c:	0077      	lsls	r7, r6, #1
 800853e:	463a      	mov	r2, r7
 8008540:	f000 f853 	bl	80085ea <_realloc_r>
 8008544:	4605      	mov	r5, r0
 8008546:	2800      	cmp	r0, #0
 8008548:	d0de      	beq.n	8008508 <__submore+0x1a>
 800854a:	eb00 0806 	add.w	r8, r0, r6
 800854e:	4601      	mov	r1, r0
 8008550:	4632      	mov	r2, r6
 8008552:	4640      	mov	r0, r8
 8008554:	f7fe feab 	bl	80072ae <memcpy>
 8008558:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800855c:	f8c4 8000 	str.w	r8, [r4]
 8008560:	e7e9      	b.n	8008536 <__submore+0x48>

08008562 <memmove>:
 8008562:	4288      	cmp	r0, r1
 8008564:	b510      	push	{r4, lr}
 8008566:	eb01 0402 	add.w	r4, r1, r2
 800856a:	d902      	bls.n	8008572 <memmove+0x10>
 800856c:	4284      	cmp	r4, r0
 800856e:	4623      	mov	r3, r4
 8008570:	d807      	bhi.n	8008582 <memmove+0x20>
 8008572:	1e43      	subs	r3, r0, #1
 8008574:	42a1      	cmp	r1, r4
 8008576:	d008      	beq.n	800858a <memmove+0x28>
 8008578:	f811 2b01 	ldrb.w	r2, [r1], #1
 800857c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008580:	e7f8      	b.n	8008574 <memmove+0x12>
 8008582:	4402      	add	r2, r0
 8008584:	4601      	mov	r1, r0
 8008586:	428a      	cmp	r2, r1
 8008588:	d100      	bne.n	800858c <memmove+0x2a>
 800858a:	bd10      	pop	{r4, pc}
 800858c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008590:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008594:	e7f7      	b.n	8008586 <memmove+0x24>
	...

08008598 <_fstat_r>:
 8008598:	b538      	push	{r3, r4, r5, lr}
 800859a:	4d07      	ldr	r5, [pc, #28]	; (80085b8 <_fstat_r+0x20>)
 800859c:	2300      	movs	r3, #0
 800859e:	4604      	mov	r4, r0
 80085a0:	4608      	mov	r0, r1
 80085a2:	4611      	mov	r1, r2
 80085a4:	602b      	str	r3, [r5, #0]
 80085a6:	f7f8 fcf2 	bl	8000f8e <_fstat>
 80085aa:	1c43      	adds	r3, r0, #1
 80085ac:	d102      	bne.n	80085b4 <_fstat_r+0x1c>
 80085ae:	682b      	ldr	r3, [r5, #0]
 80085b0:	b103      	cbz	r3, 80085b4 <_fstat_r+0x1c>
 80085b2:	6023      	str	r3, [r4, #0]
 80085b4:	bd38      	pop	{r3, r4, r5, pc}
 80085b6:	bf00      	nop
 80085b8:	20004ebc 	.word	0x20004ebc

080085bc <_isatty_r>:
 80085bc:	b538      	push	{r3, r4, r5, lr}
 80085be:	4d06      	ldr	r5, [pc, #24]	; (80085d8 <_isatty_r+0x1c>)
 80085c0:	2300      	movs	r3, #0
 80085c2:	4604      	mov	r4, r0
 80085c4:	4608      	mov	r0, r1
 80085c6:	602b      	str	r3, [r5, #0]
 80085c8:	f7f8 fcf1 	bl	8000fae <_isatty>
 80085cc:	1c43      	adds	r3, r0, #1
 80085ce:	d102      	bne.n	80085d6 <_isatty_r+0x1a>
 80085d0:	682b      	ldr	r3, [r5, #0]
 80085d2:	b103      	cbz	r3, 80085d6 <_isatty_r+0x1a>
 80085d4:	6023      	str	r3, [r4, #0]
 80085d6:	bd38      	pop	{r3, r4, r5, pc}
 80085d8:	20004ebc 	.word	0x20004ebc

080085dc <abort>:
 80085dc:	b508      	push	{r3, lr}
 80085de:	2006      	movs	r0, #6
 80085e0:	f000 f8ce 	bl	8008780 <raise>
 80085e4:	2001      	movs	r0, #1
 80085e6:	f7f8 fc83 	bl	8000ef0 <_exit>

080085ea <_realloc_r>:
 80085ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ee:	4680      	mov	r8, r0
 80085f0:	4614      	mov	r4, r2
 80085f2:	460e      	mov	r6, r1
 80085f4:	b921      	cbnz	r1, 8008600 <_realloc_r+0x16>
 80085f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085fa:	4611      	mov	r1, r2
 80085fc:	f7fe b9c2 	b.w	8006984 <_malloc_r>
 8008600:	b92a      	cbnz	r2, 800860e <_realloc_r+0x24>
 8008602:	f7fe fe81 	bl	8007308 <_free_r>
 8008606:	4625      	mov	r5, r4
 8008608:	4628      	mov	r0, r5
 800860a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800860e:	f000 f8d3 	bl	80087b8 <_malloc_usable_size_r>
 8008612:	4284      	cmp	r4, r0
 8008614:	4607      	mov	r7, r0
 8008616:	d802      	bhi.n	800861e <_realloc_r+0x34>
 8008618:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800861c:	d812      	bhi.n	8008644 <_realloc_r+0x5a>
 800861e:	4621      	mov	r1, r4
 8008620:	4640      	mov	r0, r8
 8008622:	f7fe f9af 	bl	8006984 <_malloc_r>
 8008626:	4605      	mov	r5, r0
 8008628:	2800      	cmp	r0, #0
 800862a:	d0ed      	beq.n	8008608 <_realloc_r+0x1e>
 800862c:	42bc      	cmp	r4, r7
 800862e:	4622      	mov	r2, r4
 8008630:	4631      	mov	r1, r6
 8008632:	bf28      	it	cs
 8008634:	463a      	movcs	r2, r7
 8008636:	f7fe fe3a 	bl	80072ae <memcpy>
 800863a:	4631      	mov	r1, r6
 800863c:	4640      	mov	r0, r8
 800863e:	f7fe fe63 	bl	8007308 <_free_r>
 8008642:	e7e1      	b.n	8008608 <_realloc_r+0x1e>
 8008644:	4635      	mov	r5, r6
 8008646:	e7df      	b.n	8008608 <_realloc_r+0x1e>

08008648 <_strtoul_l.constprop.0>:
 8008648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800864c:	4f36      	ldr	r7, [pc, #216]	; (8008728 <_strtoul_l.constprop.0+0xe0>)
 800864e:	4686      	mov	lr, r0
 8008650:	460d      	mov	r5, r1
 8008652:	4628      	mov	r0, r5
 8008654:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008658:	5d3e      	ldrb	r6, [r7, r4]
 800865a:	f016 0608 	ands.w	r6, r6, #8
 800865e:	d1f8      	bne.n	8008652 <_strtoul_l.constprop.0+0xa>
 8008660:	2c2d      	cmp	r4, #45	; 0x2d
 8008662:	d130      	bne.n	80086c6 <_strtoul_l.constprop.0+0x7e>
 8008664:	782c      	ldrb	r4, [r5, #0]
 8008666:	2601      	movs	r6, #1
 8008668:	1c85      	adds	r5, r0, #2
 800866a:	2b00      	cmp	r3, #0
 800866c:	d057      	beq.n	800871e <_strtoul_l.constprop.0+0xd6>
 800866e:	2b10      	cmp	r3, #16
 8008670:	d109      	bne.n	8008686 <_strtoul_l.constprop.0+0x3e>
 8008672:	2c30      	cmp	r4, #48	; 0x30
 8008674:	d107      	bne.n	8008686 <_strtoul_l.constprop.0+0x3e>
 8008676:	7828      	ldrb	r0, [r5, #0]
 8008678:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800867c:	2858      	cmp	r0, #88	; 0x58
 800867e:	d149      	bne.n	8008714 <_strtoul_l.constprop.0+0xcc>
 8008680:	786c      	ldrb	r4, [r5, #1]
 8008682:	2310      	movs	r3, #16
 8008684:	3502      	adds	r5, #2
 8008686:	f04f 38ff 	mov.w	r8, #4294967295
 800868a:	2700      	movs	r7, #0
 800868c:	fbb8 f8f3 	udiv	r8, r8, r3
 8008690:	fb03 f908 	mul.w	r9, r3, r8
 8008694:	ea6f 0909 	mvn.w	r9, r9
 8008698:	4638      	mov	r0, r7
 800869a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800869e:	f1bc 0f09 	cmp.w	ip, #9
 80086a2:	d815      	bhi.n	80086d0 <_strtoul_l.constprop.0+0x88>
 80086a4:	4664      	mov	r4, ip
 80086a6:	42a3      	cmp	r3, r4
 80086a8:	dd23      	ble.n	80086f2 <_strtoul_l.constprop.0+0xaa>
 80086aa:	f1b7 3fff 	cmp.w	r7, #4294967295
 80086ae:	d007      	beq.n	80086c0 <_strtoul_l.constprop.0+0x78>
 80086b0:	4580      	cmp	r8, r0
 80086b2:	d31b      	bcc.n	80086ec <_strtoul_l.constprop.0+0xa4>
 80086b4:	d101      	bne.n	80086ba <_strtoul_l.constprop.0+0x72>
 80086b6:	45a1      	cmp	r9, r4
 80086b8:	db18      	blt.n	80086ec <_strtoul_l.constprop.0+0xa4>
 80086ba:	fb00 4003 	mla	r0, r0, r3, r4
 80086be:	2701      	movs	r7, #1
 80086c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086c4:	e7e9      	b.n	800869a <_strtoul_l.constprop.0+0x52>
 80086c6:	2c2b      	cmp	r4, #43	; 0x2b
 80086c8:	bf04      	itt	eq
 80086ca:	782c      	ldrbeq	r4, [r5, #0]
 80086cc:	1c85      	addeq	r5, r0, #2
 80086ce:	e7cc      	b.n	800866a <_strtoul_l.constprop.0+0x22>
 80086d0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80086d4:	f1bc 0f19 	cmp.w	ip, #25
 80086d8:	d801      	bhi.n	80086de <_strtoul_l.constprop.0+0x96>
 80086da:	3c37      	subs	r4, #55	; 0x37
 80086dc:	e7e3      	b.n	80086a6 <_strtoul_l.constprop.0+0x5e>
 80086de:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80086e2:	f1bc 0f19 	cmp.w	ip, #25
 80086e6:	d804      	bhi.n	80086f2 <_strtoul_l.constprop.0+0xaa>
 80086e8:	3c57      	subs	r4, #87	; 0x57
 80086ea:	e7dc      	b.n	80086a6 <_strtoul_l.constprop.0+0x5e>
 80086ec:	f04f 37ff 	mov.w	r7, #4294967295
 80086f0:	e7e6      	b.n	80086c0 <_strtoul_l.constprop.0+0x78>
 80086f2:	1c7b      	adds	r3, r7, #1
 80086f4:	d106      	bne.n	8008704 <_strtoul_l.constprop.0+0xbc>
 80086f6:	2322      	movs	r3, #34	; 0x22
 80086f8:	f8ce 3000 	str.w	r3, [lr]
 80086fc:	4638      	mov	r0, r7
 80086fe:	b932      	cbnz	r2, 800870e <_strtoul_l.constprop.0+0xc6>
 8008700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008704:	b106      	cbz	r6, 8008708 <_strtoul_l.constprop.0+0xc0>
 8008706:	4240      	negs	r0, r0
 8008708:	2a00      	cmp	r2, #0
 800870a:	d0f9      	beq.n	8008700 <_strtoul_l.constprop.0+0xb8>
 800870c:	b107      	cbz	r7, 8008710 <_strtoul_l.constprop.0+0xc8>
 800870e:	1e69      	subs	r1, r5, #1
 8008710:	6011      	str	r1, [r2, #0]
 8008712:	e7f5      	b.n	8008700 <_strtoul_l.constprop.0+0xb8>
 8008714:	2430      	movs	r4, #48	; 0x30
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1b5      	bne.n	8008686 <_strtoul_l.constprop.0+0x3e>
 800871a:	2308      	movs	r3, #8
 800871c:	e7b3      	b.n	8008686 <_strtoul_l.constprop.0+0x3e>
 800871e:	2c30      	cmp	r4, #48	; 0x30
 8008720:	d0a9      	beq.n	8008676 <_strtoul_l.constprop.0+0x2e>
 8008722:	230a      	movs	r3, #10
 8008724:	e7af      	b.n	8008686 <_strtoul_l.constprop.0+0x3e>
 8008726:	bf00      	nop
 8008728:	08009773 	.word	0x08009773

0800872c <_strtoul_r>:
 800872c:	f7ff bf8c 	b.w	8008648 <_strtoul_l.constprop.0>

08008730 <_raise_r>:
 8008730:	291f      	cmp	r1, #31
 8008732:	b538      	push	{r3, r4, r5, lr}
 8008734:	4604      	mov	r4, r0
 8008736:	460d      	mov	r5, r1
 8008738:	d904      	bls.n	8008744 <_raise_r+0x14>
 800873a:	2316      	movs	r3, #22
 800873c:	6003      	str	r3, [r0, #0]
 800873e:	f04f 30ff 	mov.w	r0, #4294967295
 8008742:	bd38      	pop	{r3, r4, r5, pc}
 8008744:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008746:	b112      	cbz	r2, 800874e <_raise_r+0x1e>
 8008748:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800874c:	b94b      	cbnz	r3, 8008762 <_raise_r+0x32>
 800874e:	4620      	mov	r0, r4
 8008750:	f000 f830 	bl	80087b4 <_getpid_r>
 8008754:	462a      	mov	r2, r5
 8008756:	4601      	mov	r1, r0
 8008758:	4620      	mov	r0, r4
 800875a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800875e:	f000 b817 	b.w	8008790 <_kill_r>
 8008762:	2b01      	cmp	r3, #1
 8008764:	d00a      	beq.n	800877c <_raise_r+0x4c>
 8008766:	1c59      	adds	r1, r3, #1
 8008768:	d103      	bne.n	8008772 <_raise_r+0x42>
 800876a:	2316      	movs	r3, #22
 800876c:	6003      	str	r3, [r0, #0]
 800876e:	2001      	movs	r0, #1
 8008770:	e7e7      	b.n	8008742 <_raise_r+0x12>
 8008772:	2400      	movs	r4, #0
 8008774:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008778:	4628      	mov	r0, r5
 800877a:	4798      	blx	r3
 800877c:	2000      	movs	r0, #0
 800877e:	e7e0      	b.n	8008742 <_raise_r+0x12>

08008780 <raise>:
 8008780:	4b02      	ldr	r3, [pc, #8]	; (800878c <raise+0xc>)
 8008782:	4601      	mov	r1, r0
 8008784:	6818      	ldr	r0, [r3, #0]
 8008786:	f7ff bfd3 	b.w	8008730 <_raise_r>
 800878a:	bf00      	nop
 800878c:	20000068 	.word	0x20000068

08008790 <_kill_r>:
 8008790:	b538      	push	{r3, r4, r5, lr}
 8008792:	4d07      	ldr	r5, [pc, #28]	; (80087b0 <_kill_r+0x20>)
 8008794:	2300      	movs	r3, #0
 8008796:	4604      	mov	r4, r0
 8008798:	4608      	mov	r0, r1
 800879a:	4611      	mov	r1, r2
 800879c:	602b      	str	r3, [r5, #0]
 800879e:	f7f8 fb97 	bl	8000ed0 <_kill>
 80087a2:	1c43      	adds	r3, r0, #1
 80087a4:	d102      	bne.n	80087ac <_kill_r+0x1c>
 80087a6:	682b      	ldr	r3, [r5, #0]
 80087a8:	b103      	cbz	r3, 80087ac <_kill_r+0x1c>
 80087aa:	6023      	str	r3, [r4, #0]
 80087ac:	bd38      	pop	{r3, r4, r5, pc}
 80087ae:	bf00      	nop
 80087b0:	20004ebc 	.word	0x20004ebc

080087b4 <_getpid_r>:
 80087b4:	f7f8 bb84 	b.w	8000ec0 <_getpid>

080087b8 <_malloc_usable_size_r>:
 80087b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087bc:	1f18      	subs	r0, r3, #4
 80087be:	2b00      	cmp	r3, #0
 80087c0:	bfbc      	itt	lt
 80087c2:	580b      	ldrlt	r3, [r1, r0]
 80087c4:	18c0      	addlt	r0, r0, r3
 80087c6:	4770      	bx	lr

080087c8 <_init>:
 80087c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ca:	bf00      	nop
 80087cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ce:	bc08      	pop	{r3}
 80087d0:	469e      	mov	lr, r3
 80087d2:	4770      	bx	lr

080087d4 <_fini>:
 80087d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087d6:	bf00      	nop
 80087d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087da:	bc08      	pop	{r3}
 80087dc:	469e      	mov	lr, r3
 80087de:	4770      	bx	lr
